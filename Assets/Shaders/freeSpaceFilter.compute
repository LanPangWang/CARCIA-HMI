// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> FreeSpaceRaw;
RWTexture2D<float4> FreeSpaceBlur;
float _SamplerPixels;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // FreeSpaceBlur[id.xy] = FreeSpaceRaw[id.xy].a > 0.1 ? float4(1,1,1,1) : float4(0,0,0,0);
    if(FreeSpaceRaw[id.xy].a < 0.1)
    {
        FreeSpaceBlur[id.xy] = float4(0, 0, 0, 0);
        return;
    }

    float samplerPixels = 2 * floor(_SamplerPixels) - 1;
    float distance = 1;

    for(float i = -samplerPixels; i <= samplerPixels; i += 1)
    {
        for(float j = -0; j <= 0; j += 1)
        {
            float2 maskUV = float2(i, j);
            uint2 mainUV = uint2(id.x + i, id.y +j);
            distance = FreeSpaceRaw[mainUV ].a < 0.1 ? min(distance, length(maskUV) / samplerPixels) : distance;
        }
    }
    
    FreeSpaceBlur[id.xy] = float4(distance, distance, distance, distance);
}
