syntax = "proto2";
package xviewer;

message ObInfo{
  optional int32 id = 1;
  optional double first_timestamp = 2;
  optional double second_timestamp = 3;
}

message ObMap{
  optional double record_timestamp = 1;
  repeated  ObInfo obs_info = 2;
}
message STPoint3D{
  optional float x = 1 [default = 0];
  optional float y = 2 [default = 0];
  optional float z = 3 [default = 0];
}

message STPathWaypoint{
  optional STPoint3D waypoint = 1;
  optional float s = 2 [default = 0];
  optional float yaw = 3 [default = 0];
  optional float kappa = 4 [default = 0]; 
}

message STPath{
  optional double timestamp = 1 [default = 0];
  optional double expected_transfer_time = 2 [default = 0];
  repeated STPathWaypoint path_waypoints = 3;
  optional bool is_reference_line_short = 4 [default = false];
}

message STPoint{
  optional float s = 1;
  optional float t = 2;
  optional float l = 3;
}
message STObjectBoundary{
  optional double timestamp = 1;
  repeated STPoint st_upperbound = 2;
  repeated STPoint st_lowerbound = 3;
  repeated float v = 4; 
}
message ObstaclePredictiveDynoInfo{
  optional float duration = 1;
  optional float t_interval = 2 [default = 0.1];
  repeated STPoint3D waypoint_list = 3;
  repeated float velocity_list = 4;
  repeated float acceleration_list = 5;
  repeated float yaw_list = 6;
}
message STObjectInfo{
  optional double timestamp = 1;
  optional STObjectBoundary st_boundaries = 2;
  optional ObstaclePredictiveDynoInfo predict_dyno_info = 3;
  optional float s_projected_on_planned_path = 4;
  optional int32 policy_type = 5;
  optional int32 id = 6;
  optional int32 type = 7;
  optional float w = 8;
  optional float l = 9;
  optional bool is_static = 10;
  repeated STPoint3D box_corners = 11;
  optional float v = 12;
  optional int32 lane_id = 13;
  optional bool is_virtual_edge = 14 [default = false];
  optional bool is_virtual_edge_for_lane_change = 15 [default = false];
  optional bool is_virtual_edge_for_crossing = 16 [default = false];
  optional bool is_lane_changing_wall = 17 [default = false];
  optional double lane_changing_wall_expect_dis = 18 [default = 0.0];
  optional double virtual_coeff = 19 [default = 0.0];
}
message STRefinedVehicleStatusStamped{
  optional double timestamp = 1;
  optional STPoint3D location = 2;
  optional float heading_angle = 3;
  optional float linear_velocity = 4;
  optional float linear_acceleration = 5;
  optional float wheel_angle = 6;
  optional float lateral_distance_to_ego_reference_line = 7;
  optional float yaw_at_origin = 8;
  optional float real_linear_velocity = 9;
  optional float real_linear_acceleration = 10;
}
message ChassisDynoLimits{
  optional float max_normal_acceleration = 1;
  optional float max_normal_deceleration = 2;
  optional float aeb_deceleration = 3;
  optional float max_radial_acceleration = 4;
  optional float max_change_lane_acceleration = 5;  
}
message ChassisInfo{
  optional float length = 1;
  optional float width = 2;
  optional float wheel_base = 3;
  optional float gps_to_head = 4;
  optional ChassisDynoLimits dyno_limits = 5;
}
message SpeedPlanningDetail{
  optional bool brake_status = 1;
  optional bool last_is_in_follow = 2 [default = false];
  optional bool in_lower_dec = 3 [default = false];
  optional bool long_car_follow_near_mode = 4 [default = false];
  optional bool car_follow_near_mode = 5 [default = false];
  optional bool add_virtual_ob_mode = 6 [default = false];
  optional bool is_in_dynamic_emergency_zone = 7 [default = false];
  optional ObMap ob_map = 8;
  optional ObMap virtual_edge_map = 9;
  optional bool virtual_emergency_zone_flag = 10 [default = false];
  optional bool last_is_in_slow_cut_in = 11 [default = false];
}
message STDebug{
  optional STPath st_path = 1;
  repeated STObjectInfo st_info_list = 2;
  optional STRefinedVehicleStatusStamped vehicle_status = 3;
  optional ChassisInfo chassis_info = 4;
  optional float local_recommend_speed = 5;
  optional bool in_change_lane = 6;
  optional float cruise_speed = 7;
  optional SpeedLimit road_speed_limit = 8;
  optional SpeedPlanningDetail speed_planning_detail = 9;
  optional double timestamp = 10;
  optional SpeedData cruise_speed_list = 11;
  optional int32 lateral_policy_type = 12;
  optional int32 lane_change_status = 13;
}
message SpeedPoint{
  optional float s = 1;
  optional float v = 2;
  optional float a = 3;
  optional float da = 4;
  optional float t = 5;
}
message SpeedData{
  repeated SpeedPoint speed_points = 1;
}
message SVPoint{
  optional float s = 1;
  optional float v = 2;
}
message SpeedLimit{
  repeated SVPoint speed_limit_points = 1;
}

message FeasiblePoint{
  optional float s_min = 1;
  optional float s_max = 2;
  optional float v_min = 3;
  optional float v_max = 4;
  optional float a_min = 5;
  optional float a_max = 6;
  optional float t_s = 7;
}

message FeasibleData{
  repeated FeasiblePoint feasible_points = 1;
}

message VirtualObsData{
  optional int32 id = 1;
  repeated STPoint3D box_corners = 2;
  optional float w = 3;
  optional float l = 4;
}

message DesiredAccPoint{
  optional float accel_max_desired = 1;
  optional float accel_min_desired = 2;
}

message DesiredAcceleration{
  repeated DesiredAccPoint desired_acc_points = 1;
}

message STPubInfo{
  optional STDebug st_debug = 1;
  optional int32 st_planning_err_code = 2;
  optional STObjectBoundary st_boundaries = 3;
  optional SpeedData speed_data_fallback = 4;
  optional SpeedData speed_data_dp = 5;
  optional SpeedData speed_data_qp = 6;
  optional int32 st_traj_type = 7; // # 0 failed,1 qp traj,2 fallback
  optional string st_planning_err_code_str = 8;
  optional SpeedLimit speed_limit = 9;
  optional FeasibleData feasible_data = 10;
  optional double timestamp = 11;
  repeated STObjectInfo st_info_list_virtual = 12; 
  repeated uint64 intention_ob_id = 13;
  repeated uint64 crossable_ob_id = 14;
  repeated VirtualObsData virtual_obs_data = 15;
  optional DesiredAcceleration desired_acc = 16;
  repeated float s_max_desired = 17;
  repeated float reference_speed = 18;
}
