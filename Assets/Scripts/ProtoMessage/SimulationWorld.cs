// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: simulation_world.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Xviewer {

  /// <summary>Holder for reflection information generated from simulation_world.proto</summary>
  public static partial class SimulationWorldReflection {

    #region Descriptor
    /// <summary>File descriptor for simulation_world.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SimulationWorldReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZzaW11bGF0aW9uX3dvcmxkLnByb3RvEgd4dmlld2VyGgxiYXNpY3MucHJv",
            "dG8aEmxvY2FsaXphdGlvbi5wcm90bxoRZW5naW5lZXJpbmcucHJvdG8aEHBl",
            "cmNlcHRpb24ucHJvdG8aCXBuYy5wcm90bxoJbWVtLnByb3RvGhBtYXBfZW5n",
            "aW5lLnByb3RvGglobWkucHJvdG8inQQKD1NpbXVsYXRpb25Xb3JsZBIRCgl0",
            "aW1lc3RhbXAYASABKAESGAoQc29mdHdhcmVfdmVyc2lvbhgCIAEoCRIpChBh",
            "dXRvX2RyaXZpbmdfY2FyGAMgASgLMg8ueHZpZXdlci5FZ29DYXISMAoPaGFy",
            "ZHdhcmVfc2lnbmFsGAQgASgLMhcueHZpZXdlci5IYXJkd2FyZVNpZ25hbBIp",
            "CgtlbmdpbmVlcmluZxgFIAEoCzIULnh2aWV3ZXIuRW5naW5lZXJpbmcSOAoT",
            "ZnVzaW9uX2xvY2FsaXphdGlvbhgGIAEoCzIbLnh2aWV3ZXIuRnVzaW9uTG9j",
            "YWxpemF0aW9uEicKCnBlcmNlcHRpb24YByABKAsyEy54dmlld2VyLlBlcmNl",
            "cHRpb24SIwoIcGxhbm5pbmcYCCABKAsyES54dmlld2VyLlBsYW5uaW5nEicK",
            "CmNvbnRyb2xpbmcYCSABKAsyEy54dmlld2VyLkNvbnRyb2xpbmcSJgoKbWFw",
            "X2VuZ2luZRgKIAEoCzISLnh2aWV3ZXIuTWFwRW5naW5lEioKFHNlbWFudGlj",
            "X2Vudmlyb25tZW50GAsgASgLMgwueHZpZXdlci5NZW0SJgoKdG9waWNfaW5m",
            "bxgMIAMoCzISLnh2aWV3ZXIuVG9waWNJbmZvEigKC3Jvc2JhZ19pbmZvGA0g",
            "ASgLMhMueHZpZXdlci5Sb3NiYWdJbmZv"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Xviewer.BasicsReflection.Descriptor, global::Xviewer.LocalizationReflection.Descriptor, global::Xviewer.EngineeringReflection.Descriptor, global::Xviewer.PerceptionReflection.Descriptor, global::Xviewer.PncReflection.Descriptor, global::Xviewer.MemReflection.Descriptor, global::Xviewer.MapEngineReflection.Descriptor, global::Xviewer.HmiReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.SimulationWorld), global::Xviewer.SimulationWorld.Parser, new[]{ "Timestamp", "SoftwareVersion", "AutoDrivingCar", "HardwareSignal", "Engineering", "FusionLocalization", "Perception", "Planning", "Controling", "MapEngine", "SemanticEnvironment", "TopicInfo", "RosbagInfo" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Next-id: 31
  /// </summary>
  public sealed partial class SimulationWorld : pb::IMessage<SimulationWorld> {
    private static readonly pb::MessageParser<SimulationWorld> _parser = new pb::MessageParser<SimulationWorld>(() => new SimulationWorld());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimulationWorld> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.SimulationWorldReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulationWorld() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulationWorld(SimulationWorld other) : this() {
      _hasBits0 = other._hasBits0;
      timestamp_ = other.timestamp_;
      softwareVersion_ = other.softwareVersion_;
      autoDrivingCar_ = other.autoDrivingCar_ != null ? other.autoDrivingCar_.Clone() : null;
      hardwareSignal_ = other.hardwareSignal_ != null ? other.hardwareSignal_.Clone() : null;
      engineering_ = other.engineering_ != null ? other.engineering_.Clone() : null;
      fusionLocalization_ = other.fusionLocalization_ != null ? other.fusionLocalization_.Clone() : null;
      perception_ = other.perception_ != null ? other.perception_.Clone() : null;
      planning_ = other.planning_ != null ? other.planning_.Clone() : null;
      controling_ = other.controling_ != null ? other.controling_.Clone() : null;
      mapEngine_ = other.mapEngine_ != null ? other.mapEngine_.Clone() : null;
      semanticEnvironment_ = other.semanticEnvironment_ != null ? other.semanticEnvironment_.Clone() : null;
      topicInfo_ = other.topicInfo_.Clone();
      rosbagInfo_ = other.rosbagInfo_ != null ? other.rosbagInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulationWorld Clone() {
      return new SimulationWorld(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private readonly static double TimestampDefaultValue = 0D;

    private double timestamp_;
    /// <summary>
    /// --- 系统信息 ---
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Timestamp {
      get { if ((_hasBits0 & 1) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 1;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimestamp {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestamp() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "software_version" field.</summary>
    public const int SoftwareVersionFieldNumber = 2;
    private readonly static string SoftwareVersionDefaultValue = "";

    private string softwareVersion_;
    /// <summary>
    /// --- 软件版本 ---
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SoftwareVersion {
      get { return softwareVersion_ ?? SoftwareVersionDefaultValue; }
      set {
        softwareVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "software_version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSoftwareVersion {
      get { return softwareVersion_ != null; }
    }
    /// <summary>Clears the value of the "software_version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSoftwareVersion() {
      softwareVersion_ = null;
    }

    /// <summary>Field number for the "auto_driving_car" field.</summary>
    public const int AutoDrivingCarFieldNumber = 3;
    private global::Xviewer.EgoCar autoDrivingCar_;
    /// <summary>
    /// --- 自动驾驶车辆 ---
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.EgoCar AutoDrivingCar {
      get { return autoDrivingCar_; }
      set {
        autoDrivingCar_ = value;
      }
    }

    /// <summary>Field number for the "hardware_signal" field.</summary>
    public const int HardwareSignalFieldNumber = 4;
    private global::Xviewer.HardwareSignal hardwareSignal_;
    /// <summary>
    /// --- 传感器硬件信号 ---
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.HardwareSignal HardwareSignal {
      get { return hardwareSignal_; }
      set {
        hardwareSignal_ = value;
      }
    }

    /// <summary>Field number for the "engineering" field.</summary>
    public const int EngineeringFieldNumber = 5;
    private global::Xviewer.Engineering engineering_;
    /// <summary>
    /// --- 工程 ---
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Engineering Engineering {
      get { return engineering_; }
      set {
        engineering_ = value;
      }
    }

    /// <summary>Field number for the "fusion_localization" field.</summary>
    public const int FusionLocalizationFieldNumber = 6;
    private global::Xviewer.FusionLocalization fusionLocalization_;
    /// <summary>
    /// --- 融合定位 --- 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.FusionLocalization FusionLocalization {
      get { return fusionLocalization_; }
      set {
        fusionLocalization_ = value;
      }
    }

    /// <summary>Field number for the "perception" field.</summary>
    public const int PerceptionFieldNumber = 7;
    private global::Xviewer.Perception perception_;
    /// <summary>
    /// --- 感知信息 ---
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Perception Perception {
      get { return perception_; }
      set {
        perception_ = value;
      }
    }

    /// <summary>Field number for the "planning" field.</summary>
    public const int PlanningFieldNumber = 8;
    private global::Xviewer.Planning planning_;
    /// <summary>
    /// --- 决策规划 ---
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Planning Planning {
      get { return planning_; }
      set {
        planning_ = value;
      }
    }

    /// <summary>Field number for the "controling" field.</summary>
    public const int ControlingFieldNumber = 9;
    private global::Xviewer.Controling controling_;
    /// <summary>
    /// --- 控制消息 ---
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Controling Controling {
      get { return controling_; }
      set {
        controling_ = value;
      }
    }

    /// <summary>Field number for the "map_engine" field.</summary>
    public const int MapEngineFieldNumber = 10;
    private global::Xviewer.MapEngine mapEngine_;
    /// <summary>
    /// --- map engine ---
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.MapEngine MapEngine {
      get { return mapEngine_; }
      set {
        mapEngine_ = value;
      }
    }

    /// <summary>Field number for the "semantic_environment" field.</summary>
    public const int SemanticEnvironmentFieldNumber = 11;
    private global::Xviewer.Mem semanticEnvironment_;
    /// <summary>
    /// --- MEM ---
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Mem SemanticEnvironment {
      get { return semanticEnvironment_; }
      set {
        semanticEnvironment_ = value;
      }
    }

    /// <summary>Field number for the "topic_info" field.</summary>
    public const int TopicInfoFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Xviewer.TopicInfo> _repeated_topicInfo_codec
        = pb::FieldCodec.ForMessage(98, global::Xviewer.TopicInfo.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.TopicInfo> topicInfo_ = new pbc::RepeatedField<global::Xviewer.TopicInfo>();
    /// <summary>
    /// --- 话题信息 ---
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.TopicInfo> TopicInfo {
      get { return topicInfo_; }
    }

    /// <summary>Field number for the "rosbag_info" field.</summary>
    public const int RosbagInfoFieldNumber = 13;
    private global::Xviewer.RosbagInfo rosbagInfo_;
    /// <summary>
    /// --- rosbag ---
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.RosbagInfo RosbagInfo {
      get { return rosbagInfo_; }
      set {
        rosbagInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimulationWorld);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimulationWorld other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Timestamp, other.Timestamp)) return false;
      if (SoftwareVersion != other.SoftwareVersion) return false;
      if (!object.Equals(AutoDrivingCar, other.AutoDrivingCar)) return false;
      if (!object.Equals(HardwareSignal, other.HardwareSignal)) return false;
      if (!object.Equals(Engineering, other.Engineering)) return false;
      if (!object.Equals(FusionLocalization, other.FusionLocalization)) return false;
      if (!object.Equals(Perception, other.Perception)) return false;
      if (!object.Equals(Planning, other.Planning)) return false;
      if (!object.Equals(Controling, other.Controling)) return false;
      if (!object.Equals(MapEngine, other.MapEngine)) return false;
      if (!object.Equals(SemanticEnvironment, other.SemanticEnvironment)) return false;
      if(!topicInfo_.Equals(other.topicInfo_)) return false;
      if (!object.Equals(RosbagInfo, other.RosbagInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTimestamp) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Timestamp);
      if (HasSoftwareVersion) hash ^= SoftwareVersion.GetHashCode();
      if (autoDrivingCar_ != null) hash ^= AutoDrivingCar.GetHashCode();
      if (hardwareSignal_ != null) hash ^= HardwareSignal.GetHashCode();
      if (engineering_ != null) hash ^= Engineering.GetHashCode();
      if (fusionLocalization_ != null) hash ^= FusionLocalization.GetHashCode();
      if (perception_ != null) hash ^= Perception.GetHashCode();
      if (planning_ != null) hash ^= Planning.GetHashCode();
      if (controling_ != null) hash ^= Controling.GetHashCode();
      if (mapEngine_ != null) hash ^= MapEngine.GetHashCode();
      if (semanticEnvironment_ != null) hash ^= SemanticEnvironment.GetHashCode();
      hash ^= topicInfo_.GetHashCode();
      if (rosbagInfo_ != null) hash ^= RosbagInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTimestamp) {
        output.WriteRawTag(9);
        output.WriteDouble(Timestamp);
      }
      if (HasSoftwareVersion) {
        output.WriteRawTag(18);
        output.WriteString(SoftwareVersion);
      }
      if (autoDrivingCar_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(AutoDrivingCar);
      }
      if (hardwareSignal_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(HardwareSignal);
      }
      if (engineering_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Engineering);
      }
      if (fusionLocalization_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(FusionLocalization);
      }
      if (perception_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Perception);
      }
      if (planning_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Planning);
      }
      if (controling_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Controling);
      }
      if (mapEngine_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(MapEngine);
      }
      if (semanticEnvironment_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(SemanticEnvironment);
      }
      topicInfo_.WriteTo(output, _repeated_topicInfo_codec);
      if (rosbagInfo_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(RosbagInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTimestamp) {
        size += 1 + 8;
      }
      if (HasSoftwareVersion) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SoftwareVersion);
      }
      if (autoDrivingCar_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AutoDrivingCar);
      }
      if (hardwareSignal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HardwareSignal);
      }
      if (engineering_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Engineering);
      }
      if (fusionLocalization_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FusionLocalization);
      }
      if (perception_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Perception);
      }
      if (planning_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Planning);
      }
      if (controling_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Controling);
      }
      if (mapEngine_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MapEngine);
      }
      if (semanticEnvironment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SemanticEnvironment);
      }
      size += topicInfo_.CalculateSize(_repeated_topicInfo_codec);
      if (rosbagInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RosbagInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimulationWorld other) {
      if (other == null) {
        return;
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      if (other.HasSoftwareVersion) {
        SoftwareVersion = other.SoftwareVersion;
      }
      if (other.autoDrivingCar_ != null) {
        if (autoDrivingCar_ == null) {
          AutoDrivingCar = new global::Xviewer.EgoCar();
        }
        AutoDrivingCar.MergeFrom(other.AutoDrivingCar);
      }
      if (other.hardwareSignal_ != null) {
        if (hardwareSignal_ == null) {
          HardwareSignal = new global::Xviewer.HardwareSignal();
        }
        HardwareSignal.MergeFrom(other.HardwareSignal);
      }
      if (other.engineering_ != null) {
        if (engineering_ == null) {
          Engineering = new global::Xviewer.Engineering();
        }
        Engineering.MergeFrom(other.Engineering);
      }
      if (other.fusionLocalization_ != null) {
        if (fusionLocalization_ == null) {
          FusionLocalization = new global::Xviewer.FusionLocalization();
        }
        FusionLocalization.MergeFrom(other.FusionLocalization);
      }
      if (other.perception_ != null) {
        if (perception_ == null) {
          Perception = new global::Xviewer.Perception();
        }
        Perception.MergeFrom(other.Perception);
      }
      if (other.planning_ != null) {
        if (planning_ == null) {
          Planning = new global::Xviewer.Planning();
        }
        Planning.MergeFrom(other.Planning);
      }
      if (other.controling_ != null) {
        if (controling_ == null) {
          Controling = new global::Xviewer.Controling();
        }
        Controling.MergeFrom(other.Controling);
      }
      if (other.mapEngine_ != null) {
        if (mapEngine_ == null) {
          MapEngine = new global::Xviewer.MapEngine();
        }
        MapEngine.MergeFrom(other.MapEngine);
      }
      if (other.semanticEnvironment_ != null) {
        if (semanticEnvironment_ == null) {
          SemanticEnvironment = new global::Xviewer.Mem();
        }
        SemanticEnvironment.MergeFrom(other.SemanticEnvironment);
      }
      topicInfo_.Add(other.topicInfo_);
      if (other.rosbagInfo_ != null) {
        if (rosbagInfo_ == null) {
          RosbagInfo = new global::Xviewer.RosbagInfo();
        }
        RosbagInfo.MergeFrom(other.RosbagInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Timestamp = input.ReadDouble();
            break;
          }
          case 18: {
            SoftwareVersion = input.ReadString();
            break;
          }
          case 26: {
            if (autoDrivingCar_ == null) {
              AutoDrivingCar = new global::Xviewer.EgoCar();
            }
            input.ReadMessage(AutoDrivingCar);
            break;
          }
          case 34: {
            if (hardwareSignal_ == null) {
              HardwareSignal = new global::Xviewer.HardwareSignal();
            }
            input.ReadMessage(HardwareSignal);
            break;
          }
          case 42: {
            if (engineering_ == null) {
              Engineering = new global::Xviewer.Engineering();
            }
            input.ReadMessage(Engineering);
            break;
          }
          case 50: {
            if (fusionLocalization_ == null) {
              FusionLocalization = new global::Xviewer.FusionLocalization();
            }
            input.ReadMessage(FusionLocalization);
            break;
          }
          case 58: {
            if (perception_ == null) {
              Perception = new global::Xviewer.Perception();
            }
            input.ReadMessage(Perception);
            break;
          }
          case 66: {
            if (planning_ == null) {
              Planning = new global::Xviewer.Planning();
            }
            input.ReadMessage(Planning);
            break;
          }
          case 74: {
            if (controling_ == null) {
              Controling = new global::Xviewer.Controling();
            }
            input.ReadMessage(Controling);
            break;
          }
          case 82: {
            if (mapEngine_ == null) {
              MapEngine = new global::Xviewer.MapEngine();
            }
            input.ReadMessage(MapEngine);
            break;
          }
          case 90: {
            if (semanticEnvironment_ == null) {
              SemanticEnvironment = new global::Xviewer.Mem();
            }
            input.ReadMessage(SemanticEnvironment);
            break;
          }
          case 98: {
            topicInfo_.AddEntriesFrom(input, _repeated_topicInfo_codec);
            break;
          }
          case 106: {
            if (rosbagInfo_ == null) {
              RosbagInfo = new global::Xviewer.RosbagInfo();
            }
            input.ReadMessage(RosbagInfo);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
