// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: perception.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Xviewer {

  /// <summary>Holder for reflection information generated from perception.proto</summary>
  public static partial class PerceptionReflection {

    #region Descriptor
    /// <summary>File descriptor for perception.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PerceptionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBwZXJjZXB0aW9uLnByb3RvEgd4dmlld2VyGgxiYXNpY3MucHJvdG8aEmxv",
            "Y2FsaXphdGlvbi5wcm90byI8ChRQYXJraW5nU3BhY2VPYnN0YWNsZRIWCg5v",
            "YnN0YWNsZV9wb2ludBgBIAMoARIMCgR0eXBlGAIgASgFItcCCgxQYXJraW5n",
            "U3BhY2USCgoCaWQYASABKAMSDQoFcHR5cGUYAiABKAUSFwoPdHlwZV9jb25m",
            "aWRlbmNlGAMgASgBEhoKEnBhcmtpbmdfc2xvdF9wb2ludBgEIAMoARIiChpw",
            "b2ludF9jb29yZGluYXRlX2F0dHJpYnV0ZRgFIAEoBRINCgV2YWxpZBgGIAEo",
            "CBILCgNzcmMYByABKAUSEQoJZGlyZWN0aW9uGAggASgBEhwKFGhhc19saW1p",
            "dGluZ19zdG9wcGVyGAkgASgIEjcKEGxpbWl0aW5nX3N0b3BwZXIYCiADKAsy",
            "HS54dmlld2VyLlBhcmtpbmdTcGFjZU9ic3RhY2xlEhgKEGhhc19wYXJraW5n",
            "X2xvY2sYCyABKAgSMwoMcGFya2luZ19sb2NrGAwgAygLMh0ueHZpZXdlci5Q",
            "YXJraW5nU3BhY2VPYnN0YWNsZSJXCgxQYXJraW5nU2xvdHMSLAoNcGFya2lu",
            "Z19zbG90cxgBIAMoCzIVLnh2aWV3ZXIuUGFya2luZ1NwYWNlEhkKEXBhcmtp",
            "bmdfc2xvdHNfbnVtGAIgASgFIl8KEE9ic3RhY2xlQm91bmRhcnkSIAoIYm91",
            "bmRhcnkYASADKAsyDi54dmlld2VyLlBvaW50EhsKA2JveBgCIAMoCzIOLnh2",
            "aWV3ZXIuUG9pbnQSDAoEdHlwZRgDIAEoBSKBAQoTQ29uc3RydWN0aW9uU2Vj",
            "dGlvbhIMCgR0eXBlGAEgASgNEisKE2NvbnN0cnVjdGlvbl9wb2ludHMYAiAD",
            "KAsyDi54dmlld2VyLlBvaW50Ei8KF2NvbnN0cnVjdGlvbl9wb2ludHNfdXRt",
            "GAMgAygLMg4ueHZpZXdlci5Qb2ludCKIAgoUTGFuZUF0dHJpYnV0ZUNvbnRv",
            "dXISKwoTcmVmZXJlbmNlX3BvaW50X2JldhgBIAEoCzIOLnh2aWV3ZXIuUG9p",
            "bnQSKwoTcmVmZXJlbmNlX3BvaW50X3V0bRgCIAEoCzIOLnh2aWV3ZXIuUG9p",
            "bnQSDQoFd2lkdGgYAyABKAISDgoGaGVpZ2h0GAQgASgCEg4KBmxlbmd0aBgF",
            "IAEoAhIRCgl5YXdfYW5nbGUYBiABKAISKQoRY29udG91cl9wb2ludF9iZXYY",
            "ByADKAsyDi54dmlld2VyLlBvaW50EikKEWNvbnRvdXJfcG9pbnRfdXRtGAgg",
            "AygLMg4ueHZpZXdlci5Qb2ludCL5BQoETGFuZRIPCgdsYW5lX2lkGAEgASgF",
            "EhgKEGxhbmVfcmVsYXRpdmVfaWQYAiABKAUSFgoObGFuZV9nbG9iYWxfaWQY",
            "AyABKAMSFwoPbGFuZV9hdHRyaWJ1dGVzGAQgAygNEj4KF2xhbmVfYXR0cmli",
            "dXRlX2NvbnRvdXJzGAUgAygLMh0ueHZpZXdlci5MYW5lQXR0cmlidXRlQ29u",
            "dG91chIVCg1wYXNzYWJsZV90eXBlGAYgASgNEhYKDnJlbWFpbmluZ190aW1l",
            "GAcgAygFEhQKDHNpZ25hbF9jb2xvchgIIAMoBRIaChJzaWduYWxfaXNfZmxh",
            "c2hpbmcYCSADKAUSKgoSbGFuZV9jZW50ZXJfcG9pbnRzGAogAygLMg4ueHZp",
            "ZXdlci5Qb2ludBIuChZsYW5lX2NlbnRlcl9wb2ludHNfdXRtGAsgAygLMg4u",
            "eHZpZXdlci5Qb2ludBIUCgxsZWZ0X2xpbmVfaWQYDCABKAUSFQoNcmlnaHRf",
            "bGluZV9pZBgNIAEoBRIcChRsYW5lX290aGVyX2F0dHJpYnV0ZRgOIAEoDRIz",
            "Cg1jb25zdHJ1Y3Rpb25zGA8gAygLMhwueHZpZXdlci5Db25zdHJ1Y3Rpb25T",
            "ZWN0aW9uEjEKGWxhbmVfYXR0cmlidXRlX3BvaW50c191dG0YECADKAsyDi54",
            "dmlld2VyLlBvaW50Ei0KFWxhbmVfYXR0cmlidXRlX3BvaW50cxgRIAMoCzIO",
            "Lnh2aWV3ZXIuUG9pbnQSJwoPc3BsaXRfcG9pbnRfdXRtGBIgAygLMg4ueHZp",
            "ZXdlci5Qb2ludBInCg9tZXJnZV9wb2ludF91dG0YEyADKAsyDi54dmlld2Vy",
            "LlBvaW50EicKD3NwbGl0X3BvaW50X2JldhgUIAMoCzIOLnh2aWV3ZXIuUG9p",
            "bnQSJwoPbWVyZ2VfcG9pbnRfYmV2GBUgAygLMg4ueHZpZXdlci5Qb2ludBIS",
            "CgpsYW5lX3dpZHRoGBYgAygCIr8BCghMYW5lTGluZRIPCgdsaW5lX2lkGAEg",
            "ASgFEhEKCXR5cGVfbGlzdBgCIAMoDRISCgppbmRleF9saXN0GAMgAygFEhIK",
            "CmNvbmZpZGVuY2UYBCABKAISIwoLbGluZV9wb2ludHMYBSADKAsyDi54dmll",
            "d2VyLlBvaW50EicKD2xpbmVfcG9pbnRzX3V0bRgGIAMoCzIOLnh2aWV3ZXIu",
            "UG9pbnQSGQoRbGluZV9wb2ludHNfc2NvcmUYByADKAIihAEKCFN0b3BMaW5l",
            "EgwKBHR5cGUYASABKA0SEgoKY29uZmlkZW5jZRgCIAEoAhIoChBzdG9wX2xp",
            "bmVfcG9pbnRzGAMgAygLMg4ueHZpZXdlci5Qb2ludBIsChRzdG9wX2xpbmVf",
            "dXRtX3BvaW50cxgEIAMoCzIOLnh2aWV3ZXIuUG9pbnQijwEKDExhbmVMaW5l",
            "SW5mbxITCgtlZ29fbGFuZV9pZBgBIAEoBRIlCgpsYW5lX2xpbmVzGAIgAygL",
            "MhEueHZpZXdlci5MYW5lTGluZRIcCgVsYW5lcxgDIAMoCzINLnh2aWV3ZXIu",
            "TGFuZRIlCgpzdG9wX2xpbmVzGAQgAygLMhEueHZpZXdlci5TdG9wTGluZSJQ",
            "CglEaW1lbnNpb24SDQoFd2lkdGgYASABKAISDgoGaGVpZ2h0GAIgASgCEg4K",
            "Bmxlbmd0aBgDIAEoAhIJCgF4GAQgAygCEgkKAXkYBSADKAIioQEKD1ByZWRp",
            "Y3Rpb25Qb2ludBIQCghwb3NpdGlvbhgBIAMoAhIQCgh2ZWxvY2l0eRgCIAMo",
            "AhINCgVhY2NlbBgDIAMoAhILCgN5YXcYBCABKAISFAoMcG9zaXRpb25fdXRt",
            "GAUgAygBEhQKDHZlbG9jaXR5X3V0bRgGIAMoAhIRCglhY2NlbF91dG0YByAD",
            "KAISDwoHeWF3X3V0bRgIIAEoAiLJAQoKUHJlZGljdGlvbhIXCg9pc192YWxp",
            "ZF9vYmplY3QYASABKAgSEwoLZnV0dXJlX3RpbWUYAiABKAUSFQoNaW50ZXJ2",
            "YWxfdGltZRgDIAEoAhIvCg1mdXR1cmVfcG9pbnRzGAQgAygLMhgueHZpZXdl",
            "ci5QcmVkaWN0aW9uUG9pbnQSHAoUaW50ZW50aW9uX3ByZWRpY3Rpb24YBSAB",
            "KAUSEgoKY29uZmlkZW5jZRgGIAEoAhITCgtzdGF0dXNfbW9kZRgHIAEoBSIk",
            "CgRUaW1lEgsKA3NlYxgBIAEoBRIPCgduYW5vc2VjGAIgASgNIvMFCghPYmpl",
            "Y3QzRBIRCglvYmplY3RfaWQYASABKAMSEgoKaXNfbW92YWJsZRgCIAEoCBIT",
            "CgtvYmplY3RfdHlwZRgDIAEoBRIYChBjbGFzc19jb25maWRlbmNlGAQgASgC",
            "EhkKEWV4aXN0X3Byb2JhYmlsaXR5GAUgASgCEiUKDnRpbWVfbGFzdF9zZWVu",
            "GAYgASgLMg0ueHZpZXdlci5UaW1lEiQKDXRpbWVfY3JlYXRpb24YByABKAsy",
            "DS54dmlld2VyLlRpbWUSIQoKb2JqZWN0X2FnZRgIIAEoCzINLnh2aWV3ZXIu",
            "VGltZRIVCg10cmFja19xdWFsaXR5GAkgASgCEicKD3JlZmVyZW5jZV9wb2lu",
            "dBgKIAMoCzIOLnh2aWV3ZXIuUG9pbnQSKwoTcmVmZXJlbmNlX3BvaW50X3V0",
            "bRgLIAMoCzIOLnh2aWV3ZXIuUG9pbnQSLAoQb2JqZWN0X2RpbWVuc2lvbhgM",
            "IAEoCzISLnh2aWV3ZXIuRGltZW5zaW9uEg8KB2xhbmVfaWQYDSADKAUSGgoS",
            "bGFuZV9sZWZ0X2Rpc3RhbmNlGA4gAygCEhsKE2xhbmVfcmlnaHRfZGlzdGFu",
            "Y2UYDyADKAISEAoIdmVsb2NpdHkYECADKAISFAoMb2JqZWN0X2FjY2VsGBEg",
            "AygCEg0KBW9tZWdhGBIgAygCEhMKC29tZWdhX2FjY2VsGBMgAygCEhEKCXlh",
            "d19hbmdsZRgUIAEoAhItChBwcmVkaWNpdGlvbl9pbmZvGBUgASgLMhMueHZp",
            "ZXdlci5QcmVkaWN0aW9uEjQKF3ByZWRpY3RfdHJhamVjdG9yeV9saXN0GBYg",
            "AygLMhMueHZpZXdlci5QcmVkaWN0aW9uEjAKDmhpc3RvcnlfcG9pbnRzGBcg",
            "AygLMhgueHZpZXdlci5QcmVkaWN0aW9uUG9pbnQSDwoHcm9hZF9pZBgYIAEo",
            "BRIaChJ0eXBlX21vdGlvbl9mdXNpb24YGSABKAUifwoKT2JqZWN0SW5mbxIg",
            "CgR0aW1lGAEgASgLMhIueHZpZXdlci5UaW1lV29ybGQSJgoLb2JqZWN0X2xp",
            "c3QYAiADKAsyES54dmlld2VyLk9iamVjdDNEEicKC3RpbWVfZnVzaW9uGAMg",
            "ASgLMhIueHZpZXdlci5UaW1lV29ybGQi1QIKDFRyYWZmaWNMaWdodBIKCgJp",
            "ZBgBIAEoBRITCgtzaWduYWxfdHlwZRgCIAEoBRIXCg90eXBlX2NvbmZpZGVu",
            "Y2UYAyABKAISFAoMc2lnbmFsX3NoYXBlGAQgASgFEhgKEHNoYXBlX2NvbmZp",
            "ZGVuY2UYBSABKAISFAoMc2lnbmFsX2NvbG9yGAYgASgFEhgKEGNvbG9yX2Nv",
            "bmZpZGVuY2UYByABKAISDQoFd2lkdGgYCCABKAISDgoGaGVpZ2h0GAkgASgC",
            "Eg0KBWRlcHRoGAogASgCEhMKC29yaWVudGF0aW9uGAsgASgFEgwKBHRpbWUY",
            "DCABKAUSEQoJaXNfbm9ybWFsGA0gASgFEhAKCGlzXzNkYm94GA4gASgIEhMK",
            "C2lzX2ZsYXNoaW5nGA8gASgFEiAKCHBvc2l0aW9uGBAgASgLMg4ueHZpZXdl",
            "ci5Qb2ludCJFChBUcmFmZmljTGlnaHRJbmZvEjEKEnRyYWZmaWNfbGlnaHRf",
            "bGlzdBgBIAMoCzIVLnh2aWV3ZXIuVHJhZmZpY0xpZ2h0Io8BChFPbG1hcFRy",
            "YWZmaWNMaWdodBIaChJ0cmFmZmljX2xpZ2h0X3R5cGUYASABKA0SLAoUdHJh",
            "ZmZpY19saWdodF9wb2ludHMYAiADKAsyDi54dmlld2VyLlBvaW50EjAKGHRy",
            "YWZmaWNfbGlnaHRfcG9pbnRzX3V0bRgDIAMoCzIOLnh2aWV3ZXIuUG9pbnQi",
            "YQoNR3JvdW5kRWxlbWVudBIMCgR0eXBlGAEgASgNEh4KBnBvaW50cxgCIAMo",
            "CzIOLnh2aWV3ZXIuUG9pbnQSIgoKcG9pbnRzX3V0bRgDIAMoCzIOLnh2aWV3",
            "ZXIuUG9pbnQiugIKBFJvYWQSDwoHcm9hZF9pZBgBIAEoBRITCgtlZ29fbGFu",
            "ZV9pZBgCIAEoBRIlCgpsYW5lX2xpbmVzGAMgAygLMhEueHZpZXdlci5MYW5l",
            "TGluZRIcCgVsYW5lcxgEIAMoCzINLnh2aWV3ZXIuTGFuZRIlCgpzdG9wX2xp",
            "bmVzGAUgAygLMhEueHZpZXdlci5TdG9wTGluZRI7ChVjb25zdHJ1Y3Rpb25f",
            "c2VjdGlvbnMYBiADKAsyHC54dmlld2VyLkNvbnN0cnVjdGlvblNlY3Rpb24S",
            "MgoOdHJhZmZpY19saWdodHMYByADKAsyGi54dmlld2VyLk9sbWFwVHJhZmZp",
            "Y0xpZ2h0Ei8KD2dyb3VuZF9lbGVtZW50cxgIIAMoCzIWLnh2aWV3ZXIuR3Jv",
            "dW5kRWxlbWVudCKcAQoNUmVmZXJlbmNlTGluZRIKCgJpZBgBIAEoBRIiCgp3",
            "YXlfcG9pbnRzGAIgAygLMg4ueHZpZXdlci5Qb2ludBImCg53YXlfcG9pbnRz",
            "X3V0bRgDIAMoCzIOLnh2aWV3ZXIuUG9pbnQSFgoOb3JpZ2luX3JvYWRfaWQY",
            "BCABKAUSGwoTZGVzdGluYXRpb25fcm9hZF9pZBgFIAEoBSK9AgoLVmlydHVh",
            "bExhbmUSDwoHbGFuZV9pZBgBIAEoBRIWCg5vcmlnaW5fcm9hZF9pZBgCIAEo",
            "BRIbChNkZXN0aW5hdGlvbl9yb2FkX2lkGAMgASgFEhYKDm9yaWdpbl9sYW5l",
            "X2lkGAQgASgFEhsKE2Rlc3RpbmF0aW9uX2xhbmVfaWQYBSABKAUSFAoMbGVm",
            "dF9saW5lX2lkGAYgASgFEhUKDXJpZ2h0X2xpbmVfaWQYByABKAUSKgoSbGFu",
            "ZV9jZW50ZXJfcG9pbnRzGAggAygLMg4ueHZpZXdlci5Qb2ludBIuChZsYW5l",
            "X2NlbnRlcl9wb2ludHNfdXRtGAkgAygLMg4ueHZpZXdlci5Qb2ludBIWCg5s",
            "YW5lX2F0dHJpYnV0ZRgKIAEoDRISCgpsYW5lX3dpZHRoGAsgAygCIqEBCgtW",
            "aXJ0dWFsTGluZRIPCgdsaW5lX2lkGAEgASgFEiMKC2xpbmVfcG9pbnRzGAIg",
            "AygLMg4ueHZpZXdlci5Qb2ludBInCg9saW5lX3BvaW50c191dG0YAyADKAsy",
            "Di54dmlld2VyLlBvaW50EhYKDm9yaWdpbl9saW5lX2lkGAQgASgFEhsKE2Rl",
            "c3RpbmF0aW9uX2xpbmVfaWQYBSABKAUisgEKDEludGVyc2VjdGlvbhIXCg9p",
            "bnRlcnNlY3Rpb25faWQYASABKAUSKwoNdmlydHVhbF9sYW5lcxgCIAMoCzIU",
            "Lnh2aWV3ZXIuVmlydHVhbExhbmUSKwoNdmlydHVhbF9saW5lcxgDIAMoCzIU",
            "Lnh2aWV3ZXIuVmlydHVhbExpbmUSLwoPcmVmZXJlbmNlX2xpbmVzGAQgAygL",
            "MhYueHZpZXdlci5SZWZlcmVuY2VMaW5lIqABCgRDdXJiEg8KB2N1cmJfaWQY",
            "ASABKAUSEQoJdHlwZV9saXN0GAIgAygNEhIKCmluZGV4X2xpc3QYAyADKAUS",
            "EgoKY29uZmlkZW5jZRgEIAEoAhInCg9jdXJiX3BvaW50c191dG0YBSADKAsy",
            "Di54dmlld2VyLlBvaW50EiMKC2N1cmJfcG9pbnRzGAYgAygLMg4ueHZpZXdl",
            "ci5Qb2ludCKJAQoIUm9hZEluZm8SEwoLZWdvX3JvYWRfaWQYASABKAUSHAoF",
            "cm9hZHMYAiADKAsyDS54dmlld2VyLlJvYWQSLAoNaW50ZXJzZWN0aW9ucxgD",
            "IAMoCzIVLnh2aWV3ZXIuSW50ZXJzZWN0aW9uEhwKBWN1cmJzGAQgAygLMg0u",
            "eHZpZXdlci5DdXJiImUKE1BlcmNlcHRpb25GdXNpb25WVEQSJAoJcm9hZF9p",
            "bmZvGAEgASgLMhEueHZpZXdlci5Sb2FkSW5mbxIoCgtvYmplY3RfaW5mbxgC",
            "IAEoCzITLnh2aWV3ZXIuT2JqZWN0SW5mbyKLAQoQUGVyY2VwdGlvbkZ1c2lv",
            "bhInCghydGtfaW5mbxgBIAEoCzIVLnh2aWV3ZXIuTG9jYWxpemF0aW9uEiQK",
            "CXJvYWRfaW5mbxgCIAEoCzIRLnh2aWV3ZXIuUm9hZEluZm8SKAoLb2JqZWN0",
            "X2luZm8YAyABKAsyEy54dmlld2VyLk9iamVjdEluZm8itQQKCFRyYWNrQm94",
            "EhAKCHRyYWNrX2lkGAEgASgFEhMKC2NsYXNzX2xhYmVsGAIgASgFEhIKCmNv",
            "bmZpZGVuY2UYAyABKAISFQoNdHJhY2tfcXVhbGl0eRgEIAEoAhIlCg50aW1l",
            "X2xhc3Rfc2VlbhgFIAEoCzINLnh2aWV3ZXIuVGltZRIkCg10aW1lX2NyZWF0",
            "aW9uGAYgASgLMg0ueHZpZXdlci5UaW1lEiEKCm9iamVjdF9hZ2UYByABKAsy",
            "DS54dmlld2VyLlRpbWUSCgoCY3gYCCABKAISCgoCY3kYCSABKAISCgoCY3oY",
            "CiABKAISCQoBdxgLIAEoAhIJCgFsGAwgASgCEgkKAWgYDSABKAISCwoDeWF3",
            "GA4gASgCEhAKCHZlbG9jaXR5GA8gAygCEhQKDG9iamVjdF9hY2NlbBgQIAMo",
            "AhINCgVvbWVnYRgRIAMoAhITCgtvbWVnYV9hY2NlbBgSIAMoAhIRCgljeF9n",
            "bG9iYWwYEyABKAISEQoJY3lfZ2xvYmFsGBQgASgCEhEKCWN6X2dsb2JhbBgV",
            "IAEoAhISCgp5YXdfZ2xvYmFsGBYgASgCEhcKD3ZlbG9jaXR5X2dsb2JhbBgX",
            "IAMoAhIbChNvYmplY3RfYWNjZWxfZ2xvYmFsGBggAygCEhQKDG9tZWdhX2ds",
            "b2JhbBgZIAMoAhIaChJvbWVnYV9hY2NlbF9nbG9iYWwYGiADKAISFAoMbW90",
            "aW9uX3N0YXRlGBsgASgFIvABCgxUcmFja0JveExpc3QSIAoEdGltZRgBIAEo",
            "CzISLnh2aWV3ZXIuVGltZVdvcmxkEikKDnRyYWNrX2JveF9saXN0GAIgAygL",
            "MhEueHZpZXdlci5UcmFja0JveBIkCghydGtfdGltZRgDIAEoCzISLnh2aWV3",
            "ZXIuVGltZVdvcmxkEhsKBHBvc2UYBCABKAsyDS54dmlld2VyLlBvc2USJQoI",
            "dmVsb2NpdHkYBSABKAsyEy54dmlld2VyLlR3aXN0QWNjZWwSKQoMYWNjZWxl",
            "cmF0aW9uGAYgASgLMhMueHZpZXdlci5Ud2lzdEFjY2VsIsUBChBUYXJnZXRU",
            "cmFqZWN0b3J5Eg0KBWluZGV4GAEgASgNEgoKAnJ4GAIgASgFEgoKAnJ5GAMg",
            "ASgFEg4KBmhlaWdodBgEIAEoBRIOCgZsZW5ndGgYBSABKAUSDQoFd2lkdGgY",
            "BiABKAUSEwoLY3Jvc3Nfc3BlZWQYByABKAUSFQoNbG9uZ2l0dV9zcGVlZBgI",
            "IAEoBRIQCgh0YXJfdHlwZRgJIAEoDRIQCghvYnN0YWNsZRgKIAEoDRILCgN5",
            "YXcYCyABKAUi5gYKClBlcmNlcHRpb24SIgoKZnJlZV9zcGFjZRgBIAMoCzIO",
            "Lnh2aWV3ZXIuUG9pbnQSJwoPcGVyY19mcmVlX3NwYWNlGAIgAygLMg4ueHZp",
            "ZXdlci5Qb2ludBIwChFwYXJraW5nX3Nsb3RzX2FsbBgDIAEoCzIVLnh2aWV3",
            "ZXIuUGFya2luZ1Nsb3RzEjUKEm9ic3RhY2xlX2JvdW5kYXJ5cxgEIAMoCzIZ",
            "Lnh2aWV3ZXIuT2JzdGFjbGVCb3VuZGFyeRI6ChdwZXJjX29ic3RhY2xlX2Jv",
            "dW5kYXJ5cxgFIAMoCzIZLnh2aWV3ZXIuT2JzdGFjbGVCb3VuZGFyeRIvCgxm",
            "dXNpb25fcGlsb3QYBiABKAsyGS54dmlld2VyLlBlcmNlcHRpb25GdXNpb24S",
            "MwoQZnVzaW9uX3BpbG90X3Z0ZBgHIAEoCzIZLnh2aWV3ZXIuUGVyY2VwdGlv",
            "bkZ1c2lvbhI1ChJ0cmFmZmljX2xpZ2h0X2luZm8YCCABKAsyGS54dmlld2Vy",
            "LlRyYWZmaWNMaWdodEluZm8SOAoZbGFuZV9saW5lX2luZm9fbWFwX2VuZ2lu",
            "ZRgJIAEoCzIVLnh2aWV3ZXIuTGFuZUxpbmVJbmZvEjEKEmxhbmVfbGluZV9p",
            "bmZvX2htaRgKIAEoCzIVLnh2aWV3ZXIuTGFuZUxpbmVJbmZvEjMKFGxhbmVf",
            "bGluZV9pbmZvX2hkbWFwGAsgASgLMhUueHZpZXdlci5MYW5lTGluZUluZm8S",
            "LQoObGFuZV9saW5lX2luZm8YDCABKAsyFS54dmlld2VyLkxhbmVMaW5lSW5m",
            "bxIuChNsYW5lX2xpbmVfcm9hZF9pbmZvGA0gASgLMhEueHZpZXdlci5Sb2Fk",
            "SW5mbxI0ChVhcGFfcGVyY2VwdGlvbl9vYmplY3QYDiABKAsyFS54dmlld2Vy",
            "LlRyYWNrQm94TGlzdBI1ChJmdXNpb25fcGlsb3RfaGRtYXAYDyABKAsyGS54",
            "dmlld2VyLlBlcmNlcHRpb25GdXNpb24SHwoXY29sbGlzaW9uX2Rpc3RhbmNl",
            "X2luZm8YECADKAESOgoXcmFkYXJfdGFyZ2V0X3RyYWplY3RvcnkYESADKAsy",
            "GS54dmlld2VyLlRhcmdldFRyYWplY3Rvcnk="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Xviewer.BasicsReflection.Descriptor, global::Xviewer.LocalizationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.ParkingSpaceObstacle), global::Xviewer.ParkingSpaceObstacle.Parser, new[]{ "ObstaclePoint", "Type" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.ParkingSpace), global::Xviewer.ParkingSpace.Parser, new[]{ "Id", "Ptype", "TypeConfidence", "ParkingSlotPoint", "PointCoordinateAttribute", "Valid", "Src", "Direction", "HasLimitingStopper", "LimitingStopper", "HasParkingLock", "ParkingLock" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.ParkingSlots), global::Xviewer.ParkingSlots.Parser, new[]{ "ParkingSlots_", "ParkingSlotsNum" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.ObstacleBoundary), global::Xviewer.ObstacleBoundary.Parser, new[]{ "Boundary", "Box", "Type" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.ConstructionSection), global::Xviewer.ConstructionSection.Parser, new[]{ "Type", "ConstructionPoints", "ConstructionPointsUtm" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.LaneAttributeContour), global::Xviewer.LaneAttributeContour.Parser, new[]{ "ReferencePointBev", "ReferencePointUtm", "Width", "Height", "Length", "YawAngle", "ContourPointBev", "ContourPointUtm" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.Lane), global::Xviewer.Lane.Parser, new[]{ "LaneId", "LaneRelativeId", "LaneGlobalId", "LaneAttributes", "LaneAttributeContours", "PassableType", "RemainingTime", "SignalColor", "SignalIsFlashing", "LaneCenterPoints", "LaneCenterPointsUtm", "LeftLineId", "RightLineId", "LaneOtherAttribute", "Constructions", "LaneAttributePointsUtm", "LaneAttributePoints", "SplitPointUtm", "MergePointUtm", "SplitPointBev", "MergePointBev", "LaneWidth" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.LaneLine), global::Xviewer.LaneLine.Parser, new[]{ "LineId", "TypeList", "IndexList", "Confidence", "LinePoints", "LinePointsUtm", "LinePointsScore" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.StopLine), global::Xviewer.StopLine.Parser, new[]{ "Type", "Confidence", "StopLinePoints", "StopLineUtmPoints" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.LaneLineInfo), global::Xviewer.LaneLineInfo.Parser, new[]{ "EgoLaneId", "LaneLines", "Lanes", "StopLines" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.Dimension), global::Xviewer.Dimension.Parser, new[]{ "Width", "Height", "Length", "X", "Y" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.PredictionPoint), global::Xviewer.PredictionPoint.Parser, new[]{ "Position", "Velocity", "Accel", "Yaw", "PositionUtm", "VelocityUtm", "AccelUtm", "YawUtm" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.Prediction), global::Xviewer.Prediction.Parser, new[]{ "IsValidObject", "FutureTime", "IntervalTime", "FuturePoints", "IntentionPrediction", "Confidence", "StatusMode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.Time), global::Xviewer.Time.Parser, new[]{ "Sec", "Nanosec" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.Object3D), global::Xviewer.Object3D.Parser, new[]{ "ObjectId", "IsMovable", "ObjectType", "ClassConfidence", "ExistProbability", "TimeLastSeen", "TimeCreation", "ObjectAge", "TrackQuality", "ReferencePoint", "ReferencePointUtm", "ObjectDimension", "LaneId", "LaneLeftDistance", "LaneRightDistance", "Velocity", "ObjectAccel", "Omega", "OmegaAccel", "YawAngle", "PredicitionInfo", "PredictTrajectoryList", "HistoryPoints", "RoadId", "TypeMotionFusion" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.ObjectInfo), global::Xviewer.ObjectInfo.Parser, new[]{ "Time", "ObjectList", "TimeFusion" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.TrafficLight), global::Xviewer.TrafficLight.Parser, new[]{ "Id", "SignalType", "TypeConfidence", "SignalShape", "ShapeConfidence", "SignalColor", "ColorConfidence", "Width", "Height", "Depth", "Orientation", "Time", "IsNormal", "Is3Dbox", "IsFlashing", "Position" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.TrafficLightInfo), global::Xviewer.TrafficLightInfo.Parser, new[]{ "TrafficLightList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.OlmapTrafficLight), global::Xviewer.OlmapTrafficLight.Parser, new[]{ "TrafficLightType", "TrafficLightPoints", "TrafficLightPointsUtm" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.GroundElement), global::Xviewer.GroundElement.Parser, new[]{ "Type", "Points", "PointsUtm" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.Road), global::Xviewer.Road.Parser, new[]{ "RoadId", "EgoLaneId", "LaneLines", "Lanes", "StopLines", "ConstructionSections", "TrafficLights", "GroundElements" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.ReferenceLine), global::Xviewer.ReferenceLine.Parser, new[]{ "Id", "WayPoints", "WayPointsUtm", "OriginRoadId", "DestinationRoadId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.VirtualLane), global::Xviewer.VirtualLane.Parser, new[]{ "LaneId", "OriginRoadId", "DestinationRoadId", "OriginLaneId", "DestinationLaneId", "LeftLineId", "RightLineId", "LaneCenterPoints", "LaneCenterPointsUtm", "LaneAttribute", "LaneWidth" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.VirtualLine), global::Xviewer.VirtualLine.Parser, new[]{ "LineId", "LinePoints", "LinePointsUtm", "OriginLineId", "DestinationLineId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.Intersection), global::Xviewer.Intersection.Parser, new[]{ "IntersectionId", "VirtualLanes", "VirtualLines", "ReferenceLines" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.Curb), global::Xviewer.Curb.Parser, new[]{ "CurbId", "TypeList", "IndexList", "Confidence", "CurbPointsUtm", "CurbPoints" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.RoadInfo), global::Xviewer.RoadInfo.Parser, new[]{ "EgoRoadId", "Roads", "Intersections", "Curbs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.PerceptionFusionVTD), global::Xviewer.PerceptionFusionVTD.Parser, new[]{ "RoadInfo", "ObjectInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.PerceptionFusion), global::Xviewer.PerceptionFusion.Parser, new[]{ "RtkInfo", "RoadInfo", "ObjectInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.TrackBox), global::Xviewer.TrackBox.Parser, new[]{ "TrackId", "ClassLabel", "Confidence", "TrackQuality", "TimeLastSeen", "TimeCreation", "ObjectAge", "Cx", "Cy", "Cz", "W", "L", "H", "Yaw", "Velocity", "ObjectAccel", "Omega", "OmegaAccel", "CxGlobal", "CyGlobal", "CzGlobal", "YawGlobal", "VelocityGlobal", "ObjectAccelGlobal", "OmegaGlobal", "OmegaAccelGlobal", "MotionState" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.TrackBoxList), global::Xviewer.TrackBoxList.Parser, new[]{ "Time", "TrackBoxList_", "RtkTime", "Pose", "Velocity", "Acceleration" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.TargetTrajectory), global::Xviewer.TargetTrajectory.Parser, new[]{ "Index", "Rx", "Ry", "Height", "Length", "Width", "CrossSpeed", "LongituSpeed", "TarType", "Obstacle", "Yaw" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.Perception), global::Xviewer.Perception.Parser, new[]{ "FreeSpace", "PercFreeSpace", "ParkingSlotsAll", "ObstacleBoundarys", "PercObstacleBoundarys", "FusionPilot", "FusionPilotVtd", "TrafficLightInfo", "LaneLineInfoMapEngine", "LaneLineInfoHmi", "LaneLineInfoHdmap", "LaneLineInfo", "LaneLineRoadInfo", "ApaPerceptionObject", "FusionPilotHdmap", "CollisionDistanceInfo", "RadarTargetTrajectory" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// ----------------  感知融合消息结构 --------------------//
  /// </summary>
  public sealed partial class ParkingSpaceObstacle : pb::IMessage<ParkingSpaceObstacle> {
    private static readonly pb::MessageParser<ParkingSpaceObstacle> _parser = new pb::MessageParser<ParkingSpaceObstacle>(() => new ParkingSpaceObstacle());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParkingSpaceObstacle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PerceptionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParkingSpaceObstacle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParkingSpaceObstacle(ParkingSpaceObstacle other) : this() {
      _hasBits0 = other._hasBits0;
      obstaclePoint_ = other.obstaclePoint_.Clone();
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParkingSpaceObstacle Clone() {
      return new ParkingSpaceObstacle(this);
    }

    /// <summary>Field number for the "obstacle_point" field.</summary>
    public const int ObstaclePointFieldNumber = 1;
    private static readonly pb::FieldCodec<double> _repeated_obstaclePoint_codec
        = pb::FieldCodec.ForDouble(9);
    private readonly pbc::RepeatedField<double> obstaclePoint_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// 障碍物角点坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> ObstaclePoint {
      get { return obstaclePoint_; }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private readonly static int TypeDefaultValue = 0;

    private int type_;
    /// <summary>
    /// 障碍物类型， 0-限位器，1-地锁（开）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParkingSpaceObstacle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParkingSpaceObstacle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!obstaclePoint_.Equals(other.obstaclePoint_)) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= obstaclePoint_.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      obstaclePoint_.WriteTo(output, _repeated_obstaclePoint_codec);
      if (HasType) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += obstaclePoint_.CalculateSize(_repeated_obstaclePoint_codec);
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParkingSpaceObstacle other) {
      if (other == null) {
        return;
      }
      obstaclePoint_.Add(other.obstaclePoint_);
      if (other.HasType) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 9: {
            obstaclePoint_.AddEntriesFrom(input, _repeated_obstaclePoint_codec);
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ParkingSpace : pb::IMessage<ParkingSpace> {
    private static readonly pb::MessageParser<ParkingSpace> _parser = new pb::MessageParser<ParkingSpace>(() => new ParkingSpace());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParkingSpace> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PerceptionReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParkingSpace() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParkingSpace(ParkingSpace other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      ptype_ = other.ptype_;
      typeConfidence_ = other.typeConfidence_;
      parkingSlotPoint_ = other.parkingSlotPoint_.Clone();
      pointCoordinateAttribute_ = other.pointCoordinateAttribute_;
      valid_ = other.valid_;
      src_ = other.src_;
      direction_ = other.direction_;
      hasLimitingStopper_ = other.hasLimitingStopper_;
      limitingStopper_ = other.limitingStopper_.Clone();
      hasParkingLock_ = other.hasParkingLock_;
      parkingLock_ = other.parkingLock_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParkingSpace Clone() {
      return new ParkingSpace(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static long IdDefaultValue = 0L;

    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "ptype" field.</summary>
    public const int PtypeFieldNumber = 2;
    private readonly static int PtypeDefaultValue = 0;

    private int ptype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ptype {
      get { if ((_hasBits0 & 2) != 0) { return ptype_; } else { return PtypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        ptype_ = value;
      }
    }
    /// <summary>Gets whether the "ptype" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPtype {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "ptype" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPtype() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "type_confidence" field.</summary>
    public const int TypeConfidenceFieldNumber = 3;
    private readonly static double TypeConfidenceDefaultValue = 0D;

    private double typeConfidence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TypeConfidence {
      get { if ((_hasBits0 & 4) != 0) { return typeConfidence_; } else { return TypeConfidenceDefaultValue; } }
      set {
        _hasBits0 |= 4;
        typeConfidence_ = value;
      }
    }
    /// <summary>Gets whether the "type_confidence" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTypeConfidence {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "type_confidence" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTypeConfidence() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "parking_slot_point" field.</summary>
    public const int ParkingSlotPointFieldNumber = 4;
    private static readonly pb::FieldCodec<double> _repeated_parkingSlotPoint_codec
        = pb::FieldCodec.ForDouble(33);
    private readonly pbc::RepeatedField<double> parkingSlotPoint_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> ParkingSlotPoint {
      get { return parkingSlotPoint_; }
    }

    /// <summary>Field number for the "point_coordinate_attribute" field.</summary>
    public const int PointCoordinateAttributeFieldNumber = 5;
    private readonly static int PointCoordinateAttributeDefaultValue = 0;

    private int pointCoordinateAttribute_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PointCoordinateAttribute {
      get { if ((_hasBits0 & 8) != 0) { return pointCoordinateAttribute_; } else { return PointCoordinateAttributeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        pointCoordinateAttribute_ = value;
      }
    }
    /// <summary>Gets whether the "point_coordinate_attribute" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPointCoordinateAttribute {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "point_coordinate_attribute" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPointCoordinateAttribute() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "valid" field.</summary>
    public const int ValidFieldNumber = 6;
    private readonly static bool ValidDefaultValue = false;

    private bool valid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Valid {
      get { if ((_hasBits0 & 16) != 0) { return valid_; } else { return ValidDefaultValue; } }
      set {
        _hasBits0 |= 16;
        valid_ = value;
      }
    }
    /// <summary>Gets whether the "valid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValid {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "valid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValid() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "src" field.</summary>
    public const int SrcFieldNumber = 7;
    private readonly static int SrcDefaultValue = 0;

    private int src_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Src {
      get { if ((_hasBits0 & 32) != 0) { return src_; } else { return SrcDefaultValue; } }
      set {
        _hasBits0 |= 32;
        src_ = value;
      }
    }
    /// <summary>Gets whether the "src" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSrc {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "src" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSrc() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 8;
    private readonly static double DirectionDefaultValue = 0D;

    private double direction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Direction {
      get { if ((_hasBits0 & 64) != 0) { return direction_; } else { return DirectionDefaultValue; } }
      set {
        _hasBits0 |= 64;
        direction_ = value;
      }
    }
    /// <summary>Gets whether the "direction" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDirection {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "direction" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDirection() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "has_limiting_stopper" field.</summary>
    public const int HasLimitingStopperFieldNumber = 9;
    private readonly static bool HasLimitingStopperDefaultValue = false;

    private bool hasLimitingStopper_;
    /// <summary>
    /// 限位器
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLimitingStopper {
      get { if ((_hasBits0 & 128) != 0) { return hasLimitingStopper_; } else { return HasLimitingStopperDefaultValue; } }
      set {
        _hasBits0 |= 128;
        hasLimitingStopper_ = value;
      }
    }
    /// <summary>Gets whether the "has_limiting_stopper" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHasLimitingStopper {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "has_limiting_stopper" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHasLimitingStopper() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "limiting_stopper" field.</summary>
    public const int LimitingStopperFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Xviewer.ParkingSpaceObstacle> _repeated_limitingStopper_codec
        = pb::FieldCodec.ForMessage(82, global::Xviewer.ParkingSpaceObstacle.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.ParkingSpaceObstacle> limitingStopper_ = new pbc::RepeatedField<global::Xviewer.ParkingSpaceObstacle>();
    /// <summary>
    /// MaxLimitingStopper = 2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.ParkingSpaceObstacle> LimitingStopper {
      get { return limitingStopper_; }
    }

    /// <summary>Field number for the "has_parking_lock" field.</summary>
    public const int HasParkingLockFieldNumber = 11;
    private readonly static bool HasParkingLockDefaultValue = false;

    private bool hasParkingLock_;
    /// <summary>
    /// 地锁
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasParkingLock {
      get { if ((_hasBits0 & 256) != 0) { return hasParkingLock_; } else { return HasParkingLockDefaultValue; } }
      set {
        _hasBits0 |= 256;
        hasParkingLock_ = value;
      }
    }
    /// <summary>Gets whether the "has_parking_lock" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHasParkingLock {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "has_parking_lock" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHasParkingLock() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "parking_lock" field.</summary>
    public const int ParkingLockFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Xviewer.ParkingSpaceObstacle> _repeated_parkingLock_codec
        = pb::FieldCodec.ForMessage(98, global::Xviewer.ParkingSpaceObstacle.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.ParkingSpaceObstacle> parkingLock_ = new pbc::RepeatedField<global::Xviewer.ParkingSpaceObstacle>();
    /// <summary>
    /// MaxParkingLock = 1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.ParkingSpaceObstacle> ParkingLock {
      get { return parkingLock_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParkingSpace);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParkingSpace other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Ptype != other.Ptype) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TypeConfidence, other.TypeConfidence)) return false;
      if(!parkingSlotPoint_.Equals(other.parkingSlotPoint_)) return false;
      if (PointCoordinateAttribute != other.PointCoordinateAttribute) return false;
      if (Valid != other.Valid) return false;
      if (Src != other.Src) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Direction, other.Direction)) return false;
      if (HasLimitingStopper != other.HasLimitingStopper) return false;
      if(!limitingStopper_.Equals(other.limitingStopper_)) return false;
      if (HasParkingLock != other.HasParkingLock) return false;
      if(!parkingLock_.Equals(other.parkingLock_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasPtype) hash ^= Ptype.GetHashCode();
      if (HasTypeConfidence) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TypeConfidence);
      hash ^= parkingSlotPoint_.GetHashCode();
      if (HasPointCoordinateAttribute) hash ^= PointCoordinateAttribute.GetHashCode();
      if (HasValid) hash ^= Valid.GetHashCode();
      if (HasSrc) hash ^= Src.GetHashCode();
      if (HasDirection) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Direction);
      if (HasHasLimitingStopper) hash ^= HasLimitingStopper.GetHashCode();
      hash ^= limitingStopper_.GetHashCode();
      if (HasHasParkingLock) hash ^= HasParkingLock.GetHashCode();
      hash ^= parkingLock_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (HasPtype) {
        output.WriteRawTag(16);
        output.WriteInt32(Ptype);
      }
      if (HasTypeConfidence) {
        output.WriteRawTag(25);
        output.WriteDouble(TypeConfidence);
      }
      parkingSlotPoint_.WriteTo(output, _repeated_parkingSlotPoint_codec);
      if (HasPointCoordinateAttribute) {
        output.WriteRawTag(40);
        output.WriteInt32(PointCoordinateAttribute);
      }
      if (HasValid) {
        output.WriteRawTag(48);
        output.WriteBool(Valid);
      }
      if (HasSrc) {
        output.WriteRawTag(56);
        output.WriteInt32(Src);
      }
      if (HasDirection) {
        output.WriteRawTag(65);
        output.WriteDouble(Direction);
      }
      if (HasHasLimitingStopper) {
        output.WriteRawTag(72);
        output.WriteBool(HasLimitingStopper);
      }
      limitingStopper_.WriteTo(output, _repeated_limitingStopper_codec);
      if (HasHasParkingLock) {
        output.WriteRawTag(88);
        output.WriteBool(HasParkingLock);
      }
      parkingLock_.WriteTo(output, _repeated_parkingLock_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (HasPtype) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ptype);
      }
      if (HasTypeConfidence) {
        size += 1 + 8;
      }
      size += parkingSlotPoint_.CalculateSize(_repeated_parkingSlotPoint_codec);
      if (HasPointCoordinateAttribute) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PointCoordinateAttribute);
      }
      if (HasValid) {
        size += 1 + 1;
      }
      if (HasSrc) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Src);
      }
      if (HasDirection) {
        size += 1 + 8;
      }
      if (HasHasLimitingStopper) {
        size += 1 + 1;
      }
      size += limitingStopper_.CalculateSize(_repeated_limitingStopper_codec);
      if (HasHasParkingLock) {
        size += 1 + 1;
      }
      size += parkingLock_.CalculateSize(_repeated_parkingLock_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParkingSpace other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasPtype) {
        Ptype = other.Ptype;
      }
      if (other.HasTypeConfidence) {
        TypeConfidence = other.TypeConfidence;
      }
      parkingSlotPoint_.Add(other.parkingSlotPoint_);
      if (other.HasPointCoordinateAttribute) {
        PointCoordinateAttribute = other.PointCoordinateAttribute;
      }
      if (other.HasValid) {
        Valid = other.Valid;
      }
      if (other.HasSrc) {
        Src = other.Src;
      }
      if (other.HasDirection) {
        Direction = other.Direction;
      }
      if (other.HasHasLimitingStopper) {
        HasLimitingStopper = other.HasLimitingStopper;
      }
      limitingStopper_.Add(other.limitingStopper_);
      if (other.HasHasParkingLock) {
        HasParkingLock = other.HasParkingLock;
      }
      parkingLock_.Add(other.parkingLock_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            Ptype = input.ReadInt32();
            break;
          }
          case 25: {
            TypeConfidence = input.ReadDouble();
            break;
          }
          case 34:
          case 33: {
            parkingSlotPoint_.AddEntriesFrom(input, _repeated_parkingSlotPoint_codec);
            break;
          }
          case 40: {
            PointCoordinateAttribute = input.ReadInt32();
            break;
          }
          case 48: {
            Valid = input.ReadBool();
            break;
          }
          case 56: {
            Src = input.ReadInt32();
            break;
          }
          case 65: {
            Direction = input.ReadDouble();
            break;
          }
          case 72: {
            HasLimitingStopper = input.ReadBool();
            break;
          }
          case 82: {
            limitingStopper_.AddEntriesFrom(input, _repeated_limitingStopper_codec);
            break;
          }
          case 88: {
            HasParkingLock = input.ReadBool();
            break;
          }
          case 98: {
            parkingLock_.AddEntriesFrom(input, _repeated_parkingLock_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ParkingSlots : pb::IMessage<ParkingSlots> {
    private static readonly pb::MessageParser<ParkingSlots> _parser = new pb::MessageParser<ParkingSlots>(() => new ParkingSlots());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParkingSlots> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PerceptionReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParkingSlots() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParkingSlots(ParkingSlots other) : this() {
      _hasBits0 = other._hasBits0;
      parkingSlots_ = other.parkingSlots_.Clone();
      parkingSlotsNum_ = other.parkingSlotsNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParkingSlots Clone() {
      return new ParkingSlots(this);
    }

    /// <summary>Field number for the "parking_slots" field.</summary>
    public const int ParkingSlots_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::Xviewer.ParkingSpace> _repeated_parkingSlots_codec
        = pb::FieldCodec.ForMessage(10, global::Xviewer.ParkingSpace.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.ParkingSpace> parkingSlots_ = new pbc::RepeatedField<global::Xviewer.ParkingSpace>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.ParkingSpace> ParkingSlots_ {
      get { return parkingSlots_; }
    }

    /// <summary>Field number for the "parking_slots_num" field.</summary>
    public const int ParkingSlotsNumFieldNumber = 2;
    private readonly static int ParkingSlotsNumDefaultValue = 0;

    private int parkingSlotsNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ParkingSlotsNum {
      get { if ((_hasBits0 & 1) != 0) { return parkingSlotsNum_; } else { return ParkingSlotsNumDefaultValue; } }
      set {
        _hasBits0 |= 1;
        parkingSlotsNum_ = value;
      }
    }
    /// <summary>Gets whether the "parking_slots_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasParkingSlotsNum {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "parking_slots_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearParkingSlotsNum() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParkingSlots);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParkingSlots other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!parkingSlots_.Equals(other.parkingSlots_)) return false;
      if (ParkingSlotsNum != other.ParkingSlotsNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= parkingSlots_.GetHashCode();
      if (HasParkingSlotsNum) hash ^= ParkingSlotsNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      parkingSlots_.WriteTo(output, _repeated_parkingSlots_codec);
      if (HasParkingSlotsNum) {
        output.WriteRawTag(16);
        output.WriteInt32(ParkingSlotsNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += parkingSlots_.CalculateSize(_repeated_parkingSlots_codec);
      if (HasParkingSlotsNum) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParkingSlotsNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParkingSlots other) {
      if (other == null) {
        return;
      }
      parkingSlots_.Add(other.parkingSlots_);
      if (other.HasParkingSlotsNum) {
        ParkingSlotsNum = other.ParkingSlotsNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            parkingSlots_.AddEntriesFrom(input, _repeated_parkingSlots_codec);
            break;
          }
          case 16: {
            ParkingSlotsNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObstacleBoundary : pb::IMessage<ObstacleBoundary> {
    private static readonly pb::MessageParser<ObstacleBoundary> _parser = new pb::MessageParser<ObstacleBoundary>(() => new ObstacleBoundary());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObstacleBoundary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PerceptionReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObstacleBoundary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObstacleBoundary(ObstacleBoundary other) : this() {
      _hasBits0 = other._hasBits0;
      boundary_ = other.boundary_.Clone();
      box_ = other.box_.Clone();
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObstacleBoundary Clone() {
      return new ObstacleBoundary(this);
    }

    /// <summary>Field number for the "boundary" field.</summary>
    public const int BoundaryFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_boundary_codec
        = pb::FieldCodec.ForMessage(10, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> boundary_ = new pbc::RepeatedField<global::Xviewer.Point>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> Boundary {
      get { return boundary_; }
    }

    /// <summary>Field number for the "box" field.</summary>
    public const int BoxFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_box_codec
        = pb::FieldCodec.ForMessage(18, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> box_ = new pbc::RepeatedField<global::Xviewer.Point>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> Box {
      get { return box_; }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private readonly static int TypeDefaultValue = 0;

    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObstacleBoundary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObstacleBoundary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!boundary_.Equals(other.boundary_)) return false;
      if(!box_.Equals(other.box_)) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= boundary_.GetHashCode();
      hash ^= box_.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      boundary_.WriteTo(output, _repeated_boundary_codec);
      box_.WriteTo(output, _repeated_box_codec);
      if (HasType) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += boundary_.CalculateSize(_repeated_boundary_codec);
      size += box_.CalculateSize(_repeated_box_codec);
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObstacleBoundary other) {
      if (other == null) {
        return;
      }
      boundary_.Add(other.boundary_);
      box_.Add(other.box_);
      if (other.HasType) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            boundary_.AddEntriesFrom(input, _repeated_boundary_codec);
            break;
          }
          case 18: {
            box_.AddEntriesFrom(input, _repeated_box_codec);
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConstructionSection : pb::IMessage<ConstructionSection> {
    private static readonly pb::MessageParser<ConstructionSection> _parser = new pb::MessageParser<ConstructionSection>(() => new ConstructionSection());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConstructionSection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PerceptionReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConstructionSection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConstructionSection(ConstructionSection other) : this() {
      _hasBits0 = other._hasBits0;
      type_ = other.type_;
      constructionPoints_ = other.constructionPoints_.Clone();
      constructionPointsUtm_ = other.constructionPointsUtm_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConstructionSection Clone() {
      return new ConstructionSection(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static uint TypeDefaultValue = 0;

    private uint type_;
    /// <summary>
    /// 施工类型 0：无施工 1：临时施工 2：短期施工 3：长期施工
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "construction_points" field.</summary>
    public const int ConstructionPointsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_constructionPoints_codec
        = pb::FieldCodec.ForMessage(18, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> constructionPoints_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// 施工地点,第一个点位起始位置，第二个点为结束位置，坐标在自车坐标系下
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> ConstructionPoints {
      get { return constructionPoints_; }
    }

    /// <summary>Field number for the "construction_points_utm" field.</summary>
    public const int ConstructionPointsUtmFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_constructionPointsUtm_codec
        = pb::FieldCodec.ForMessage(26, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> constructionPointsUtm_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// 施工地点,第一个点位起始位置，第二个点为结束位置，坐标在utm坐标系下
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> ConstructionPointsUtm {
      get { return constructionPointsUtm_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConstructionSection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConstructionSection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if(!constructionPoints_.Equals(other.constructionPoints_)) return false;
      if(!constructionPointsUtm_.Equals(other.constructionPointsUtm_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      hash ^= constructionPoints_.GetHashCode();
      hash ^= constructionPointsUtm_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasType) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      constructionPoints_.WriteTo(output, _repeated_constructionPoints_codec);
      constructionPointsUtm_.WriteTo(output, _repeated_constructionPointsUtm_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      size += constructionPoints_.CalculateSize(_repeated_constructionPoints_codec);
      size += constructionPointsUtm_.CalculateSize(_repeated_constructionPointsUtm_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConstructionSection other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      constructionPoints_.Add(other.constructionPoints_);
      constructionPointsUtm_.Add(other.constructionPointsUtm_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 18: {
            constructionPoints_.AddEntriesFrom(input, _repeated_constructionPoints_codec);
            break;
          }
          case 26: {
            constructionPointsUtm_.AddEntriesFrom(input, _repeated_constructionPointsUtm_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LaneAttributeContour : pb::IMessage<LaneAttributeContour> {
    private static readonly pb::MessageParser<LaneAttributeContour> _parser = new pb::MessageParser<LaneAttributeContour>(() => new LaneAttributeContour());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LaneAttributeContour> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PerceptionReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneAttributeContour() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneAttributeContour(LaneAttributeContour other) : this() {
      _hasBits0 = other._hasBits0;
      referencePointBev_ = other.referencePointBev_ != null ? other.referencePointBev_.Clone() : null;
      referencePointUtm_ = other.referencePointUtm_ != null ? other.referencePointUtm_.Clone() : null;
      width_ = other.width_;
      height_ = other.height_;
      length_ = other.length_;
      yawAngle_ = other.yawAngle_;
      contourPointBev_ = other.contourPointBev_.Clone();
      contourPointUtm_ = other.contourPointUtm_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneAttributeContour Clone() {
      return new LaneAttributeContour(this);
    }

    /// <summary>Field number for the "reference_point_bev" field.</summary>
    public const int ReferencePointBevFieldNumber = 1;
    private global::Xviewer.Point referencePointBev_;
    /// <summary>
    ///	导流属性box的中心点，bev坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Point ReferencePointBev {
      get { return referencePointBev_; }
      set {
        referencePointBev_ = value;
      }
    }

    /// <summary>Field number for the "reference_point_utm" field.</summary>
    public const int ReferencePointUtmFieldNumber = 2;
    private global::Xviewer.Point referencePointUtm_;
    /// <summary>
    /// 导流属性box的中心点，utm坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Point ReferencePointUtm {
      get { return referencePointUtm_; }
      set {
        referencePointUtm_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 3;
    private readonly static float WidthDefaultValue = 0F;

    private float width_;
    /// <summary>
    /// 目标几何尺寸，宽，高，长
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Width {
      get { if ((_hasBits0 & 1) != 0) { return width_; } else { return WidthDefaultValue; } }
      set {
        _hasBits0 |= 1;
        width_ = value;
      }
    }
    /// <summary>Gets whether the "width" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWidth {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "width" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWidth() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 4;
    private readonly static float HeightDefaultValue = 0F;

    private float height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Height {
      get { if ((_hasBits0 & 2) != 0) { return height_; } else { return HeightDefaultValue; } }
      set {
        _hasBits0 |= 2;
        height_ = value;
      }
    }
    /// <summary>Gets whether the "height" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeight {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "height" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeight() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 5;
    private readonly static float LengthDefaultValue = 0F;

    private float length_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Length {
      get { if ((_hasBits0 & 4) != 0) { return length_; } else { return LengthDefaultValue; } }
      set {
        _hasBits0 |= 4;
        length_ = value;
      }
    }
    /// <summary>Gets whether the "length" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLength {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "length" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLength() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "yaw_angle" field.</summary>
    public const int YawAngleFieldNumber = 6;
    private readonly static float YawAngleDefaultValue = 0F;

    private float yawAngle_;
    /// <summary>
    /// box的偏航角
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float YawAngle {
      get { if ((_hasBits0 & 8) != 0) { return yawAngle_; } else { return YawAngleDefaultValue; } }
      set {
        _hasBits0 |= 8;
        yawAngle_ = value;
      }
    }
    /// <summary>Gets whether the "yaw_angle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasYawAngle {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "yaw_angle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearYawAngle() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "contour_point_bev" field.</summary>
    public const int ContourPointBevFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_contourPointBev_codec
        = pb::FieldCodec.ForMessage(58, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> contourPointBev_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    ///	轮廓点_bev坐标（为后续分割预留接口）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> ContourPointBev {
      get { return contourPointBev_; }
    }

    /// <summary>Field number for the "contour_point_utm" field.</summary>
    public const int ContourPointUtmFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_contourPointUtm_codec
        = pb::FieldCodec.ForMessage(66, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> contourPointUtm_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// 轮廓点_utm坐标（为后续分割预留接口)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> ContourPointUtm {
      get { return contourPointUtm_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LaneAttributeContour);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LaneAttributeContour other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ReferencePointBev, other.ReferencePointBev)) return false;
      if (!object.Equals(ReferencePointUtm, other.ReferencePointUtm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Width, other.Width)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Height, other.Height)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Length, other.Length)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(YawAngle, other.YawAngle)) return false;
      if(!contourPointBev_.Equals(other.contourPointBev_)) return false;
      if(!contourPointUtm_.Equals(other.contourPointUtm_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (referencePointBev_ != null) hash ^= ReferencePointBev.GetHashCode();
      if (referencePointUtm_ != null) hash ^= ReferencePointUtm.GetHashCode();
      if (HasWidth) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Width);
      if (HasHeight) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Height);
      if (HasLength) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Length);
      if (HasYawAngle) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(YawAngle);
      hash ^= contourPointBev_.GetHashCode();
      hash ^= contourPointUtm_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (referencePointBev_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ReferencePointBev);
      }
      if (referencePointUtm_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ReferencePointUtm);
      }
      if (HasWidth) {
        output.WriteRawTag(29);
        output.WriteFloat(Width);
      }
      if (HasHeight) {
        output.WriteRawTag(37);
        output.WriteFloat(Height);
      }
      if (HasLength) {
        output.WriteRawTag(45);
        output.WriteFloat(Length);
      }
      if (HasYawAngle) {
        output.WriteRawTag(53);
        output.WriteFloat(YawAngle);
      }
      contourPointBev_.WriteTo(output, _repeated_contourPointBev_codec);
      contourPointUtm_.WriteTo(output, _repeated_contourPointUtm_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (referencePointBev_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReferencePointBev);
      }
      if (referencePointUtm_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReferencePointUtm);
      }
      if (HasWidth) {
        size += 1 + 4;
      }
      if (HasHeight) {
        size += 1 + 4;
      }
      if (HasLength) {
        size += 1 + 4;
      }
      if (HasYawAngle) {
        size += 1 + 4;
      }
      size += contourPointBev_.CalculateSize(_repeated_contourPointBev_codec);
      size += contourPointUtm_.CalculateSize(_repeated_contourPointUtm_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LaneAttributeContour other) {
      if (other == null) {
        return;
      }
      if (other.referencePointBev_ != null) {
        if (referencePointBev_ == null) {
          ReferencePointBev = new global::Xviewer.Point();
        }
        ReferencePointBev.MergeFrom(other.ReferencePointBev);
      }
      if (other.referencePointUtm_ != null) {
        if (referencePointUtm_ == null) {
          ReferencePointUtm = new global::Xviewer.Point();
        }
        ReferencePointUtm.MergeFrom(other.ReferencePointUtm);
      }
      if (other.HasWidth) {
        Width = other.Width;
      }
      if (other.HasHeight) {
        Height = other.Height;
      }
      if (other.HasLength) {
        Length = other.Length;
      }
      if (other.HasYawAngle) {
        YawAngle = other.YawAngle;
      }
      contourPointBev_.Add(other.contourPointBev_);
      contourPointUtm_.Add(other.contourPointUtm_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (referencePointBev_ == null) {
              ReferencePointBev = new global::Xviewer.Point();
            }
            input.ReadMessage(ReferencePointBev);
            break;
          }
          case 18: {
            if (referencePointUtm_ == null) {
              ReferencePointUtm = new global::Xviewer.Point();
            }
            input.ReadMessage(ReferencePointUtm);
            break;
          }
          case 29: {
            Width = input.ReadFloat();
            break;
          }
          case 37: {
            Height = input.ReadFloat();
            break;
          }
          case 45: {
            Length = input.ReadFloat();
            break;
          }
          case 53: {
            YawAngle = input.ReadFloat();
            break;
          }
          case 58: {
            contourPointBev_.AddEntriesFrom(input, _repeated_contourPointBev_codec);
            break;
          }
          case 66: {
            contourPointUtm_.AddEntriesFrom(input, _repeated_contourPointUtm_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// --- 车道线信息 ---
  /// </summary>
  public sealed partial class Lane : pb::IMessage<Lane> {
    private static readonly pb::MessageParser<Lane> _parser = new pb::MessageParser<Lane>(() => new Lane());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Lane> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PerceptionReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lane() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lane(Lane other) : this() {
      _hasBits0 = other._hasBits0;
      laneId_ = other.laneId_;
      laneRelativeId_ = other.laneRelativeId_;
      laneGlobalId_ = other.laneGlobalId_;
      laneAttributes_ = other.laneAttributes_.Clone();
      laneAttributeContours_ = other.laneAttributeContours_.Clone();
      passableType_ = other.passableType_;
      remainingTime_ = other.remainingTime_.Clone();
      signalColor_ = other.signalColor_.Clone();
      signalIsFlashing_ = other.signalIsFlashing_.Clone();
      laneCenterPoints_ = other.laneCenterPoints_.Clone();
      laneCenterPointsUtm_ = other.laneCenterPointsUtm_.Clone();
      leftLineId_ = other.leftLineId_;
      rightLineId_ = other.rightLineId_;
      laneOtherAttribute_ = other.laneOtherAttribute_;
      constructions_ = other.constructions_.Clone();
      laneAttributePointsUtm_ = other.laneAttributePointsUtm_.Clone();
      laneAttributePoints_ = other.laneAttributePoints_.Clone();
      splitPointUtm_ = other.splitPointUtm_.Clone();
      mergePointUtm_ = other.mergePointUtm_.Clone();
      splitPointBev_ = other.splitPointBev_.Clone();
      mergePointBev_ = other.mergePointBev_.Clone();
      laneWidth_ = other.laneWidth_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lane Clone() {
      return new Lane(this);
    }

    /// <summary>Field number for the "lane_id" field.</summary>
    public const int LaneIdFieldNumber = 1;
    private readonly static int LaneIdDefaultValue = 0;

    private int laneId_;
    /// <summary>
    /// 车道id:从左到右0、1、2、3（车道级别id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LaneId {
      get { if ((_hasBits0 & 1) != 0) { return laneId_; } else { return LaneIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        laneId_ = value;
      }
    }
    /// <summary>Gets whether the "lane_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLaneId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "lane_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLaneId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lane_relative_id" field.</summary>
    public const int LaneRelativeIdFieldNumber = 2;
    private readonly static int LaneRelativeIdDefaultValue = 0;

    private int laneRelativeId_;
    /// <summary>
    /// 车道相对id: 自车为0，左车道[...,-2,-1] ,右车道[1,2...]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LaneRelativeId {
      get { if ((_hasBits0 & 2) != 0) { return laneRelativeId_; } else { return LaneRelativeIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        laneRelativeId_ = value;
      }
    }
    /// <summary>Gets whether the "lane_relative_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLaneRelativeId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "lane_relative_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLaneRelativeId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "lane_global_id" field.</summary>
    public const int LaneGlobalIdFieldNumber = 3;
    private readonly static long LaneGlobalIdDefaultValue = 0L;

    private long laneGlobalId_;
    /// <summary>
    /// 车道绝对id: 地图的路段id + 车道id 最左侧0，从左到右0、1、2、3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LaneGlobalId {
      get { if ((_hasBits0 & 4) != 0) { return laneGlobalId_; } else { return LaneGlobalIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        laneGlobalId_ = value;
      }
    }
    /// <summary>Gets whether the "lane_global_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLaneGlobalId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "lane_global_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLaneGlobalId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "lane_attributes" field.</summary>
    public const int LaneAttributesFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_laneAttributes_codec
        = pb::FieldCodec.ForUInt32(32);
    private readonly pbc::RepeatedField<uint> laneAttributes_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 车道属性 //////
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> LaneAttributes {
      get { return laneAttributes_; }
    }

    /// <summary>Field number for the "lane_attribute_contours" field.</summary>
    public const int LaneAttributeContoursFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Xviewer.LaneAttributeContour> _repeated_laneAttributeContours_codec
        = pb::FieldCodec.ForMessage(42, global::Xviewer.LaneAttributeContour.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.LaneAttributeContour> laneAttributeContours_ = new pbc::RepeatedField<global::Xviewer.LaneAttributeContour>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.LaneAttributeContour> LaneAttributeContours {
      get { return laneAttributeContours_; }
    }

    /// <summary>Field number for the "passable_type" field.</summary>
    public const int PassableTypeFieldNumber = 6;
    private readonly static uint PassableTypeDefaultValue = 0;

    private uint passableType_;
    /// <summary>
    /// 导流属性边框轮廓 包含：中心点，长宽高，角点，轮廓点信息 数组长度与导流属性数组保持一致
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PassableType {
      get { if ((_hasBits0 & 8) != 0) { return passableType_; } else { return PassableTypeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        passableType_ = value;
      }
    }
    /// <summary>Gets whether the "passable_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPassableType {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "passable_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPassableType() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "remaining_time" field.</summary>
    public const int RemainingTimeFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_remainingTime_codec
        = pb::FieldCodec.ForInt32(56);
    private readonly pbc::RepeatedField<int> remainingTime_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// traffic lights countdown
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RemainingTime {
      get { return remainingTime_; }
    }

    /// <summary>Field number for the "signal_color" field.</summary>
    public const int SignalColorFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_signalColor_codec
        = pb::FieldCodec.ForInt32(64);
    private readonly pbc::RepeatedField<int> signalColor_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 颜色（红灯、黄灯、绿灯，无法分辨）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SignalColor {
      get { return signalColor_; }
    }

    /// <summary>Field number for the "signal_is_flashing" field.</summary>
    public const int SignalIsFlashingFieldNumber = 9;
    private static readonly pb::FieldCodec<int> _repeated_signalIsFlashing_codec
        = pb::FieldCodec.ForInt32(72);
    private readonly pbc::RepeatedField<int> signalIsFlashing_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 是否闪烁，[-1: 不是， 1: 是]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SignalIsFlashing {
      get { return signalIsFlashing_; }
    }

    /// <summary>Field number for the "lane_center_points" field.</summary>
    public const int LaneCenterPointsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_laneCenterPoints_codec
        = pb::FieldCodec.ForMessage(82, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> laneCenterPoints_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// 车道中心点，基于自车坐标系下的车道中心拟合的车道线点坐标[(x,y,z)]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> LaneCenterPoints {
      get { return laneCenterPoints_; }
    }

    /// <summary>Field number for the "lane_center_points_utm" field.</summary>
    public const int LaneCenterPointsUtmFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_laneCenterPointsUtm_codec
        = pb::FieldCodec.ForMessage(90, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> laneCenterPointsUtm_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// 车道中心点，基于utm坐标系下的车道中心拟合的车道线点坐标[(x,y,z)]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> LaneCenterPointsUtm {
      get { return laneCenterPointsUtm_; }
    }

    /// <summary>Field number for the "left_line_id" field.</summary>
    public const int LeftLineIdFieldNumber = 12;
    private readonly static int LeftLineIdDefaultValue = 0;

    private int leftLineId_;
    /// <summary>
    /// 左车道线id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftLineId {
      get { if ((_hasBits0 & 16) != 0) { return leftLineId_; } else { return LeftLineIdDefaultValue; } }
      set {
        _hasBits0 |= 16;
        leftLineId_ = value;
      }
    }
    /// <summary>Gets whether the "left_line_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeftLineId {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "left_line_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeftLineId() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "right_line_id" field.</summary>
    public const int RightLineIdFieldNumber = 13;
    private readonly static int RightLineIdDefaultValue = 0;

    private int rightLineId_;
    /// <summary>
    /// 右车道线id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RightLineId {
      get { if ((_hasBits0 & 32) != 0) { return rightLineId_; } else { return RightLineIdDefaultValue; } }
      set {
        _hasBits0 |= 32;
        rightLineId_ = value;
      }
    }
    /// <summary>Gets whether the "right_line_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRightLineId {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "right_line_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRightLineId() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "lane_other_attribute" field.</summary>
    public const int LaneOtherAttributeFieldNumber = 14;
    private readonly static uint LaneOtherAttributeDefaultValue = 0;

    private uint laneOtherAttribute_;
    /// <summary>
    /// 车道其他属性:0(无)、1(待转区)、2(公交专用道)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LaneOtherAttribute {
      get { if ((_hasBits0 & 64) != 0) { return laneOtherAttribute_; } else { return LaneOtherAttributeDefaultValue; } }
      set {
        _hasBits0 |= 64;
        laneOtherAttribute_ = value;
      }
    }
    /// <summary>Gets whether the "lane_other_attribute" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLaneOtherAttribute {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "lane_other_attribute" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLaneOtherAttribute() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "constructions" field.</summary>
    public const int ConstructionsFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Xviewer.ConstructionSection> _repeated_constructions_codec
        = pb::FieldCodec.ForMessage(122, global::Xviewer.ConstructionSection.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.ConstructionSection> constructions_ = new pbc::RepeatedField<global::Xviewer.ConstructionSection>();
    /// <summary>
    /// 施工信息集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.ConstructionSection> Constructions {
      get { return constructions_; }
    }

    /// <summary>Field number for the "lane_attribute_points_utm" field.</summary>
    public const int LaneAttributePointsUtmFieldNumber = 16;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_laneAttributePointsUtm_codec
        = pb::FieldCodec.ForMessage(130, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> laneAttributePointsUtm_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// 车道导流属性切分点_utm /////
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> LaneAttributePointsUtm {
      get { return laneAttributePointsUtm_; }
    }

    /// <summary>Field number for the "lane_attribute_points" field.</summary>
    public const int LaneAttributePointsFieldNumber = 17;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_laneAttributePoints_codec
        = pb::FieldCodec.ForMessage(138, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> laneAttributePoints_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// 车道导流属性切分点_bev /////
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> LaneAttributePoints {
      get { return laneAttributePoints_; }
    }

    /// <summary>Field number for the "split_point_utm" field.</summary>
    public const int SplitPointUtmFieldNumber = 18;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_splitPointUtm_codec
        = pb::FieldCodec.ForMessage(146, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> splitPointUtm_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// # 车道split点，utm坐标系，少变多等场景
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> SplitPointUtm {
      get { return splitPointUtm_; }
    }

    /// <summary>Field number for the "merge_point_utm" field.</summary>
    public const int MergePointUtmFieldNumber = 19;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_mergePointUtm_codec
        = pb::FieldCodec.ForMessage(154, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> mergePointUtm_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// # 车道merge点，utm坐标系，对应多变少等场景
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> MergePointUtm {
      get { return mergePointUtm_; }
    }

    /// <summary>Field number for the "split_point_bev" field.</summary>
    public const int SplitPointBevFieldNumber = 20;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_splitPointBev_codec
        = pb::FieldCodec.ForMessage(162, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> splitPointBev_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// # 车道split点，bev坐标系
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> SplitPointBev {
      get { return splitPointBev_; }
    }

    /// <summary>Field number for the "merge_point_bev" field.</summary>
    public const int MergePointBevFieldNumber = 21;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_mergePointBev_codec
        = pb::FieldCodec.ForMessage(170, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> mergePointBev_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// # 车道merge点，bev坐标系
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> MergePointBev {
      get { return mergePointBev_; }
    }

    /// <summary>Field number for the "lane_width" field.</summary>
    public const int LaneWidthFieldNumber = 22;
    private static readonly pb::FieldCodec<float> _repeated_laneWidth_codec
        = pb::FieldCodec.ForFloat(181);
    private readonly pbc::RepeatedField<float> laneWidth_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// # 车道宽度，数组大小与中心点个数保持一致
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> LaneWidth {
      get { return laneWidth_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Lane);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Lane other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LaneId != other.LaneId) return false;
      if (LaneRelativeId != other.LaneRelativeId) return false;
      if (LaneGlobalId != other.LaneGlobalId) return false;
      if(!laneAttributes_.Equals(other.laneAttributes_)) return false;
      if(!laneAttributeContours_.Equals(other.laneAttributeContours_)) return false;
      if (PassableType != other.PassableType) return false;
      if(!remainingTime_.Equals(other.remainingTime_)) return false;
      if(!signalColor_.Equals(other.signalColor_)) return false;
      if(!signalIsFlashing_.Equals(other.signalIsFlashing_)) return false;
      if(!laneCenterPoints_.Equals(other.laneCenterPoints_)) return false;
      if(!laneCenterPointsUtm_.Equals(other.laneCenterPointsUtm_)) return false;
      if (LeftLineId != other.LeftLineId) return false;
      if (RightLineId != other.RightLineId) return false;
      if (LaneOtherAttribute != other.LaneOtherAttribute) return false;
      if(!constructions_.Equals(other.constructions_)) return false;
      if(!laneAttributePointsUtm_.Equals(other.laneAttributePointsUtm_)) return false;
      if(!laneAttributePoints_.Equals(other.laneAttributePoints_)) return false;
      if(!splitPointUtm_.Equals(other.splitPointUtm_)) return false;
      if(!mergePointUtm_.Equals(other.mergePointUtm_)) return false;
      if(!splitPointBev_.Equals(other.splitPointBev_)) return false;
      if(!mergePointBev_.Equals(other.mergePointBev_)) return false;
      if(!laneWidth_.Equals(other.laneWidth_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLaneId) hash ^= LaneId.GetHashCode();
      if (HasLaneRelativeId) hash ^= LaneRelativeId.GetHashCode();
      if (HasLaneGlobalId) hash ^= LaneGlobalId.GetHashCode();
      hash ^= laneAttributes_.GetHashCode();
      hash ^= laneAttributeContours_.GetHashCode();
      if (HasPassableType) hash ^= PassableType.GetHashCode();
      hash ^= remainingTime_.GetHashCode();
      hash ^= signalColor_.GetHashCode();
      hash ^= signalIsFlashing_.GetHashCode();
      hash ^= laneCenterPoints_.GetHashCode();
      hash ^= laneCenterPointsUtm_.GetHashCode();
      if (HasLeftLineId) hash ^= LeftLineId.GetHashCode();
      if (HasRightLineId) hash ^= RightLineId.GetHashCode();
      if (HasLaneOtherAttribute) hash ^= LaneOtherAttribute.GetHashCode();
      hash ^= constructions_.GetHashCode();
      hash ^= laneAttributePointsUtm_.GetHashCode();
      hash ^= laneAttributePoints_.GetHashCode();
      hash ^= splitPointUtm_.GetHashCode();
      hash ^= mergePointUtm_.GetHashCode();
      hash ^= splitPointBev_.GetHashCode();
      hash ^= mergePointBev_.GetHashCode();
      hash ^= laneWidth_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasLaneId) {
        output.WriteRawTag(8);
        output.WriteInt32(LaneId);
      }
      if (HasLaneRelativeId) {
        output.WriteRawTag(16);
        output.WriteInt32(LaneRelativeId);
      }
      if (HasLaneGlobalId) {
        output.WriteRawTag(24);
        output.WriteInt64(LaneGlobalId);
      }
      laneAttributes_.WriteTo(output, _repeated_laneAttributes_codec);
      laneAttributeContours_.WriteTo(output, _repeated_laneAttributeContours_codec);
      if (HasPassableType) {
        output.WriteRawTag(48);
        output.WriteUInt32(PassableType);
      }
      remainingTime_.WriteTo(output, _repeated_remainingTime_codec);
      signalColor_.WriteTo(output, _repeated_signalColor_codec);
      signalIsFlashing_.WriteTo(output, _repeated_signalIsFlashing_codec);
      laneCenterPoints_.WriteTo(output, _repeated_laneCenterPoints_codec);
      laneCenterPointsUtm_.WriteTo(output, _repeated_laneCenterPointsUtm_codec);
      if (HasLeftLineId) {
        output.WriteRawTag(96);
        output.WriteInt32(LeftLineId);
      }
      if (HasRightLineId) {
        output.WriteRawTag(104);
        output.WriteInt32(RightLineId);
      }
      if (HasLaneOtherAttribute) {
        output.WriteRawTag(112);
        output.WriteUInt32(LaneOtherAttribute);
      }
      constructions_.WriteTo(output, _repeated_constructions_codec);
      laneAttributePointsUtm_.WriteTo(output, _repeated_laneAttributePointsUtm_codec);
      laneAttributePoints_.WriteTo(output, _repeated_laneAttributePoints_codec);
      splitPointUtm_.WriteTo(output, _repeated_splitPointUtm_codec);
      mergePointUtm_.WriteTo(output, _repeated_mergePointUtm_codec);
      splitPointBev_.WriteTo(output, _repeated_splitPointBev_codec);
      mergePointBev_.WriteTo(output, _repeated_mergePointBev_codec);
      laneWidth_.WriteTo(output, _repeated_laneWidth_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasLaneId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LaneId);
      }
      if (HasLaneRelativeId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LaneRelativeId);
      }
      if (HasLaneGlobalId) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LaneGlobalId);
      }
      size += laneAttributes_.CalculateSize(_repeated_laneAttributes_codec);
      size += laneAttributeContours_.CalculateSize(_repeated_laneAttributeContours_codec);
      if (HasPassableType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PassableType);
      }
      size += remainingTime_.CalculateSize(_repeated_remainingTime_codec);
      size += signalColor_.CalculateSize(_repeated_signalColor_codec);
      size += signalIsFlashing_.CalculateSize(_repeated_signalIsFlashing_codec);
      size += laneCenterPoints_.CalculateSize(_repeated_laneCenterPoints_codec);
      size += laneCenterPointsUtm_.CalculateSize(_repeated_laneCenterPointsUtm_codec);
      if (HasLeftLineId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftLineId);
      }
      if (HasRightLineId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RightLineId);
      }
      if (HasLaneOtherAttribute) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LaneOtherAttribute);
      }
      size += constructions_.CalculateSize(_repeated_constructions_codec);
      size += laneAttributePointsUtm_.CalculateSize(_repeated_laneAttributePointsUtm_codec);
      size += laneAttributePoints_.CalculateSize(_repeated_laneAttributePoints_codec);
      size += splitPointUtm_.CalculateSize(_repeated_splitPointUtm_codec);
      size += mergePointUtm_.CalculateSize(_repeated_mergePointUtm_codec);
      size += splitPointBev_.CalculateSize(_repeated_splitPointBev_codec);
      size += mergePointBev_.CalculateSize(_repeated_mergePointBev_codec);
      size += laneWidth_.CalculateSize(_repeated_laneWidth_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Lane other) {
      if (other == null) {
        return;
      }
      if (other.HasLaneId) {
        LaneId = other.LaneId;
      }
      if (other.HasLaneRelativeId) {
        LaneRelativeId = other.LaneRelativeId;
      }
      if (other.HasLaneGlobalId) {
        LaneGlobalId = other.LaneGlobalId;
      }
      laneAttributes_.Add(other.laneAttributes_);
      laneAttributeContours_.Add(other.laneAttributeContours_);
      if (other.HasPassableType) {
        PassableType = other.PassableType;
      }
      remainingTime_.Add(other.remainingTime_);
      signalColor_.Add(other.signalColor_);
      signalIsFlashing_.Add(other.signalIsFlashing_);
      laneCenterPoints_.Add(other.laneCenterPoints_);
      laneCenterPointsUtm_.Add(other.laneCenterPointsUtm_);
      if (other.HasLeftLineId) {
        LeftLineId = other.LeftLineId;
      }
      if (other.HasRightLineId) {
        RightLineId = other.RightLineId;
      }
      if (other.HasLaneOtherAttribute) {
        LaneOtherAttribute = other.LaneOtherAttribute;
      }
      constructions_.Add(other.constructions_);
      laneAttributePointsUtm_.Add(other.laneAttributePointsUtm_);
      laneAttributePoints_.Add(other.laneAttributePoints_);
      splitPointUtm_.Add(other.splitPointUtm_);
      mergePointUtm_.Add(other.mergePointUtm_);
      splitPointBev_.Add(other.splitPointBev_);
      mergePointBev_.Add(other.mergePointBev_);
      laneWidth_.Add(other.laneWidth_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LaneId = input.ReadInt32();
            break;
          }
          case 16: {
            LaneRelativeId = input.ReadInt32();
            break;
          }
          case 24: {
            LaneGlobalId = input.ReadInt64();
            break;
          }
          case 34:
          case 32: {
            laneAttributes_.AddEntriesFrom(input, _repeated_laneAttributes_codec);
            break;
          }
          case 42: {
            laneAttributeContours_.AddEntriesFrom(input, _repeated_laneAttributeContours_codec);
            break;
          }
          case 48: {
            PassableType = input.ReadUInt32();
            break;
          }
          case 58:
          case 56: {
            remainingTime_.AddEntriesFrom(input, _repeated_remainingTime_codec);
            break;
          }
          case 66:
          case 64: {
            signalColor_.AddEntriesFrom(input, _repeated_signalColor_codec);
            break;
          }
          case 74:
          case 72: {
            signalIsFlashing_.AddEntriesFrom(input, _repeated_signalIsFlashing_codec);
            break;
          }
          case 82: {
            laneCenterPoints_.AddEntriesFrom(input, _repeated_laneCenterPoints_codec);
            break;
          }
          case 90: {
            laneCenterPointsUtm_.AddEntriesFrom(input, _repeated_laneCenterPointsUtm_codec);
            break;
          }
          case 96: {
            LeftLineId = input.ReadInt32();
            break;
          }
          case 104: {
            RightLineId = input.ReadInt32();
            break;
          }
          case 112: {
            LaneOtherAttribute = input.ReadUInt32();
            break;
          }
          case 122: {
            constructions_.AddEntriesFrom(input, _repeated_constructions_codec);
            break;
          }
          case 130: {
            laneAttributePointsUtm_.AddEntriesFrom(input, _repeated_laneAttributePointsUtm_codec);
            break;
          }
          case 138: {
            laneAttributePoints_.AddEntriesFrom(input, _repeated_laneAttributePoints_codec);
            break;
          }
          case 146: {
            splitPointUtm_.AddEntriesFrom(input, _repeated_splitPointUtm_codec);
            break;
          }
          case 154: {
            mergePointUtm_.AddEntriesFrom(input, _repeated_mergePointUtm_codec);
            break;
          }
          case 162: {
            splitPointBev_.AddEntriesFrom(input, _repeated_splitPointBev_codec);
            break;
          }
          case 170: {
            mergePointBev_.AddEntriesFrom(input, _repeated_mergePointBev_codec);
            break;
          }
          case 178:
          case 181: {
            laneWidth_.AddEntriesFrom(input, _repeated_laneWidth_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LaneLine : pb::IMessage<LaneLine> {
    private static readonly pb::MessageParser<LaneLine> _parser = new pb::MessageParser<LaneLine>(() => new LaneLine());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LaneLine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PerceptionReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneLine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneLine(LaneLine other) : this() {
      _hasBits0 = other._hasBits0;
      lineId_ = other.lineId_;
      typeList_ = other.typeList_.Clone();
      indexList_ = other.indexList_.Clone();
      confidence_ = other.confidence_;
      linePoints_ = other.linePoints_.Clone();
      linePointsUtm_ = other.linePointsUtm_.Clone();
      linePointsScore_ = other.linePointsScore_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneLine Clone() {
      return new LaneLine(this);
    }

    /// <summary>Field number for the "line_id" field.</summary>
    public const int LineIdFieldNumber = 1;
    private readonly static int LineIdDefaultValue = 0;

    private int lineId_;
    /// <summary>
    /// 车道线id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LineId {
      get { if ((_hasBits0 & 1) != 0) { return lineId_; } else { return LineIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        lineId_ = value;
      }
    }
    /// <summary>Gets whether the "line_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLineId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "line_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLineId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "type_list" field.</summary>
    public const int TypeListFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_typeList_codec
        = pb::FieldCodec.ForUInt32(16);
    private readonly pbc::RepeatedField<uint> typeList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 车道线类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TypeList {
      get { return typeList_; }
    }

    /// <summary>Field number for the "index_list" field.</summary>
    public const int IndexListFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_indexList_codec
        = pb::FieldCodec.ForInt32(24);
    private readonly pbc::RepeatedField<int> indexList_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 一段线如有多个属性，对应不同属性线段之间的切分点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IndexList {
      get { return indexList_; }
    }

    /// <summary>Field number for the "confidence" field.</summary>
    public const int ConfidenceFieldNumber = 4;
    private readonly static float ConfidenceDefaultValue = 0F;

    private float confidence_;
    /// <summary>
    /// 类型置信度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Confidence {
      get { if ((_hasBits0 & 2) != 0) { return confidence_; } else { return ConfidenceDefaultValue; } }
      set {
        _hasBits0 |= 2;
        confidence_ = value;
      }
    }
    /// <summary>Gets whether the "confidence" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasConfidence {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "confidence" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConfidence() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "line_points" field.</summary>
    public const int LinePointsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_linePoints_codec
        = pb::FieldCodec.ForMessage(42, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> linePoints_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// 车道线点列表, 车辆坐标系下 单位M
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> LinePoints {
      get { return linePoints_; }
    }

    /// <summary>Field number for the "line_points_utm" field.</summary>
    public const int LinePointsUtmFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_linePointsUtm_codec
        = pb::FieldCodec.ForMessage(50, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> linePointsUtm_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// 车道线点列表, utm坐标系下 单位M
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> LinePointsUtm {
      get { return linePointsUtm_; }
    }

    /// <summary>Field number for the "line_points_score" field.</summary>
    public const int LinePointsScoreFieldNumber = 7;
    private static readonly pb::FieldCodec<float> _repeated_linePointsScore_codec
        = pb::FieldCodec.ForFloat(61);
    private readonly pbc::RepeatedField<float> linePointsScore_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 车道线点confidence
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> LinePointsScore {
      get { return linePointsScore_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LaneLine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LaneLine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LineId != other.LineId) return false;
      if(!typeList_.Equals(other.typeList_)) return false;
      if(!indexList_.Equals(other.indexList_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Confidence, other.Confidence)) return false;
      if(!linePoints_.Equals(other.linePoints_)) return false;
      if(!linePointsUtm_.Equals(other.linePointsUtm_)) return false;
      if(!linePointsScore_.Equals(other.linePointsScore_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLineId) hash ^= LineId.GetHashCode();
      hash ^= typeList_.GetHashCode();
      hash ^= indexList_.GetHashCode();
      if (HasConfidence) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Confidence);
      hash ^= linePoints_.GetHashCode();
      hash ^= linePointsUtm_.GetHashCode();
      hash ^= linePointsScore_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasLineId) {
        output.WriteRawTag(8);
        output.WriteInt32(LineId);
      }
      typeList_.WriteTo(output, _repeated_typeList_codec);
      indexList_.WriteTo(output, _repeated_indexList_codec);
      if (HasConfidence) {
        output.WriteRawTag(37);
        output.WriteFloat(Confidence);
      }
      linePoints_.WriteTo(output, _repeated_linePoints_codec);
      linePointsUtm_.WriteTo(output, _repeated_linePointsUtm_codec);
      linePointsScore_.WriteTo(output, _repeated_linePointsScore_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasLineId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LineId);
      }
      size += typeList_.CalculateSize(_repeated_typeList_codec);
      size += indexList_.CalculateSize(_repeated_indexList_codec);
      if (HasConfidence) {
        size += 1 + 4;
      }
      size += linePoints_.CalculateSize(_repeated_linePoints_codec);
      size += linePointsUtm_.CalculateSize(_repeated_linePointsUtm_codec);
      size += linePointsScore_.CalculateSize(_repeated_linePointsScore_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LaneLine other) {
      if (other == null) {
        return;
      }
      if (other.HasLineId) {
        LineId = other.LineId;
      }
      typeList_.Add(other.typeList_);
      indexList_.Add(other.indexList_);
      if (other.HasConfidence) {
        Confidence = other.Confidence;
      }
      linePoints_.Add(other.linePoints_);
      linePointsUtm_.Add(other.linePointsUtm_);
      linePointsScore_.Add(other.linePointsScore_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LineId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            typeList_.AddEntriesFrom(input, _repeated_typeList_codec);
            break;
          }
          case 26:
          case 24: {
            indexList_.AddEntriesFrom(input, _repeated_indexList_codec);
            break;
          }
          case 37: {
            Confidence = input.ReadFloat();
            break;
          }
          case 42: {
            linePoints_.AddEntriesFrom(input, _repeated_linePoints_codec);
            break;
          }
          case 50: {
            linePointsUtm_.AddEntriesFrom(input, _repeated_linePointsUtm_codec);
            break;
          }
          case 58:
          case 61: {
            linePointsScore_.AddEntriesFrom(input, _repeated_linePointsScore_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StopLine : pb::IMessage<StopLine> {
    private static readonly pb::MessageParser<StopLine> _parser = new pb::MessageParser<StopLine>(() => new StopLine());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopLine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PerceptionReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopLine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopLine(StopLine other) : this() {
      _hasBits0 = other._hasBits0;
      type_ = other.type_;
      confidence_ = other.confidence_;
      stopLinePoints_ = other.stopLinePoints_.Clone();
      stopLineUtmPoints_ = other.stopLineUtmPoints_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopLine Clone() {
      return new StopLine(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static uint TypeDefaultValue = 0;

    private uint type_;
    /// <summary>
    /// 停止线类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "confidence" field.</summary>
    public const int ConfidenceFieldNumber = 2;
    private readonly static float ConfidenceDefaultValue = 0F;

    private float confidence_;
    /// <summary>
    /// 类型置信度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Confidence {
      get { if ((_hasBits0 & 2) != 0) { return confidence_; } else { return ConfidenceDefaultValue; } }
      set {
        _hasBits0 |= 2;
        confidence_ = value;
      }
    }
    /// <summary>Gets whether the "confidence" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasConfidence {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "confidence" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConfidence() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "stop_line_points" field.</summary>
    public const int StopLinePointsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_stopLinePoints_codec
        = pb::FieldCodec.ForMessage(26, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> stopLinePoints_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// 一共两个点、左起点和右起点，左边为第一个点、右边为第二个点[(x1,y1),(x2,y2)]，车辆坐标系下 单位M 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> StopLinePoints {
      get { return stopLinePoints_; }
    }

    /// <summary>Field number for the "stop_line_utm_points" field.</summary>
    public const int StopLineUtmPointsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_stopLineUtmPoints_codec
        = pb::FieldCodec.ForMessage(34, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> stopLineUtmPoints_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// 一共两个点、左起点和右起点，左边为第一个点、右边为第二个点[(x1,y1),(x2,y2)]，UTM坐标系下 单位M
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> StopLineUtmPoints {
      get { return stopLineUtmPoints_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopLine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopLine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Confidence, other.Confidence)) return false;
      if(!stopLinePoints_.Equals(other.stopLinePoints_)) return false;
      if(!stopLineUtmPoints_.Equals(other.stopLineUtmPoints_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      if (HasConfidence) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Confidence);
      hash ^= stopLinePoints_.GetHashCode();
      hash ^= stopLineUtmPoints_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasType) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (HasConfidence) {
        output.WriteRawTag(21);
        output.WriteFloat(Confidence);
      }
      stopLinePoints_.WriteTo(output, _repeated_stopLinePoints_codec);
      stopLineUtmPoints_.WriteTo(output, _repeated_stopLineUtmPoints_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (HasConfidence) {
        size += 1 + 4;
      }
      size += stopLinePoints_.CalculateSize(_repeated_stopLinePoints_codec);
      size += stopLineUtmPoints_.CalculateSize(_repeated_stopLineUtmPoints_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopLine other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasConfidence) {
        Confidence = other.Confidence;
      }
      stopLinePoints_.Add(other.stopLinePoints_);
      stopLineUtmPoints_.Add(other.stopLineUtmPoints_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 21: {
            Confidence = input.ReadFloat();
            break;
          }
          case 26: {
            stopLinePoints_.AddEntriesFrom(input, _repeated_stopLinePoints_codec);
            break;
          }
          case 34: {
            stopLineUtmPoints_.AddEntriesFrom(input, _repeated_stopLineUtmPoints_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LaneLineInfo : pb::IMessage<LaneLineInfo> {
    private static readonly pb::MessageParser<LaneLineInfo> _parser = new pb::MessageParser<LaneLineInfo>(() => new LaneLineInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LaneLineInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PerceptionReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneLineInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneLineInfo(LaneLineInfo other) : this() {
      _hasBits0 = other._hasBits0;
      egoLaneId_ = other.egoLaneId_;
      laneLines_ = other.laneLines_.Clone();
      lanes_ = other.lanes_.Clone();
      stopLines_ = other.stopLines_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneLineInfo Clone() {
      return new LaneLineInfo(this);
    }

    /// <summary>Field number for the "ego_lane_id" field.</summary>
    public const int EgoLaneIdFieldNumber = 1;
    private readonly static int EgoLaneIdDefaultValue = 0;

    private int egoLaneId_;
    /// <summary>
    /// 离自车最近车道的车道id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EgoLaneId {
      get { if ((_hasBits0 & 1) != 0) { return egoLaneId_; } else { return EgoLaneIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        egoLaneId_ = value;
      }
    }
    /// <summary>Gets whether the "ego_lane_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEgoLaneId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ego_lane_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEgoLaneId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lane_lines" field.</summary>
    public const int LaneLinesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xviewer.LaneLine> _repeated_laneLines_codec
        = pb::FieldCodec.ForMessage(18, global::Xviewer.LaneLine.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.LaneLine> laneLines_ = new pbc::RepeatedField<global::Xviewer.LaneLine>();
    /// <summary>
    /// 车道线集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.LaneLine> LaneLines {
      get { return laneLines_; }
    }

    /// <summary>Field number for the "lanes" field.</summary>
    public const int LanesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Xviewer.Lane> _repeated_lanes_codec
        = pb::FieldCodec.ForMessage(26, global::Xviewer.Lane.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Lane> lanes_ = new pbc::RepeatedField<global::Xviewer.Lane>();
    /// <summary>
    /// 车道集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Lane> Lanes {
      get { return lanes_; }
    }

    /// <summary>Field number for the "stop_lines" field.</summary>
    public const int StopLinesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Xviewer.StopLine> _repeated_stopLines_codec
        = pb::FieldCodec.ForMessage(34, global::Xviewer.StopLine.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.StopLine> stopLines_ = new pbc::RepeatedField<global::Xviewer.StopLine>();
    /// <summary>
    /// 停止线集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.StopLine> StopLines {
      get { return stopLines_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LaneLineInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LaneLineInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EgoLaneId != other.EgoLaneId) return false;
      if(!laneLines_.Equals(other.laneLines_)) return false;
      if(!lanes_.Equals(other.lanes_)) return false;
      if(!stopLines_.Equals(other.stopLines_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEgoLaneId) hash ^= EgoLaneId.GetHashCode();
      hash ^= laneLines_.GetHashCode();
      hash ^= lanes_.GetHashCode();
      hash ^= stopLines_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasEgoLaneId) {
        output.WriteRawTag(8);
        output.WriteInt32(EgoLaneId);
      }
      laneLines_.WriteTo(output, _repeated_laneLines_codec);
      lanes_.WriteTo(output, _repeated_lanes_codec);
      stopLines_.WriteTo(output, _repeated_stopLines_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEgoLaneId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EgoLaneId);
      }
      size += laneLines_.CalculateSize(_repeated_laneLines_codec);
      size += lanes_.CalculateSize(_repeated_lanes_codec);
      size += stopLines_.CalculateSize(_repeated_stopLines_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LaneLineInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasEgoLaneId) {
        EgoLaneId = other.EgoLaneId;
      }
      laneLines_.Add(other.laneLines_);
      lanes_.Add(other.lanes_);
      stopLines_.Add(other.stopLines_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EgoLaneId = input.ReadInt32();
            break;
          }
          case 18: {
            laneLines_.AddEntriesFrom(input, _repeated_laneLines_codec);
            break;
          }
          case 26: {
            lanes_.AddEntriesFrom(input, _repeated_lanes_codec);
            break;
          }
          case 34: {
            stopLines_.AddEntriesFrom(input, _repeated_stopLines_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// --- 目标信息 ---
  /// </summary>
  public sealed partial class Dimension : pb::IMessage<Dimension> {
    private static readonly pb::MessageParser<Dimension> _parser = new pb::MessageParser<Dimension>(() => new Dimension());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Dimension> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PerceptionReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dimension() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dimension(Dimension other) : this() {
      _hasBits0 = other._hasBits0;
      width_ = other.width_;
      height_ = other.height_;
      length_ = other.length_;
      x_ = other.x_.Clone();
      y_ = other.y_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dimension Clone() {
      return new Dimension(this);
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 1;
    private readonly static float WidthDefaultValue = 0F;

    private float width_;
    /// <summary>
    /// 3d box的宽
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Width {
      get { if ((_hasBits0 & 1) != 0) { return width_; } else { return WidthDefaultValue; } }
      set {
        _hasBits0 |= 1;
        width_ = value;
      }
    }
    /// <summary>Gets whether the "width" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWidth {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "width" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWidth() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private readonly static float HeightDefaultValue = 0F;

    private float height_;
    /// <summary>
    /// 3d box的高
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Height {
      get { if ((_hasBits0 & 2) != 0) { return height_; } else { return HeightDefaultValue; } }
      set {
        _hasBits0 |= 2;
        height_ = value;
      }
    }
    /// <summary>Gets whether the "height" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeight {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "height" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeight() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 3;
    private readonly static float LengthDefaultValue = 0F;

    private float length_;
    /// <summary>
    /// 3d box 的长
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Length {
      get { if ((_hasBits0 & 4) != 0) { return length_; } else { return LengthDefaultValue; } }
      set {
        _hasBits0 |= 4;
        length_ = value;
      }
    }
    /// <summary>Gets whether the "length" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLength {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "length" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLength() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 4;
    private static readonly pb::FieldCodec<float> _repeated_x_codec
        = pb::FieldCodec.ForFloat(37);
    private readonly pbc::RepeatedField<float> x_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 四个角点在bev坐标系的x坐标 顺序依次为[左上角，右上角，右下角，左下角]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> X {
      get { return x_; }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 5;
    private static readonly pb::FieldCodec<float> _repeated_y_codec
        = pb::FieldCodec.ForFloat(45);
    private readonly pbc::RepeatedField<float> y_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 四个角点在bev坐标系的y坐标 顺序依次为[左上角，右上角，右下角，左下角]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Y {
      get { return y_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Dimension);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Dimension other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Width, other.Width)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Height, other.Height)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Length, other.Length)) return false;
      if(!x_.Equals(other.x_)) return false;
      if(!y_.Equals(other.y_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasWidth) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Width);
      if (HasHeight) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Height);
      if (HasLength) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Length);
      hash ^= x_.GetHashCode();
      hash ^= y_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasWidth) {
        output.WriteRawTag(13);
        output.WriteFloat(Width);
      }
      if (HasHeight) {
        output.WriteRawTag(21);
        output.WriteFloat(Height);
      }
      if (HasLength) {
        output.WriteRawTag(29);
        output.WriteFloat(Length);
      }
      x_.WriteTo(output, _repeated_x_codec);
      y_.WriteTo(output, _repeated_y_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasWidth) {
        size += 1 + 4;
      }
      if (HasHeight) {
        size += 1 + 4;
      }
      if (HasLength) {
        size += 1 + 4;
      }
      size += x_.CalculateSize(_repeated_x_codec);
      size += y_.CalculateSize(_repeated_y_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Dimension other) {
      if (other == null) {
        return;
      }
      if (other.HasWidth) {
        Width = other.Width;
      }
      if (other.HasHeight) {
        Height = other.Height;
      }
      if (other.HasLength) {
        Length = other.Length;
      }
      x_.Add(other.x_);
      y_.Add(other.y_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Width = input.ReadFloat();
            break;
          }
          case 21: {
            Height = input.ReadFloat();
            break;
          }
          case 29: {
            Length = input.ReadFloat();
            break;
          }
          case 34:
          case 37: {
            x_.AddEntriesFrom(input, _repeated_x_codec);
            break;
          }
          case 42:
          case 45: {
            y_.AddEntriesFrom(input, _repeated_y_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PredictionPoint : pb::IMessage<PredictionPoint> {
    private static readonly pb::MessageParser<PredictionPoint> _parser = new pb::MessageParser<PredictionPoint>(() => new PredictionPoint());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PredictionPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PerceptionReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PredictionPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PredictionPoint(PredictionPoint other) : this() {
      _hasBits0 = other._hasBits0;
      position_ = other.position_.Clone();
      velocity_ = other.velocity_.Clone();
      accel_ = other.accel_.Clone();
      yaw_ = other.yaw_;
      positionUtm_ = other.positionUtm_.Clone();
      velocityUtm_ = other.velocityUtm_.Clone();
      accelUtm_ = other.accelUtm_.Clone();
      yawUtm_ = other.yawUtm_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PredictionPoint Clone() {
      return new PredictionPoint(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private static readonly pb::FieldCodec<float> _repeated_position_codec
        = pb::FieldCodec.ForFloat(13);
    private readonly pbc::RepeatedField<float> position_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 预测目标在车辆坐标系下的坐标 (x y)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Position {
      get { return position_; }
    }

    /// <summary>Field number for the "velocity" field.</summary>
    public const int VelocityFieldNumber = 2;
    private static readonly pb::FieldCodec<float> _repeated_velocity_codec
        = pb::FieldCodec.ForFloat(21);
    private readonly pbc::RepeatedField<float> velocity_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 预测目标在车辆坐标系下的速度 (x,y,z)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Velocity {
      get { return velocity_; }
    }

    /// <summary>Field number for the "accel" field.</summary>
    public const int AccelFieldNumber = 3;
    private static readonly pb::FieldCodec<float> _repeated_accel_codec
        = pb::FieldCodec.ForFloat(29);
    private readonly pbc::RepeatedField<float> accel_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 预测目标在车辆坐标系下的加速度 (x,y,z)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Accel {
      get { return accel_; }
    }

    /// <summary>Field number for the "yaw" field.</summary>
    public const int YawFieldNumber = 4;
    private readonly static float YawDefaultValue = 0F;

    private float yaw_;
    /// <summary>
    /// 预测目标的偏航角
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Yaw {
      get { if ((_hasBits0 & 1) != 0) { return yaw_; } else { return YawDefaultValue; } }
      set {
        _hasBits0 |= 1;
        yaw_ = value;
      }
    }
    /// <summary>Gets whether the "yaw" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasYaw {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "yaw" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearYaw() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "position_utm" field.</summary>
    public const int PositionUtmFieldNumber = 5;
    private static readonly pb::FieldCodec<double> _repeated_positionUtm_codec
        = pb::FieldCodec.ForDouble(41);
    private readonly pbc::RepeatedField<double> positionUtm_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// size为3，预测目标在utm坐标系下的预测坐标点position[0]:x,position[1]:y，position[2]:z
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> PositionUtm {
      get { return positionUtm_; }
    }

    /// <summary>Field number for the "velocity_utm" field.</summary>
    public const int VelocityUtmFieldNumber = 6;
    private static readonly pb::FieldCodec<float> _repeated_velocityUtm_codec
        = pb::FieldCodec.ForFloat(53);
    private readonly pbc::RepeatedField<float> velocityUtm_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// size为3，目标速度在utm坐标系的x、y、z方向上的速度分量velocity[0]:vx,velocity[1]:vy，velocity[2]:vz
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> VelocityUtm {
      get { return velocityUtm_; }
    }

    /// <summary>Field number for the "accel_utm" field.</summary>
    public const int AccelUtmFieldNumber = 7;
    private static readonly pb::FieldCodec<float> _repeated_accelUtm_codec
        = pb::FieldCodec.ForFloat(61);
    private readonly pbc::RepeatedField<float> accelUtm_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// size为3，目标加速度在utm车坐标系的x、y、z方向上的加速度分量accel[0]:ax,accel[1]:ay，accel[2]:az
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> AccelUtm {
      get { return accelUtm_; }
    }

    /// <summary>Field number for the "yaw_utm" field.</summary>
    public const int YawUtmFieldNumber = 8;
    private readonly static float YawUtmDefaultValue = 0F;

    private float yawUtm_;
    /// <summary>
    /// utm坐标系下偏航角
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float YawUtm {
      get { if ((_hasBits0 & 2) != 0) { return yawUtm_; } else { return YawUtmDefaultValue; } }
      set {
        _hasBits0 |= 2;
        yawUtm_ = value;
      }
    }
    /// <summary>Gets whether the "yaw_utm" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasYawUtm {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "yaw_utm" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearYawUtm() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PredictionPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PredictionPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!position_.Equals(other.position_)) return false;
      if(!velocity_.Equals(other.velocity_)) return false;
      if(!accel_.Equals(other.accel_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Yaw, other.Yaw)) return false;
      if(!positionUtm_.Equals(other.positionUtm_)) return false;
      if(!velocityUtm_.Equals(other.velocityUtm_)) return false;
      if(!accelUtm_.Equals(other.accelUtm_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(YawUtm, other.YawUtm)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= position_.GetHashCode();
      hash ^= velocity_.GetHashCode();
      hash ^= accel_.GetHashCode();
      if (HasYaw) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Yaw);
      hash ^= positionUtm_.GetHashCode();
      hash ^= velocityUtm_.GetHashCode();
      hash ^= accelUtm_.GetHashCode();
      if (HasYawUtm) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(YawUtm);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      position_.WriteTo(output, _repeated_position_codec);
      velocity_.WriteTo(output, _repeated_velocity_codec);
      accel_.WriteTo(output, _repeated_accel_codec);
      if (HasYaw) {
        output.WriteRawTag(37);
        output.WriteFloat(Yaw);
      }
      positionUtm_.WriteTo(output, _repeated_positionUtm_codec);
      velocityUtm_.WriteTo(output, _repeated_velocityUtm_codec);
      accelUtm_.WriteTo(output, _repeated_accelUtm_codec);
      if (HasYawUtm) {
        output.WriteRawTag(69);
        output.WriteFloat(YawUtm);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += position_.CalculateSize(_repeated_position_codec);
      size += velocity_.CalculateSize(_repeated_velocity_codec);
      size += accel_.CalculateSize(_repeated_accel_codec);
      if (HasYaw) {
        size += 1 + 4;
      }
      size += positionUtm_.CalculateSize(_repeated_positionUtm_codec);
      size += velocityUtm_.CalculateSize(_repeated_velocityUtm_codec);
      size += accelUtm_.CalculateSize(_repeated_accelUtm_codec);
      if (HasYawUtm) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PredictionPoint other) {
      if (other == null) {
        return;
      }
      position_.Add(other.position_);
      velocity_.Add(other.velocity_);
      accel_.Add(other.accel_);
      if (other.HasYaw) {
        Yaw = other.Yaw;
      }
      positionUtm_.Add(other.positionUtm_);
      velocityUtm_.Add(other.velocityUtm_);
      accelUtm_.Add(other.accelUtm_);
      if (other.HasYawUtm) {
        YawUtm = other.YawUtm;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 13: {
            position_.AddEntriesFrom(input, _repeated_position_codec);
            break;
          }
          case 18:
          case 21: {
            velocity_.AddEntriesFrom(input, _repeated_velocity_codec);
            break;
          }
          case 26:
          case 29: {
            accel_.AddEntriesFrom(input, _repeated_accel_codec);
            break;
          }
          case 37: {
            Yaw = input.ReadFloat();
            break;
          }
          case 42:
          case 41: {
            positionUtm_.AddEntriesFrom(input, _repeated_positionUtm_codec);
            break;
          }
          case 50:
          case 53: {
            velocityUtm_.AddEntriesFrom(input, _repeated_velocityUtm_codec);
            break;
          }
          case 58:
          case 61: {
            accelUtm_.AddEntriesFrom(input, _repeated_accelUtm_codec);
            break;
          }
          case 69: {
            YawUtm = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Prediction : pb::IMessage<Prediction> {
    private static readonly pb::MessageParser<Prediction> _parser = new pb::MessageParser<Prediction>(() => new Prediction());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Prediction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PerceptionReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Prediction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Prediction(Prediction other) : this() {
      _hasBits0 = other._hasBits0;
      isValidObject_ = other.isValidObject_;
      futureTime_ = other.futureTime_;
      intervalTime_ = other.intervalTime_;
      futurePoints_ = other.futurePoints_.Clone();
      intentionPrediction_ = other.intentionPrediction_;
      confidence_ = other.confidence_;
      statusMode_ = other.statusMode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Prediction Clone() {
      return new Prediction(this);
    }

    /// <summary>Field number for the "is_valid_object" field.</summary>
    public const int IsValidObjectFieldNumber = 1;
    private readonly static bool IsValidObjectDefaultValue = false;

    private bool isValidObject_;
    /// <summary>
    /// 是否对目标进行预测，若否，其余值为无效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsValidObject {
      get { if ((_hasBits0 & 1) != 0) { return isValidObject_; } else { return IsValidObjectDefaultValue; } }
      set {
        _hasBits0 |= 1;
        isValidObject_ = value;
      }
    }
    /// <summary>Gets whether the "is_valid_object" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsValidObject {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "is_valid_object" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsValidObject() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "future_time" field.</summary>
    public const int FutureTimeFieldNumber = 2;
    private readonly static int FutureTimeDefaultValue = 0;

    private int futureTime_;
    /// <summary>
    /// 预测时间长度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FutureTime {
      get { if ((_hasBits0 & 2) != 0) { return futureTime_; } else { return FutureTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        futureTime_ = value;
      }
    }
    /// <summary>Gets whether the "future_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFutureTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "future_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFutureTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "interval_time" field.</summary>
    public const int IntervalTimeFieldNumber = 3;
    private readonly static float IntervalTimeDefaultValue = 0F;

    private float intervalTime_;
    /// <summary>
    /// 预测轨迹点之间的时间间隔
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float IntervalTime {
      get { if ((_hasBits0 & 4) != 0) { return intervalTime_; } else { return IntervalTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        intervalTime_ = value;
      }
    }
    /// <summary>Gets whether the "interval_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIntervalTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "interval_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIntervalTime() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "future_points" field.</summary>
    public const int FuturePointsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Xviewer.PredictionPoint> _repeated_futurePoints_codec
        = pb::FieldCodec.ForMessage(34, global::Xviewer.PredictionPoint.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.PredictionPoint> futurePoints_ = new pbc::RepeatedField<global::Xviewer.PredictionPoint>();
    /// <summary>
    /// 预测目标点集
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.PredictionPoint> FuturePoints {
      get { return futurePoints_; }
    }

    /// <summary>Field number for the "intention_prediction" field.</summary>
    public const int IntentionPredictionFieldNumber = 5;
    private readonly static int IntentionPredictionDefaultValue = 0;

    private int intentionPrediction_;
    /// <summary>
    /// 预测FutureTime时长的变道意图,0:UNKNOWN;1:C_TURN_LEFT2:C_TURN_RIGHT
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IntentionPrediction {
      get { if ((_hasBits0 & 8) != 0) { return intentionPrediction_; } else { return IntentionPredictionDefaultValue; } }
      set {
        _hasBits0 |= 8;
        intentionPrediction_ = value;
      }
    }
    /// <summary>Gets whether the "intention_prediction" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIntentionPrediction {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "intention_prediction" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIntentionPrediction() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "confidence" field.</summary>
    public const int ConfidenceFieldNumber = 6;
    private readonly static float ConfidenceDefaultValue = 0F;

    private float confidence_;
    /// <summary>
    /// 预测轨迹的置信度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Confidence {
      get { if ((_hasBits0 & 16) != 0) { return confidence_; } else { return ConfidenceDefaultValue; } }
      set {
        _hasBits0 |= 16;
        confidence_ = value;
      }
    }
    /// <summary>Gets whether the "confidence" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasConfidence {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "confidence" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConfidence() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "status_mode" field.</summary>
    public const int StatusModeFieldNumber = 7;
    private readonly static int StatusModeDefaultValue = 0;

    private int statusMode_;
    /// <summary>
    /// 状态值:预测内部使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StatusMode {
      get { if ((_hasBits0 & 32) != 0) { return statusMode_; } else { return StatusModeDefaultValue; } }
      set {
        _hasBits0 |= 32;
        statusMode_ = value;
      }
    }
    /// <summary>Gets whether the "status_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStatusMode {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "status_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStatusMode() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Prediction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Prediction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsValidObject != other.IsValidObject) return false;
      if (FutureTime != other.FutureTime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(IntervalTime, other.IntervalTime)) return false;
      if(!futurePoints_.Equals(other.futurePoints_)) return false;
      if (IntentionPrediction != other.IntentionPrediction) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Confidence, other.Confidence)) return false;
      if (StatusMode != other.StatusMode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIsValidObject) hash ^= IsValidObject.GetHashCode();
      if (HasFutureTime) hash ^= FutureTime.GetHashCode();
      if (HasIntervalTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(IntervalTime);
      hash ^= futurePoints_.GetHashCode();
      if (HasIntentionPrediction) hash ^= IntentionPrediction.GetHashCode();
      if (HasConfidence) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Confidence);
      if (HasStatusMode) hash ^= StatusMode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasIsValidObject) {
        output.WriteRawTag(8);
        output.WriteBool(IsValidObject);
      }
      if (HasFutureTime) {
        output.WriteRawTag(16);
        output.WriteInt32(FutureTime);
      }
      if (HasIntervalTime) {
        output.WriteRawTag(29);
        output.WriteFloat(IntervalTime);
      }
      futurePoints_.WriteTo(output, _repeated_futurePoints_codec);
      if (HasIntentionPrediction) {
        output.WriteRawTag(40);
        output.WriteInt32(IntentionPrediction);
      }
      if (HasConfidence) {
        output.WriteRawTag(53);
        output.WriteFloat(Confidence);
      }
      if (HasStatusMode) {
        output.WriteRawTag(56);
        output.WriteInt32(StatusMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasIsValidObject) {
        size += 1 + 1;
      }
      if (HasFutureTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FutureTime);
      }
      if (HasIntervalTime) {
        size += 1 + 4;
      }
      size += futurePoints_.CalculateSize(_repeated_futurePoints_codec);
      if (HasIntentionPrediction) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IntentionPrediction);
      }
      if (HasConfidence) {
        size += 1 + 4;
      }
      if (HasStatusMode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatusMode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Prediction other) {
      if (other == null) {
        return;
      }
      if (other.HasIsValidObject) {
        IsValidObject = other.IsValidObject;
      }
      if (other.HasFutureTime) {
        FutureTime = other.FutureTime;
      }
      if (other.HasIntervalTime) {
        IntervalTime = other.IntervalTime;
      }
      futurePoints_.Add(other.futurePoints_);
      if (other.HasIntentionPrediction) {
        IntentionPrediction = other.IntentionPrediction;
      }
      if (other.HasConfidence) {
        Confidence = other.Confidence;
      }
      if (other.HasStatusMode) {
        StatusMode = other.StatusMode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsValidObject = input.ReadBool();
            break;
          }
          case 16: {
            FutureTime = input.ReadInt32();
            break;
          }
          case 29: {
            IntervalTime = input.ReadFloat();
            break;
          }
          case 34: {
            futurePoints_.AddEntriesFrom(input, _repeated_futurePoints_codec);
            break;
          }
          case 40: {
            IntentionPrediction = input.ReadInt32();
            break;
          }
          case 53: {
            Confidence = input.ReadFloat();
            break;
          }
          case 56: {
            StatusMode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Time : pb::IMessage<Time> {
    private static readonly pb::MessageParser<Time> _parser = new pb::MessageParser<Time>(() => new Time());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Time> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PerceptionReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Time() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Time(Time other) : this() {
      _hasBits0 = other._hasBits0;
      sec_ = other.sec_;
      nanosec_ = other.nanosec_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Time Clone() {
      return new Time(this);
    }

    /// <summary>Field number for the "sec" field.</summary>
    public const int SecFieldNumber = 1;
    private readonly static int SecDefaultValue = 0;

    private int sec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sec {
      get { if ((_hasBits0 & 1) != 0) { return sec_; } else { return SecDefaultValue; } }
      set {
        _hasBits0 |= 1;
        sec_ = value;
      }
    }
    /// <summary>Gets whether the "sec" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSec {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "sec" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSec() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "nanosec" field.</summary>
    public const int NanosecFieldNumber = 2;
    private readonly static uint NanosecDefaultValue = 0;

    private uint nanosec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Nanosec {
      get { if ((_hasBits0 & 2) != 0) { return nanosec_; } else { return NanosecDefaultValue; } }
      set {
        _hasBits0 |= 2;
        nanosec_ = value;
      }
    }
    /// <summary>Gets whether the "nanosec" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNanosec {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "nanosec" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNanosec() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Time);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Time other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sec != other.Sec) return false;
      if (Nanosec != other.Nanosec) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSec) hash ^= Sec.GetHashCode();
      if (HasNanosec) hash ^= Nanosec.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasSec) {
        output.WriteRawTag(8);
        output.WriteInt32(Sec);
      }
      if (HasNanosec) {
        output.WriteRawTag(16);
        output.WriteUInt32(Nanosec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSec) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sec);
      }
      if (HasNanosec) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Nanosec);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Time other) {
      if (other == null) {
        return;
      }
      if (other.HasSec) {
        Sec = other.Sec;
      }
      if (other.HasNanosec) {
        Nanosec = other.Nanosec;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Sec = input.ReadInt32();
            break;
          }
          case 16: {
            Nanosec = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Object3D : pb::IMessage<Object3D> {
    private static readonly pb::MessageParser<Object3D> _parser = new pb::MessageParser<Object3D>(() => new Object3D());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Object3D> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PerceptionReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Object3D() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Object3D(Object3D other) : this() {
      _hasBits0 = other._hasBits0;
      objectId_ = other.objectId_;
      isMovable_ = other.isMovable_;
      objectType_ = other.objectType_;
      classConfidence_ = other.classConfidence_;
      existProbability_ = other.existProbability_;
      timeLastSeen_ = other.timeLastSeen_ != null ? other.timeLastSeen_.Clone() : null;
      timeCreation_ = other.timeCreation_ != null ? other.timeCreation_.Clone() : null;
      objectAge_ = other.objectAge_ != null ? other.objectAge_.Clone() : null;
      trackQuality_ = other.trackQuality_;
      referencePoint_ = other.referencePoint_.Clone();
      referencePointUtm_ = other.referencePointUtm_.Clone();
      objectDimension_ = other.objectDimension_ != null ? other.objectDimension_.Clone() : null;
      laneId_ = other.laneId_.Clone();
      laneLeftDistance_ = other.laneLeftDistance_.Clone();
      laneRightDistance_ = other.laneRightDistance_.Clone();
      velocity_ = other.velocity_.Clone();
      objectAccel_ = other.objectAccel_.Clone();
      omega_ = other.omega_.Clone();
      omegaAccel_ = other.omegaAccel_.Clone();
      yawAngle_ = other.yawAngle_;
      predicitionInfo_ = other.predicitionInfo_ != null ? other.predicitionInfo_.Clone() : null;
      predictTrajectoryList_ = other.predictTrajectoryList_.Clone();
      historyPoints_ = other.historyPoints_.Clone();
      roadId_ = other.roadId_;
      typeMotionFusion_ = other.typeMotionFusion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Object3D Clone() {
      return new Object3D(this);
    }

    /// <summary>Field number for the "object_id" field.</summary>
    public const int ObjectIdFieldNumber = 1;
    private readonly static long ObjectIdDefaultValue = 0L;

    private long objectId_;
    /// <summary>
    /// 物体的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ObjectId {
      get { if ((_hasBits0 & 1) != 0) { return objectId_; } else { return ObjectIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        objectId_ = value;
      }
    }
    /// <summary>Gets whether the "object_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasObjectId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "object_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearObjectId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "is_movable" field.</summary>
    public const int IsMovableFieldNumber = 2;
    private readonly static bool IsMovableDefaultValue = false;

    private bool isMovable_;
    /// <summary>
    /// 0：静态物体   1： 动态物 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMovable {
      get { if ((_hasBits0 & 2) != 0) { return isMovable_; } else { return IsMovableDefaultValue; } }
      set {
        _hasBits0 |= 2;
        isMovable_ = value;
      }
    }
    /// <summary>Gets whether the "is_movable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsMovable {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "is_movable" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsMovable() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "object_type" field.</summary>
    public const int ObjectTypeFieldNumber = 3;
    private readonly static int ObjectTypeDefaultValue = 0;

    private int objectType_;
    /// <summary>
    /// 物体类别  1Car小汽车，1Truck卡车，3Bus公共汽车，4Trailer挂车、拖车，5Construction_vehicle施工车辆，6Motorcycle摩托车，7Bicycle自行车，8Pedestrian行人，9Traffic_cone雪糕筒，10Barrier水马等障碍物，11Logistics_car小物流车，12Tricycle三轮车，13rider骑行者（可能会去除）14 红绿灯
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ObjectType {
      get { if ((_hasBits0 & 4) != 0) { return objectType_; } else { return ObjectTypeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        objectType_ = value;
      }
    }
    /// <summary>Gets whether the "object_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasObjectType {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "object_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearObjectType() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "class_confidence" field.</summary>
    public const int ClassConfidenceFieldNumber = 4;
    private readonly static float ClassConfidenceDefaultValue = 0F;

    private float classConfidence_;
    /// <summary>
    /// 类别的置信度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ClassConfidence {
      get { if ((_hasBits0 & 8) != 0) { return classConfidence_; } else { return ClassConfidenceDefaultValue; } }
      set {
        _hasBits0 |= 8;
        classConfidence_ = value;
      }
    }
    /// <summary>Gets whether the "class_confidence" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClassConfidence {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "class_confidence" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClassConfidence() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "exist_probability" field.</summary>
    public const int ExistProbabilityFieldNumber = 5;
    private readonly static float ExistProbabilityDefaultValue = 0F;

    private float existProbability_;
    /// <summary>
    /// 存在概率，1~100
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ExistProbability {
      get { if ((_hasBits0 & 16) != 0) { return existProbability_; } else { return ExistProbabilityDefaultValue; } }
      set {
        _hasBits0 |= 16;
        existProbability_ = value;
      }
    }
    /// <summary>Gets whether the "exist_probability" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExistProbability {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "exist_probability" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExistProbability() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "time_last_seen" field.</summary>
    public const int TimeLastSeenFieldNumber = 6;
    private global::Xviewer.Time timeLastSeen_;
    /// <summary>
    /// 目标上次更新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Time TimeLastSeen {
      get { return timeLastSeen_; }
      set {
        timeLastSeen_ = value;
      }
    }

    /// <summary>Field number for the "time_creation" field.</summary>
    public const int TimeCreationFieldNumber = 7;
    private global::Xviewer.Time timeCreation_;
    /// <summary>
    /// 目标创建时刻
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Time TimeCreation {
      get { return timeCreation_; }
      set {
        timeCreation_ = value;
      }
    }

    /// <summary>Field number for the "object_age" field.</summary>
    public const int ObjectAgeFieldNumber = 8;
    private global::Xviewer.Time objectAge_;
    /// <summary>
    /// 目标被跟踪的时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Time ObjectAge {
      get { return objectAge_; }
      set {
        objectAge_ = value;
      }
    }

    /// <summary>Field number for the "track_quality" field.</summary>
    public const int TrackQualityFieldNumber = 9;
    private readonly static float TrackQualityDefaultValue = 0F;

    private float trackQuality_;
    /// <summary>
    /// 跟踪质量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TrackQuality {
      get { if ((_hasBits0 & 32) != 0) { return trackQuality_; } else { return TrackQualityDefaultValue; } }
      set {
        _hasBits0 |= 32;
        trackQuality_ = value;
      }
    }
    /// <summary>Gets whether the "track_quality" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTrackQuality {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "track_quality" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTrackQuality() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "reference_point" field.</summary>
    public const int ReferencePointFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_referencePoint_codec
        = pb::FieldCodec.ForMessage(82, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> referencePoint_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// 目标包围框中心位置，相对自车坐标系(x,y,z)；长方体质心；
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> ReferencePoint {
      get { return referencePoint_; }
    }

    /// <summary>Field number for the "reference_point_utm" field.</summary>
    public const int ReferencePointUtmFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_referencePointUtm_codec
        = pb::FieldCodec.ForMessage(90, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> referencePointUtm_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// 目标包围框中心位置，UTM坐标系(utm_x,utm_y,utm_z)；长方体质心；
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> ReferencePointUtm {
      get { return referencePointUtm_; }
    }

    /// <summary>Field number for the "object_dimension" field.</summary>
    public const int ObjectDimensionFieldNumber = 12;
    private global::Xviewer.Dimension objectDimension_;
    /// <summary>
    /// 轮廓信息，车辆坐标系下四个bounding box角点{(x_i, y_i)}, i=0,1,2,3, 其中0和1表示动态目标的头部两个角点，2和3表示动态目标的尾部两个角点 目标几何尺寸，长，宽，高
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Dimension ObjectDimension {
      get { return objectDimension_; }
      set {
        objectDimension_ = value;
      }
    }

    /// <summary>Field number for the "lane_id" field.</summary>
    public const int LaneIdFieldNumber = 13;
    private static readonly pb::FieldCodec<int> _repeated_laneId_codec
        = pb::FieldCodec.ForInt32(104);
    private readonly pbc::RepeatedField<int> laneId_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 所属车道的id，如果跨车道需要给出两个车道id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> LaneId {
      get { return laneId_; }
    }

    /// <summary>Field number for the "lane_left_distance" field.</summary>
    public const int LaneLeftDistanceFieldNumber = 14;
    private static readonly pb::FieldCodec<float> _repeated_laneLeftDistance_codec
        = pb::FieldCodec.ForFloat(117);
    private readonly pbc::RepeatedField<float> laneLeftDistance_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 目标bounding box的左侧两个角点距离左边车道线的偏移量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> LaneLeftDistance {
      get { return laneLeftDistance_; }
    }

    /// <summary>Field number for the "lane_right_distance" field.</summary>
    public const int LaneRightDistanceFieldNumber = 15;
    private static readonly pb::FieldCodec<float> _repeated_laneRightDistance_codec
        = pb::FieldCodec.ForFloat(125);
    private readonly pbc::RepeatedField<float> laneRightDistance_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 目标bounding box的右侧两个角点距离右边车道线的偏移量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> LaneRightDistance {
      get { return laneRightDistance_; }
    }

    /// <summary>Field number for the "velocity" field.</summary>
    public const int VelocityFieldNumber = 16;
    private static readonly pb::FieldCodec<float> _repeated_velocity_codec
        = pb::FieldCodec.ForFloat(133);
    private readonly pbc::RepeatedField<float> velocity_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 目标速度相对自车坐标系 (vx,vy,vz) vz如果没有检测出来，默认为0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Velocity {
      get { return velocity_; }
    }

    /// <summary>Field number for the "object_accel" field.</summary>
    public const int ObjectAccelFieldNumber = 17;
    private static readonly pb::FieldCodec<float> _repeated_objectAccel_codec
        = pb::FieldCodec.ForFloat(141);
    private readonly pbc::RepeatedField<float> objectAccel_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 目标加速度相对自车坐标系 (mx,my,mz)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> ObjectAccel {
      get { return objectAccel_; }
    }

    /// <summary>Field number for the "omega" field.</summary>
    public const int OmegaFieldNumber = 18;
    private static readonly pb::FieldCodec<float> _repeated_omega_codec
        = pb::FieldCodec.ForFloat(149);
    private readonly pbc::RepeatedField<float> omega_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 车辆坐标系下角速度,rad/s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Omega {
      get { return omega_; }
    }

    /// <summary>Field number for the "omega_accel" field.</summary>
    public const int OmegaAccelFieldNumber = 19;
    private static readonly pb::FieldCodec<float> _repeated_omegaAccel_codec
        = pb::FieldCodec.ForFloat(157);
    private readonly pbc::RepeatedField<float> omegaAccel_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 车辆坐标系下角加速度,rad/s2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> OmegaAccel {
      get { return omegaAccel_; }
    }

    /// <summary>Field number for the "yaw_angle" field.</summary>
    public const int YawAngleFieldNumber = 20;
    private readonly static float YawAngleDefaultValue = 0F;

    private float yawAngle_;
    /// <summary>
    /// 车辆坐标系下偏航角 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float YawAngle {
      get { if ((_hasBits0 & 64) != 0) { return yawAngle_; } else { return YawAngleDefaultValue; } }
      set {
        _hasBits0 |= 64;
        yawAngle_ = value;
      }
    }
    /// <summary>Gets whether the "yaw_angle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasYawAngle {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "yaw_angle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearYawAngle() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "predicition_info" field.</summary>
    public const int PredicitionInfoFieldNumber = 21;
    private global::Xviewer.Prediction predicitionInfo_;
    /// <summary>
    /// 单个目标的预测信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Prediction PredicitionInfo {
      get { return predicitionInfo_; }
      set {
        predicitionInfo_ = value;
      }
    }

    /// <summary>Field number for the "predict_trajectory_list" field.</summary>
    public const int PredictTrajectoryListFieldNumber = 22;
    private static readonly pb::FieldCodec<global::Xviewer.Prediction> _repeated_predictTrajectoryList_codec
        = pb::FieldCodec.ForMessage(178, global::Xviewer.Prediction.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Prediction> predictTrajectoryList_ = new pbc::RepeatedField<global::Xviewer.Prediction>();
    /// <summary>
    /// 目标预测的多条轨迹
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Prediction> PredictTrajectoryList {
      get { return predictTrajectoryList_; }
    }

    /// <summary>Field number for the "history_points" field.</summary>
    public const int HistoryPointsFieldNumber = 23;
    private static readonly pb::FieldCodec<global::Xviewer.PredictionPoint> _repeated_historyPoints_codec
        = pb::FieldCodec.ForMessage(186, global::Xviewer.PredictionPoint.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.PredictionPoint> historyPoints_ = new pbc::RepeatedField<global::Xviewer.PredictionPoint>();
    /// <summary>
    /// 目标的历史轨迹
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.PredictionPoint> HistoryPoints {
      get { return historyPoints_; }
    }

    /// <summary>Field number for the "road_id" field.</summary>
    public const int RoadIdFieldNumber = 24;
    private readonly static int RoadIdDefaultValue = 0;

    private int roadId_;
    /// <summary>
    /// 所属道路的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoadId {
      get { if ((_hasBits0 & 128) != 0) { return roadId_; } else { return RoadIdDefaultValue; } }
      set {
        _hasBits0 |= 128;
        roadId_ = value;
      }
    }
    /// <summary>Gets whether the "road_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRoadId {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "road_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRoadId() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "type_motion_fusion" field.</summary>
    public const int TypeMotionFusionFieldNumber = 25;
    private readonly static int TypeMotionFusionDefaultValue = 0;

    private int typeMotionFusion_;
    /// <summary>
    /// 速度融合类型 0:未知，1:位置,2:毫米波,3:融合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TypeMotionFusion {
      get { if ((_hasBits0 & 256) != 0) { return typeMotionFusion_; } else { return TypeMotionFusionDefaultValue; } }
      set {
        _hasBits0 |= 256;
        typeMotionFusion_ = value;
      }
    }
    /// <summary>Gets whether the "type_motion_fusion" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTypeMotionFusion {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "type_motion_fusion" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTypeMotionFusion() {
      _hasBits0 &= ~256;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Object3D);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Object3D other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObjectId != other.ObjectId) return false;
      if (IsMovable != other.IsMovable) return false;
      if (ObjectType != other.ObjectType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ClassConfidence, other.ClassConfidence)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExistProbability, other.ExistProbability)) return false;
      if (!object.Equals(TimeLastSeen, other.TimeLastSeen)) return false;
      if (!object.Equals(TimeCreation, other.TimeCreation)) return false;
      if (!object.Equals(ObjectAge, other.ObjectAge)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrackQuality, other.TrackQuality)) return false;
      if(!referencePoint_.Equals(other.referencePoint_)) return false;
      if(!referencePointUtm_.Equals(other.referencePointUtm_)) return false;
      if (!object.Equals(ObjectDimension, other.ObjectDimension)) return false;
      if(!laneId_.Equals(other.laneId_)) return false;
      if(!laneLeftDistance_.Equals(other.laneLeftDistance_)) return false;
      if(!laneRightDistance_.Equals(other.laneRightDistance_)) return false;
      if(!velocity_.Equals(other.velocity_)) return false;
      if(!objectAccel_.Equals(other.objectAccel_)) return false;
      if(!omega_.Equals(other.omega_)) return false;
      if(!omegaAccel_.Equals(other.omegaAccel_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(YawAngle, other.YawAngle)) return false;
      if (!object.Equals(PredicitionInfo, other.PredicitionInfo)) return false;
      if(!predictTrajectoryList_.Equals(other.predictTrajectoryList_)) return false;
      if(!historyPoints_.Equals(other.historyPoints_)) return false;
      if (RoadId != other.RoadId) return false;
      if (TypeMotionFusion != other.TypeMotionFusion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasObjectId) hash ^= ObjectId.GetHashCode();
      if (HasIsMovable) hash ^= IsMovable.GetHashCode();
      if (HasObjectType) hash ^= ObjectType.GetHashCode();
      if (HasClassConfidence) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ClassConfidence);
      if (HasExistProbability) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExistProbability);
      if (timeLastSeen_ != null) hash ^= TimeLastSeen.GetHashCode();
      if (timeCreation_ != null) hash ^= TimeCreation.GetHashCode();
      if (objectAge_ != null) hash ^= ObjectAge.GetHashCode();
      if (HasTrackQuality) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrackQuality);
      hash ^= referencePoint_.GetHashCode();
      hash ^= referencePointUtm_.GetHashCode();
      if (objectDimension_ != null) hash ^= ObjectDimension.GetHashCode();
      hash ^= laneId_.GetHashCode();
      hash ^= laneLeftDistance_.GetHashCode();
      hash ^= laneRightDistance_.GetHashCode();
      hash ^= velocity_.GetHashCode();
      hash ^= objectAccel_.GetHashCode();
      hash ^= omega_.GetHashCode();
      hash ^= omegaAccel_.GetHashCode();
      if (HasYawAngle) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(YawAngle);
      if (predicitionInfo_ != null) hash ^= PredicitionInfo.GetHashCode();
      hash ^= predictTrajectoryList_.GetHashCode();
      hash ^= historyPoints_.GetHashCode();
      if (HasRoadId) hash ^= RoadId.GetHashCode();
      if (HasTypeMotionFusion) hash ^= TypeMotionFusion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasObjectId) {
        output.WriteRawTag(8);
        output.WriteInt64(ObjectId);
      }
      if (HasIsMovable) {
        output.WriteRawTag(16);
        output.WriteBool(IsMovable);
      }
      if (HasObjectType) {
        output.WriteRawTag(24);
        output.WriteInt32(ObjectType);
      }
      if (HasClassConfidence) {
        output.WriteRawTag(37);
        output.WriteFloat(ClassConfidence);
      }
      if (HasExistProbability) {
        output.WriteRawTag(45);
        output.WriteFloat(ExistProbability);
      }
      if (timeLastSeen_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TimeLastSeen);
      }
      if (timeCreation_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(TimeCreation);
      }
      if (objectAge_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ObjectAge);
      }
      if (HasTrackQuality) {
        output.WriteRawTag(77);
        output.WriteFloat(TrackQuality);
      }
      referencePoint_.WriteTo(output, _repeated_referencePoint_codec);
      referencePointUtm_.WriteTo(output, _repeated_referencePointUtm_codec);
      if (objectDimension_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(ObjectDimension);
      }
      laneId_.WriteTo(output, _repeated_laneId_codec);
      laneLeftDistance_.WriteTo(output, _repeated_laneLeftDistance_codec);
      laneRightDistance_.WriteTo(output, _repeated_laneRightDistance_codec);
      velocity_.WriteTo(output, _repeated_velocity_codec);
      objectAccel_.WriteTo(output, _repeated_objectAccel_codec);
      omega_.WriteTo(output, _repeated_omega_codec);
      omegaAccel_.WriteTo(output, _repeated_omegaAccel_codec);
      if (HasYawAngle) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(YawAngle);
      }
      if (predicitionInfo_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(PredicitionInfo);
      }
      predictTrajectoryList_.WriteTo(output, _repeated_predictTrajectoryList_codec);
      historyPoints_.WriteTo(output, _repeated_historyPoints_codec);
      if (HasRoadId) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(RoadId);
      }
      if (HasTypeMotionFusion) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(TypeMotionFusion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasObjectId) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ObjectId);
      }
      if (HasIsMovable) {
        size += 1 + 1;
      }
      if (HasObjectType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ObjectType);
      }
      if (HasClassConfidence) {
        size += 1 + 4;
      }
      if (HasExistProbability) {
        size += 1 + 4;
      }
      if (timeLastSeen_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeLastSeen);
      }
      if (timeCreation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeCreation);
      }
      if (objectAge_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObjectAge);
      }
      if (HasTrackQuality) {
        size += 1 + 4;
      }
      size += referencePoint_.CalculateSize(_repeated_referencePoint_codec);
      size += referencePointUtm_.CalculateSize(_repeated_referencePointUtm_codec);
      if (objectDimension_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObjectDimension);
      }
      size += laneId_.CalculateSize(_repeated_laneId_codec);
      size += laneLeftDistance_.CalculateSize(_repeated_laneLeftDistance_codec);
      size += laneRightDistance_.CalculateSize(_repeated_laneRightDistance_codec);
      size += velocity_.CalculateSize(_repeated_velocity_codec);
      size += objectAccel_.CalculateSize(_repeated_objectAccel_codec);
      size += omega_.CalculateSize(_repeated_omega_codec);
      size += omegaAccel_.CalculateSize(_repeated_omegaAccel_codec);
      if (HasYawAngle) {
        size += 2 + 4;
      }
      if (predicitionInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PredicitionInfo);
      }
      size += predictTrajectoryList_.CalculateSize(_repeated_predictTrajectoryList_codec);
      size += historyPoints_.CalculateSize(_repeated_historyPoints_codec);
      if (HasRoadId) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RoadId);
      }
      if (HasTypeMotionFusion) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TypeMotionFusion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Object3D other) {
      if (other == null) {
        return;
      }
      if (other.HasObjectId) {
        ObjectId = other.ObjectId;
      }
      if (other.HasIsMovable) {
        IsMovable = other.IsMovable;
      }
      if (other.HasObjectType) {
        ObjectType = other.ObjectType;
      }
      if (other.HasClassConfidence) {
        ClassConfidence = other.ClassConfidence;
      }
      if (other.HasExistProbability) {
        ExistProbability = other.ExistProbability;
      }
      if (other.timeLastSeen_ != null) {
        if (timeLastSeen_ == null) {
          TimeLastSeen = new global::Xviewer.Time();
        }
        TimeLastSeen.MergeFrom(other.TimeLastSeen);
      }
      if (other.timeCreation_ != null) {
        if (timeCreation_ == null) {
          TimeCreation = new global::Xviewer.Time();
        }
        TimeCreation.MergeFrom(other.TimeCreation);
      }
      if (other.objectAge_ != null) {
        if (objectAge_ == null) {
          ObjectAge = new global::Xviewer.Time();
        }
        ObjectAge.MergeFrom(other.ObjectAge);
      }
      if (other.HasTrackQuality) {
        TrackQuality = other.TrackQuality;
      }
      referencePoint_.Add(other.referencePoint_);
      referencePointUtm_.Add(other.referencePointUtm_);
      if (other.objectDimension_ != null) {
        if (objectDimension_ == null) {
          ObjectDimension = new global::Xviewer.Dimension();
        }
        ObjectDimension.MergeFrom(other.ObjectDimension);
      }
      laneId_.Add(other.laneId_);
      laneLeftDistance_.Add(other.laneLeftDistance_);
      laneRightDistance_.Add(other.laneRightDistance_);
      velocity_.Add(other.velocity_);
      objectAccel_.Add(other.objectAccel_);
      omega_.Add(other.omega_);
      omegaAccel_.Add(other.omegaAccel_);
      if (other.HasYawAngle) {
        YawAngle = other.YawAngle;
      }
      if (other.predicitionInfo_ != null) {
        if (predicitionInfo_ == null) {
          PredicitionInfo = new global::Xviewer.Prediction();
        }
        PredicitionInfo.MergeFrom(other.PredicitionInfo);
      }
      predictTrajectoryList_.Add(other.predictTrajectoryList_);
      historyPoints_.Add(other.historyPoints_);
      if (other.HasRoadId) {
        RoadId = other.RoadId;
      }
      if (other.HasTypeMotionFusion) {
        TypeMotionFusion = other.TypeMotionFusion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ObjectId = input.ReadInt64();
            break;
          }
          case 16: {
            IsMovable = input.ReadBool();
            break;
          }
          case 24: {
            ObjectType = input.ReadInt32();
            break;
          }
          case 37: {
            ClassConfidence = input.ReadFloat();
            break;
          }
          case 45: {
            ExistProbability = input.ReadFloat();
            break;
          }
          case 50: {
            if (timeLastSeen_ == null) {
              TimeLastSeen = new global::Xviewer.Time();
            }
            input.ReadMessage(TimeLastSeen);
            break;
          }
          case 58: {
            if (timeCreation_ == null) {
              TimeCreation = new global::Xviewer.Time();
            }
            input.ReadMessage(TimeCreation);
            break;
          }
          case 66: {
            if (objectAge_ == null) {
              ObjectAge = new global::Xviewer.Time();
            }
            input.ReadMessage(ObjectAge);
            break;
          }
          case 77: {
            TrackQuality = input.ReadFloat();
            break;
          }
          case 82: {
            referencePoint_.AddEntriesFrom(input, _repeated_referencePoint_codec);
            break;
          }
          case 90: {
            referencePointUtm_.AddEntriesFrom(input, _repeated_referencePointUtm_codec);
            break;
          }
          case 98: {
            if (objectDimension_ == null) {
              ObjectDimension = new global::Xviewer.Dimension();
            }
            input.ReadMessage(ObjectDimension);
            break;
          }
          case 106:
          case 104: {
            laneId_.AddEntriesFrom(input, _repeated_laneId_codec);
            break;
          }
          case 114:
          case 117: {
            laneLeftDistance_.AddEntriesFrom(input, _repeated_laneLeftDistance_codec);
            break;
          }
          case 122:
          case 125: {
            laneRightDistance_.AddEntriesFrom(input, _repeated_laneRightDistance_codec);
            break;
          }
          case 130:
          case 133: {
            velocity_.AddEntriesFrom(input, _repeated_velocity_codec);
            break;
          }
          case 138:
          case 141: {
            objectAccel_.AddEntriesFrom(input, _repeated_objectAccel_codec);
            break;
          }
          case 146:
          case 149: {
            omega_.AddEntriesFrom(input, _repeated_omega_codec);
            break;
          }
          case 154:
          case 157: {
            omegaAccel_.AddEntriesFrom(input, _repeated_omegaAccel_codec);
            break;
          }
          case 165: {
            YawAngle = input.ReadFloat();
            break;
          }
          case 170: {
            if (predicitionInfo_ == null) {
              PredicitionInfo = new global::Xviewer.Prediction();
            }
            input.ReadMessage(PredicitionInfo);
            break;
          }
          case 178: {
            predictTrajectoryList_.AddEntriesFrom(input, _repeated_predictTrajectoryList_codec);
            break;
          }
          case 186: {
            historyPoints_.AddEntriesFrom(input, _repeated_historyPoints_codec);
            break;
          }
          case 192: {
            RoadId = input.ReadInt32();
            break;
          }
          case 200: {
            TypeMotionFusion = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectInfo : pb::IMessage<ObjectInfo> {
    private static readonly pb::MessageParser<ObjectInfo> _parser = new pb::MessageParser<ObjectInfo>(() => new ObjectInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PerceptionReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectInfo(ObjectInfo other) : this() {
      time_ = other.time_ != null ? other.time_.Clone() : null;
      objectList_ = other.objectList_.Clone();
      timeFusion_ = other.timeFusion_ != null ? other.timeFusion_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectInfo Clone() {
      return new ObjectInfo(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private global::Xviewer.TimeWorld time_;
    /// <summary>
    /// perc_time: 来源ObjectInfo的Header。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.TimeWorld Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "object_list" field.</summary>
    public const int ObjectListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xviewer.Object3D> _repeated_objectList_codec
        = pb::FieldCodec.ForMessage(18, global::Xviewer.Object3D.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Object3D> objectList_ = new pbc::RepeatedField<global::Xviewer.Object3D>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Object3D> ObjectList {
      get { return objectList_; }
    }

    /// <summary>Field number for the "time_fusion" field.</summary>
    public const int TimeFusionFieldNumber = 3;
    private global::Xviewer.TimeWorld timeFusion_;
    /// <summary>
    /// 融合数据时间, 来源PercepFusion的Header。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.TimeWorld TimeFusion {
      get { return timeFusion_; }
      set {
        timeFusion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Time, other.Time)) return false;
      if(!objectList_.Equals(other.objectList_)) return false;
      if (!object.Equals(TimeFusion, other.TimeFusion)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (time_ != null) hash ^= Time.GetHashCode();
      hash ^= objectList_.GetHashCode();
      if (timeFusion_ != null) hash ^= TimeFusion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (time_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Time);
      }
      objectList_.WriteTo(output, _repeated_objectList_codec);
      if (timeFusion_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TimeFusion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (time_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Time);
      }
      size += objectList_.CalculateSize(_repeated_objectList_codec);
      if (timeFusion_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeFusion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectInfo other) {
      if (other == null) {
        return;
      }
      if (other.time_ != null) {
        if (time_ == null) {
          Time = new global::Xviewer.TimeWorld();
        }
        Time.MergeFrom(other.Time);
      }
      objectList_.Add(other.objectList_);
      if (other.timeFusion_ != null) {
        if (timeFusion_ == null) {
          TimeFusion = new global::Xviewer.TimeWorld();
        }
        TimeFusion.MergeFrom(other.TimeFusion);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (time_ == null) {
              Time = new global::Xviewer.TimeWorld();
            }
            input.ReadMessage(Time);
            break;
          }
          case 18: {
            objectList_.AddEntriesFrom(input, _repeated_objectList_codec);
            break;
          }
          case 26: {
            if (timeFusion_ == null) {
              TimeFusion = new global::Xviewer.TimeWorld();
            }
            input.ReadMessage(TimeFusion);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// --- 交通信息 ---
  /// </summary>
  public sealed partial class TrafficLight : pb::IMessage<TrafficLight> {
    private static readonly pb::MessageParser<TrafficLight> _parser = new pb::MessageParser<TrafficLight>(() => new TrafficLight());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrafficLight> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PerceptionReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficLight() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficLight(TrafficLight other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      signalType_ = other.signalType_;
      typeConfidence_ = other.typeConfidence_;
      signalShape_ = other.signalShape_;
      shapeConfidence_ = other.shapeConfidence_;
      signalColor_ = other.signalColor_;
      colorConfidence_ = other.colorConfidence_;
      width_ = other.width_;
      height_ = other.height_;
      depth_ = other.depth_;
      orientation_ = other.orientation_;
      time_ = other.time_;
      isNormal_ = other.isNormal_;
      is3Dbox_ = other.is3Dbox_;
      isFlashing_ = other.isFlashing_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficLight Clone() {
      return new TrafficLight(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static int IdDefaultValue = 0;

    private int id_;
    /// <summary>
    /// 红绿灯id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "signal_type" field.</summary>
    public const int SignalTypeFieldNumber = 2;
    private readonly static int SignalTypeDefaultValue = 0;

    private int signalType_;
    /// <summary>
    /// 信号灯类型[机动车信号灯，非机动车信号灯，人行道信号灯]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SignalType {
      get { if ((_hasBits0 & 2) != 0) { return signalType_; } else { return SignalTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        signalType_ = value;
      }
    }
    /// <summary>Gets whether the "signal_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSignalType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "signal_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSignalType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "type_confidence" field.</summary>
    public const int TypeConfidenceFieldNumber = 3;
    private readonly static float TypeConfidenceDefaultValue = 0F;

    private float typeConfidence_;
    /// <summary>
    /// 类型置信度，1~100
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TypeConfidence {
      get { if ((_hasBits0 & 4) != 0) { return typeConfidence_; } else { return TypeConfidenceDefaultValue; } }
      set {
        _hasBits0 |= 4;
        typeConfidence_ = value;
      }
    }
    /// <summary>Gets whether the "type_confidence" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTypeConfidence {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "type_confidence" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTypeConfidence() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "signal_shape" field.</summary>
    public const int SignalShapeFieldNumber = 4;
    private readonly static int SignalShapeDefaultValue = 0;

    private int signalShape_;
    /// <summary>
    /// 类型（圆饼，直行、左转、右转、掉头、直行左转、直行右转、允许通行、禁止通行、数字、矩形灯、行人、自行车、无法辨认）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SignalShape {
      get { if ((_hasBits0 & 8) != 0) { return signalShape_; } else { return SignalShapeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        signalShape_ = value;
      }
    }
    /// <summary>Gets whether the "signal_shape" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSignalShape {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "signal_shape" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSignalShape() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "shape_confidence" field.</summary>
    public const int ShapeConfidenceFieldNumber = 5;
    private readonly static float ShapeConfidenceDefaultValue = 0F;

    private float shapeConfidence_;
    /// <summary>
    /// 符号置信度，0~1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ShapeConfidence {
      get { if ((_hasBits0 & 16) != 0) { return shapeConfidence_; } else { return ShapeConfidenceDefaultValue; } }
      set {
        _hasBits0 |= 16;
        shapeConfidence_ = value;
      }
    }
    /// <summary>Gets whether the "shape_confidence" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasShapeConfidence {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "shape_confidence" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShapeConfidence() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "signal_color" field.</summary>
    public const int SignalColorFieldNumber = 6;
    private readonly static int SignalColorDefaultValue = 0;

    private int signalColor_;
    /// <summary>
    /// 颜色（红灯、黄灯、绿灯）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SignalColor {
      get { if ((_hasBits0 & 32) != 0) { return signalColor_; } else { return SignalColorDefaultValue; } }
      set {
        _hasBits0 |= 32;
        signalColor_ = value;
      }
    }
    /// <summary>Gets whether the "signal_color" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSignalColor {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "signal_color" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSignalColor() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "color_confidence" field.</summary>
    public const int ColorConfidenceFieldNumber = 7;
    private readonly static float ColorConfidenceDefaultValue = 0F;

    private float colorConfidence_;
    /// <summary>
    /// 色彩置信度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ColorConfidence {
      get { if ((_hasBits0 & 64) != 0) { return colorConfidence_; } else { return ColorConfidenceDefaultValue; } }
      set {
        _hasBits0 |= 64;
        colorConfidence_ = value;
      }
    }
    /// <summary>Gets whether the "color_confidence" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasColorConfidence {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "color_confidence" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearColorConfidence() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 8;
    private readonly static float WidthDefaultValue = 0F;

    private float width_;
    /// <summary>
    /// 交通灯box的宽
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Width {
      get { if ((_hasBits0 & 128) != 0) { return width_; } else { return WidthDefaultValue; } }
      set {
        _hasBits0 |= 128;
        width_ = value;
      }
    }
    /// <summary>Gets whether the "width" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWidth {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "width" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWidth() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 9;
    private readonly static float HeightDefaultValue = 0F;

    private float height_;
    /// <summary>
    /// 交通灯box的高
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Height {
      get { if ((_hasBits0 & 256) != 0) { return height_; } else { return HeightDefaultValue; } }
      set {
        _hasBits0 |= 256;
        height_ = value;
      }
    }
    /// <summary>Gets whether the "height" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeight {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "height" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeight() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "depth" field.</summary>
    public const int DepthFieldNumber = 10;
    private readonly static float DepthDefaultValue = 0F;

    private float depth_;
    /// <summary>
    /// 交通灯box的深度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Depth {
      get { if ((_hasBits0 & 512) != 0) { return depth_; } else { return DepthDefaultValue; } }
      set {
        _hasBits0 |= 512;
        depth_ = value;
      }
    }
    /// <summary>Gets whether the "depth" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDepth {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "depth" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDepth() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "orientation" field.</summary>
    public const int OrientationFieldNumber = 11;
    private readonly static int OrientationDefaultValue = 0;

    private int orientation_;
    /// <summary>
    /// 交通灯朝向，[0: 正面， 1：后面，2: 侧面， 3：侧前， 4： 侧后]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Orientation {
      get { if ((_hasBits0 & 1024) != 0) { return orientation_; } else { return OrientationDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        orientation_ = value;
      }
    }
    /// <summary>Gets whether the "orientation" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOrientation {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "orientation" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOrientation() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 12;
    private readonly static int TimeDefaultValue = 0;

    private int time_;
    /// <summary>
    /// 红绿灯读秒, [如有则是实际读数，否则，-1]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { if ((_hasBits0 & 2048) != 0) { return time_; } else { return TimeDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        time_ = value;
      }
    }
    /// <summary>Gets whether the "time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTime {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTime() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "is_normal" field.</summary>
    public const int IsNormalFieldNumber = 13;
    private readonly static int IsNormalDefaultValue = 0;

    private int isNormal_;
    /// <summary>
    /// 是否异常, [-1: 不是， 1: 是]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsNormal {
      get { if ((_hasBits0 & 4096) != 0) { return isNormal_; } else { return IsNormalDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        isNormal_ = value;
      }
    }
    /// <summary>Gets whether the "is_normal" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsNormal {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "is_normal" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsNormal() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "is_3dbox" field.</summary>
    public const int Is3DboxFieldNumber = 14;
    private readonly static bool Is3DboxDefaultValue = false;

    private bool is3Dbox_;
    /// <summary>
    /// 是否是3D位置 0：不是 1：是
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Is3Dbox {
      get { if ((_hasBits0 & 8192) != 0) { return is3Dbox_; } else { return Is3DboxDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        is3Dbox_ = value;
      }
    }
    /// <summary>Gets whether the "is_3dbox" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIs3Dbox {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "is_3dbox" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIs3Dbox() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "is_flashing" field.</summary>
    public const int IsFlashingFieldNumber = 15;
    private readonly static int IsFlashingDefaultValue = 0;

    private int isFlashing_;
    /// <summary>
    /// 是否闪烁，[-1: 不是， 1: 是]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsFlashing {
      get { if ((_hasBits0 & 16384) != 0) { return isFlashing_; } else { return IsFlashingDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        isFlashing_ = value;
      }
    }
    /// <summary>Gets whether the "is_flashing" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsFlashing {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "is_flashing" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsFlashing() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 16;
    private global::Xviewer.Point position_;
    /// <summary>
    /// #是3d位置给出自车坐标系下的3d位置(x,y,z） 不是的话给出图像坐标系(u,v,-1)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Point Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrafficLight);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrafficLight other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (SignalType != other.SignalType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TypeConfidence, other.TypeConfidence)) return false;
      if (SignalShape != other.SignalShape) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ShapeConfidence, other.ShapeConfidence)) return false;
      if (SignalColor != other.SignalColor) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ColorConfidence, other.ColorConfidence)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Width, other.Width)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Height, other.Height)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Depth, other.Depth)) return false;
      if (Orientation != other.Orientation) return false;
      if (Time != other.Time) return false;
      if (IsNormal != other.IsNormal) return false;
      if (Is3Dbox != other.Is3Dbox) return false;
      if (IsFlashing != other.IsFlashing) return false;
      if (!object.Equals(Position, other.Position)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasSignalType) hash ^= SignalType.GetHashCode();
      if (HasTypeConfidence) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TypeConfidence);
      if (HasSignalShape) hash ^= SignalShape.GetHashCode();
      if (HasShapeConfidence) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ShapeConfidence);
      if (HasSignalColor) hash ^= SignalColor.GetHashCode();
      if (HasColorConfidence) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ColorConfidence);
      if (HasWidth) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Width);
      if (HasHeight) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Height);
      if (HasDepth) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Depth);
      if (HasOrientation) hash ^= Orientation.GetHashCode();
      if (HasTime) hash ^= Time.GetHashCode();
      if (HasIsNormal) hash ^= IsNormal.GetHashCode();
      if (HasIs3Dbox) hash ^= Is3Dbox.GetHashCode();
      if (HasIsFlashing) hash ^= IsFlashing.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (HasSignalType) {
        output.WriteRawTag(16);
        output.WriteInt32(SignalType);
      }
      if (HasTypeConfidence) {
        output.WriteRawTag(29);
        output.WriteFloat(TypeConfidence);
      }
      if (HasSignalShape) {
        output.WriteRawTag(32);
        output.WriteInt32(SignalShape);
      }
      if (HasShapeConfidence) {
        output.WriteRawTag(45);
        output.WriteFloat(ShapeConfidence);
      }
      if (HasSignalColor) {
        output.WriteRawTag(48);
        output.WriteInt32(SignalColor);
      }
      if (HasColorConfidence) {
        output.WriteRawTag(61);
        output.WriteFloat(ColorConfidence);
      }
      if (HasWidth) {
        output.WriteRawTag(69);
        output.WriteFloat(Width);
      }
      if (HasHeight) {
        output.WriteRawTag(77);
        output.WriteFloat(Height);
      }
      if (HasDepth) {
        output.WriteRawTag(85);
        output.WriteFloat(Depth);
      }
      if (HasOrientation) {
        output.WriteRawTag(88);
        output.WriteInt32(Orientation);
      }
      if (HasTime) {
        output.WriteRawTag(96);
        output.WriteInt32(Time);
      }
      if (HasIsNormal) {
        output.WriteRawTag(104);
        output.WriteInt32(IsNormal);
      }
      if (HasIs3Dbox) {
        output.WriteRawTag(112);
        output.WriteBool(Is3Dbox);
      }
      if (HasIsFlashing) {
        output.WriteRawTag(120);
        output.WriteInt32(IsFlashing);
      }
      if (position_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Position);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (HasSignalType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SignalType);
      }
      if (HasTypeConfidence) {
        size += 1 + 4;
      }
      if (HasSignalShape) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SignalShape);
      }
      if (HasShapeConfidence) {
        size += 1 + 4;
      }
      if (HasSignalColor) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SignalColor);
      }
      if (HasColorConfidence) {
        size += 1 + 4;
      }
      if (HasWidth) {
        size += 1 + 4;
      }
      if (HasHeight) {
        size += 1 + 4;
      }
      if (HasDepth) {
        size += 1 + 4;
      }
      if (HasOrientation) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Orientation);
      }
      if (HasTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (HasIsNormal) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsNormal);
      }
      if (HasIs3Dbox) {
        size += 1 + 1;
      }
      if (HasIsFlashing) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsFlashing);
      }
      if (position_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrafficLight other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasSignalType) {
        SignalType = other.SignalType;
      }
      if (other.HasTypeConfidence) {
        TypeConfidence = other.TypeConfidence;
      }
      if (other.HasSignalShape) {
        SignalShape = other.SignalShape;
      }
      if (other.HasShapeConfidence) {
        ShapeConfidence = other.ShapeConfidence;
      }
      if (other.HasSignalColor) {
        SignalColor = other.SignalColor;
      }
      if (other.HasColorConfidence) {
        ColorConfidence = other.ColorConfidence;
      }
      if (other.HasWidth) {
        Width = other.Width;
      }
      if (other.HasHeight) {
        Height = other.Height;
      }
      if (other.HasDepth) {
        Depth = other.Depth;
      }
      if (other.HasOrientation) {
        Orientation = other.Orientation;
      }
      if (other.HasTime) {
        Time = other.Time;
      }
      if (other.HasIsNormal) {
        IsNormal = other.IsNormal;
      }
      if (other.HasIs3Dbox) {
        Is3Dbox = other.Is3Dbox;
      }
      if (other.HasIsFlashing) {
        IsFlashing = other.IsFlashing;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Xviewer.Point();
        }
        Position.MergeFrom(other.Position);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            SignalType = input.ReadInt32();
            break;
          }
          case 29: {
            TypeConfidence = input.ReadFloat();
            break;
          }
          case 32: {
            SignalShape = input.ReadInt32();
            break;
          }
          case 45: {
            ShapeConfidence = input.ReadFloat();
            break;
          }
          case 48: {
            SignalColor = input.ReadInt32();
            break;
          }
          case 61: {
            ColorConfidence = input.ReadFloat();
            break;
          }
          case 69: {
            Width = input.ReadFloat();
            break;
          }
          case 77: {
            Height = input.ReadFloat();
            break;
          }
          case 85: {
            Depth = input.ReadFloat();
            break;
          }
          case 88: {
            Orientation = input.ReadInt32();
            break;
          }
          case 96: {
            Time = input.ReadInt32();
            break;
          }
          case 104: {
            IsNormal = input.ReadInt32();
            break;
          }
          case 112: {
            Is3Dbox = input.ReadBool();
            break;
          }
          case 120: {
            IsFlashing = input.ReadInt32();
            break;
          }
          case 130: {
            if (position_ == null) {
              Position = new global::Xviewer.Point();
            }
            input.ReadMessage(Position);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TrafficLightInfo : pb::IMessage<TrafficLightInfo> {
    private static readonly pb::MessageParser<TrafficLightInfo> _parser = new pb::MessageParser<TrafficLightInfo>(() => new TrafficLightInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrafficLightInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PerceptionReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficLightInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficLightInfo(TrafficLightInfo other) : this() {
      trafficLightList_ = other.trafficLightList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficLightInfo Clone() {
      return new TrafficLightInfo(this);
    }

    /// <summary>Field number for the "traffic_light_list" field.</summary>
    public const int TrafficLightListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Xviewer.TrafficLight> _repeated_trafficLightList_codec
        = pb::FieldCodec.ForMessage(10, global::Xviewer.TrafficLight.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.TrafficLight> trafficLightList_ = new pbc::RepeatedField<global::Xviewer.TrafficLight>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.TrafficLight> TrafficLightList {
      get { return trafficLightList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrafficLightInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrafficLightInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!trafficLightList_.Equals(other.trafficLightList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= trafficLightList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      trafficLightList_.WriteTo(output, _repeated_trafficLightList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += trafficLightList_.CalculateSize(_repeated_trafficLightList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrafficLightInfo other) {
      if (other == null) {
        return;
      }
      trafficLightList_.Add(other.trafficLightList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            trafficLightList_.AddEntriesFrom(input, _repeated_trafficLightList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class OlmapTrafficLight : pb::IMessage<OlmapTrafficLight> {
    private static readonly pb::MessageParser<OlmapTrafficLight> _parser = new pb::MessageParser<OlmapTrafficLight>(() => new OlmapTrafficLight());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OlmapTrafficLight> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PerceptionReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OlmapTrafficLight() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OlmapTrafficLight(OlmapTrafficLight other) : this() {
      _hasBits0 = other._hasBits0;
      trafficLightType_ = other.trafficLightType_;
      trafficLightPoints_ = other.trafficLightPoints_.Clone();
      trafficLightPointsUtm_ = other.trafficLightPointsUtm_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OlmapTrafficLight Clone() {
      return new OlmapTrafficLight(this);
    }

    /// <summary>Field number for the "traffic_light_type" field.</summary>
    public const int TrafficLightTypeFieldNumber = 1;
    private readonly static uint TrafficLightTypeDefaultValue = 0;

    private uint trafficLightType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TrafficLightType {
      get { if ((_hasBits0 & 1) != 0) { return trafficLightType_; } else { return TrafficLightTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        trafficLightType_ = value;
      }
    }
    /// <summary>Gets whether the "traffic_light_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTrafficLightType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "traffic_light_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTrafficLightType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "traffic_light_points" field.</summary>
    public const int TrafficLightPointsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_trafficLightPoints_codec
        = pb::FieldCodec.ForMessage(18, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> trafficLightPoints_ = new pbc::RepeatedField<global::Xviewer.Point>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> TrafficLightPoints {
      get { return trafficLightPoints_; }
    }

    /// <summary>Field number for the "traffic_light_points_utm" field.</summary>
    public const int TrafficLightPointsUtmFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_trafficLightPointsUtm_codec
        = pb::FieldCodec.ForMessage(26, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> trafficLightPointsUtm_ = new pbc::RepeatedField<global::Xviewer.Point>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> TrafficLightPointsUtm {
      get { return trafficLightPointsUtm_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OlmapTrafficLight);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OlmapTrafficLight other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TrafficLightType != other.TrafficLightType) return false;
      if(!trafficLightPoints_.Equals(other.trafficLightPoints_)) return false;
      if(!trafficLightPointsUtm_.Equals(other.trafficLightPointsUtm_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTrafficLightType) hash ^= TrafficLightType.GetHashCode();
      hash ^= trafficLightPoints_.GetHashCode();
      hash ^= trafficLightPointsUtm_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTrafficLightType) {
        output.WriteRawTag(8);
        output.WriteUInt32(TrafficLightType);
      }
      trafficLightPoints_.WriteTo(output, _repeated_trafficLightPoints_codec);
      trafficLightPointsUtm_.WriteTo(output, _repeated_trafficLightPointsUtm_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTrafficLightType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TrafficLightType);
      }
      size += trafficLightPoints_.CalculateSize(_repeated_trafficLightPoints_codec);
      size += trafficLightPointsUtm_.CalculateSize(_repeated_trafficLightPointsUtm_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OlmapTrafficLight other) {
      if (other == null) {
        return;
      }
      if (other.HasTrafficLightType) {
        TrafficLightType = other.TrafficLightType;
      }
      trafficLightPoints_.Add(other.trafficLightPoints_);
      trafficLightPointsUtm_.Add(other.trafficLightPointsUtm_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TrafficLightType = input.ReadUInt32();
            break;
          }
          case 18: {
            trafficLightPoints_.AddEntriesFrom(input, _repeated_trafficLightPoints_codec);
            break;
          }
          case 26: {
            trafficLightPointsUtm_.AddEntriesFrom(input, _repeated_trafficLightPointsUtm_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GroundElement : pb::IMessage<GroundElement> {
    private static readonly pb::MessageParser<GroundElement> _parser = new pb::MessageParser<GroundElement>(() => new GroundElement());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroundElement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PerceptionReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroundElement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroundElement(GroundElement other) : this() {
      _hasBits0 = other._hasBits0;
      type_ = other.type_;
      points_ = other.points_.Clone();
      pointsUtm_ = other.pointsUtm_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroundElement Clone() {
      return new GroundElement(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static uint TypeDefaultValue = 0;

    private uint type_;
    /// <summary>
    /// 元素类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_points_codec
        = pb::FieldCodec.ForMessage(18, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> points_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// 元素位置 自车坐标系
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> Points {
      get { return points_; }
    }

    /// <summary>Field number for the "points_utm" field.</summary>
    public const int PointsUtmFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_pointsUtm_codec
        = pb::FieldCodec.ForMessage(26, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> pointsUtm_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// 元素位置 utm坐标系
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> PointsUtm {
      get { return pointsUtm_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroundElement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroundElement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if(!points_.Equals(other.points_)) return false;
      if(!pointsUtm_.Equals(other.pointsUtm_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      hash ^= points_.GetHashCode();
      hash ^= pointsUtm_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasType) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      points_.WriteTo(output, _repeated_points_codec);
      pointsUtm_.WriteTo(output, _repeated_pointsUtm_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      size += points_.CalculateSize(_repeated_points_codec);
      size += pointsUtm_.CalculateSize(_repeated_pointsUtm_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroundElement other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      points_.Add(other.points_);
      pointsUtm_.Add(other.pointsUtm_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 18: {
            points_.AddEntriesFrom(input, _repeated_points_codec);
            break;
          }
          case 26: {
            pointsUtm_.AddEntriesFrom(input, _repeated_pointsUtm_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Road : pb::IMessage<Road> {
    private static readonly pb::MessageParser<Road> _parser = new pb::MessageParser<Road>(() => new Road());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Road> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PerceptionReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Road() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Road(Road other) : this() {
      _hasBits0 = other._hasBits0;
      roadId_ = other.roadId_;
      egoLaneId_ = other.egoLaneId_;
      laneLines_ = other.laneLines_.Clone();
      lanes_ = other.lanes_.Clone();
      stopLines_ = other.stopLines_.Clone();
      constructionSections_ = other.constructionSections_.Clone();
      trafficLights_ = other.trafficLights_.Clone();
      groundElements_ = other.groundElements_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Road Clone() {
      return new Road(this);
    }

    /// <summary>Field number for the "road_id" field.</summary>
    public const int RoadIdFieldNumber = 1;
    private readonly static int RoadIdDefaultValue = 0;

    private int roadId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoadId {
      get { if ((_hasBits0 & 1) != 0) { return roadId_; } else { return RoadIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        roadId_ = value;
      }
    }
    /// <summary>Gets whether the "road_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRoadId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "road_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRoadId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "ego_lane_id" field.</summary>
    public const int EgoLaneIdFieldNumber = 2;
    private readonly static int EgoLaneIdDefaultValue = 0;

    private int egoLaneId_;
    /// <summary>
    /// #离自车最近车道的车道ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EgoLaneId {
      get { if ((_hasBits0 & 2) != 0) { return egoLaneId_; } else { return EgoLaneIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        egoLaneId_ = value;
      }
    }
    /// <summary>Gets whether the "ego_lane_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEgoLaneId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "ego_lane_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEgoLaneId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "lane_lines" field.</summary>
    public const int LaneLinesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Xviewer.LaneLine> _repeated_laneLines_codec
        = pb::FieldCodec.ForMessage(26, global::Xviewer.LaneLine.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.LaneLine> laneLines_ = new pbc::RepeatedField<global::Xviewer.LaneLine>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.LaneLine> LaneLines {
      get { return laneLines_; }
    }

    /// <summary>Field number for the "lanes" field.</summary>
    public const int LanesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Xviewer.Lane> _repeated_lanes_codec
        = pb::FieldCodec.ForMessage(34, global::Xviewer.Lane.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Lane> lanes_ = new pbc::RepeatedField<global::Xviewer.Lane>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Lane> Lanes {
      get { return lanes_; }
    }

    /// <summary>Field number for the "stop_lines" field.</summary>
    public const int StopLinesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Xviewer.StopLine> _repeated_stopLines_codec
        = pb::FieldCodec.ForMessage(42, global::Xviewer.StopLine.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.StopLine> stopLines_ = new pbc::RepeatedField<global::Xviewer.StopLine>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.StopLine> StopLines {
      get { return stopLines_; }
    }

    /// <summary>Field number for the "construction_sections" field.</summary>
    public const int ConstructionSectionsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Xviewer.ConstructionSection> _repeated_constructionSections_codec
        = pb::FieldCodec.ForMessage(50, global::Xviewer.ConstructionSection.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.ConstructionSection> constructionSections_ = new pbc::RepeatedField<global::Xviewer.ConstructionSection>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.ConstructionSection> ConstructionSections {
      get { return constructionSections_; }
    }

    /// <summary>Field number for the "traffic_lights" field.</summary>
    public const int TrafficLightsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Xviewer.OlmapTrafficLight> _repeated_trafficLights_codec
        = pb::FieldCodec.ForMessage(58, global::Xviewer.OlmapTrafficLight.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.OlmapTrafficLight> trafficLights_ = new pbc::RepeatedField<global::Xviewer.OlmapTrafficLight>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.OlmapTrafficLight> TrafficLights {
      get { return trafficLights_; }
    }

    /// <summary>Field number for the "ground_elements" field.</summary>
    public const int GroundElementsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Xviewer.GroundElement> _repeated_groundElements_codec
        = pb::FieldCodec.ForMessage(66, global::Xviewer.GroundElement.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.GroundElement> groundElements_ = new pbc::RepeatedField<global::Xviewer.GroundElement>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.GroundElement> GroundElements {
      get { return groundElements_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Road);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Road other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoadId != other.RoadId) return false;
      if (EgoLaneId != other.EgoLaneId) return false;
      if(!laneLines_.Equals(other.laneLines_)) return false;
      if(!lanes_.Equals(other.lanes_)) return false;
      if(!stopLines_.Equals(other.stopLines_)) return false;
      if(!constructionSections_.Equals(other.constructionSections_)) return false;
      if(!trafficLights_.Equals(other.trafficLights_)) return false;
      if(!groundElements_.Equals(other.groundElements_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRoadId) hash ^= RoadId.GetHashCode();
      if (HasEgoLaneId) hash ^= EgoLaneId.GetHashCode();
      hash ^= laneLines_.GetHashCode();
      hash ^= lanes_.GetHashCode();
      hash ^= stopLines_.GetHashCode();
      hash ^= constructionSections_.GetHashCode();
      hash ^= trafficLights_.GetHashCode();
      hash ^= groundElements_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasRoadId) {
        output.WriteRawTag(8);
        output.WriteInt32(RoadId);
      }
      if (HasEgoLaneId) {
        output.WriteRawTag(16);
        output.WriteInt32(EgoLaneId);
      }
      laneLines_.WriteTo(output, _repeated_laneLines_codec);
      lanes_.WriteTo(output, _repeated_lanes_codec);
      stopLines_.WriteTo(output, _repeated_stopLines_codec);
      constructionSections_.WriteTo(output, _repeated_constructionSections_codec);
      trafficLights_.WriteTo(output, _repeated_trafficLights_codec);
      groundElements_.WriteTo(output, _repeated_groundElements_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRoadId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoadId);
      }
      if (HasEgoLaneId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EgoLaneId);
      }
      size += laneLines_.CalculateSize(_repeated_laneLines_codec);
      size += lanes_.CalculateSize(_repeated_lanes_codec);
      size += stopLines_.CalculateSize(_repeated_stopLines_codec);
      size += constructionSections_.CalculateSize(_repeated_constructionSections_codec);
      size += trafficLights_.CalculateSize(_repeated_trafficLights_codec);
      size += groundElements_.CalculateSize(_repeated_groundElements_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Road other) {
      if (other == null) {
        return;
      }
      if (other.HasRoadId) {
        RoadId = other.RoadId;
      }
      if (other.HasEgoLaneId) {
        EgoLaneId = other.EgoLaneId;
      }
      laneLines_.Add(other.laneLines_);
      lanes_.Add(other.lanes_);
      stopLines_.Add(other.stopLines_);
      constructionSections_.Add(other.constructionSections_);
      trafficLights_.Add(other.trafficLights_);
      groundElements_.Add(other.groundElements_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoadId = input.ReadInt32();
            break;
          }
          case 16: {
            EgoLaneId = input.ReadInt32();
            break;
          }
          case 26: {
            laneLines_.AddEntriesFrom(input, _repeated_laneLines_codec);
            break;
          }
          case 34: {
            lanes_.AddEntriesFrom(input, _repeated_lanes_codec);
            break;
          }
          case 42: {
            stopLines_.AddEntriesFrom(input, _repeated_stopLines_codec);
            break;
          }
          case 50: {
            constructionSections_.AddEntriesFrom(input, _repeated_constructionSections_codec);
            break;
          }
          case 58: {
            trafficLights_.AddEntriesFrom(input, _repeated_trafficLights_codec);
            break;
          }
          case 66: {
            groundElements_.AddEntriesFrom(input, _repeated_groundElements_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReferenceLine : pb::IMessage<ReferenceLine> {
    private static readonly pb::MessageParser<ReferenceLine> _parser = new pb::MessageParser<ReferenceLine>(() => new ReferenceLine());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReferenceLine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PerceptionReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReferenceLine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReferenceLine(ReferenceLine other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      wayPoints_ = other.wayPoints_.Clone();
      wayPointsUtm_ = other.wayPointsUtm_.Clone();
      originRoadId_ = other.originRoadId_;
      destinationRoadId_ = other.destinationRoadId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReferenceLine Clone() {
      return new ReferenceLine(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static int IdDefaultValue = 0;

    private int id_;
    /// <summary>
    /// 引导线id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "way_points" field.</summary>
    public const int WayPointsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_wayPoints_codec
        = pb::FieldCodec.ForMessage(18, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> wayPoints_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// 引导线点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> WayPoints {
      get { return wayPoints_; }
    }

    /// <summary>Field number for the "way_points_utm" field.</summary>
    public const int WayPointsUtmFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_wayPointsUtm_codec
        = pb::FieldCodec.ForMessage(26, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> wayPointsUtm_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// 引导线点 utm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> WayPointsUtm {
      get { return wayPointsUtm_; }
    }

    /// <summary>Field number for the "origin_road_id" field.</summary>
    public const int OriginRoadIdFieldNumber = 4;
    private readonly static int OriginRoadIdDefaultValue = 0;

    private int originRoadId_;
    /// <summary>
    /// 引导线起点road id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginRoadId {
      get { if ((_hasBits0 & 2) != 0) { return originRoadId_; } else { return OriginRoadIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        originRoadId_ = value;
      }
    }
    /// <summary>Gets whether the "origin_road_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOriginRoadId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "origin_road_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOriginRoadId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "destination_road_id" field.</summary>
    public const int DestinationRoadIdFieldNumber = 5;
    private readonly static int DestinationRoadIdDefaultValue = 0;

    private int destinationRoadId_;
    /// <summary>
    /// 引导线终点road id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DestinationRoadId {
      get { if ((_hasBits0 & 4) != 0) { return destinationRoadId_; } else { return DestinationRoadIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        destinationRoadId_ = value;
      }
    }
    /// <summary>Gets whether the "destination_road_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDestinationRoadId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "destination_road_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDestinationRoadId() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReferenceLine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReferenceLine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!wayPoints_.Equals(other.wayPoints_)) return false;
      if(!wayPointsUtm_.Equals(other.wayPointsUtm_)) return false;
      if (OriginRoadId != other.OriginRoadId) return false;
      if (DestinationRoadId != other.DestinationRoadId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      hash ^= wayPoints_.GetHashCode();
      hash ^= wayPointsUtm_.GetHashCode();
      if (HasOriginRoadId) hash ^= OriginRoadId.GetHashCode();
      if (HasDestinationRoadId) hash ^= DestinationRoadId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      wayPoints_.WriteTo(output, _repeated_wayPoints_codec);
      wayPointsUtm_.WriteTo(output, _repeated_wayPointsUtm_codec);
      if (HasOriginRoadId) {
        output.WriteRawTag(32);
        output.WriteInt32(OriginRoadId);
      }
      if (HasDestinationRoadId) {
        output.WriteRawTag(40);
        output.WriteInt32(DestinationRoadId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += wayPoints_.CalculateSize(_repeated_wayPoints_codec);
      size += wayPointsUtm_.CalculateSize(_repeated_wayPointsUtm_codec);
      if (HasOriginRoadId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginRoadId);
      }
      if (HasDestinationRoadId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DestinationRoadId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReferenceLine other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      wayPoints_.Add(other.wayPoints_);
      wayPointsUtm_.Add(other.wayPointsUtm_);
      if (other.HasOriginRoadId) {
        OriginRoadId = other.OriginRoadId;
      }
      if (other.HasDestinationRoadId) {
        DestinationRoadId = other.DestinationRoadId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            wayPoints_.AddEntriesFrom(input, _repeated_wayPoints_codec);
            break;
          }
          case 26: {
            wayPointsUtm_.AddEntriesFrom(input, _repeated_wayPointsUtm_codec);
            break;
          }
          case 32: {
            OriginRoadId = input.ReadInt32();
            break;
          }
          case 40: {
            DestinationRoadId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VirtualLane : pb::IMessage<VirtualLane> {
    private static readonly pb::MessageParser<VirtualLane> _parser = new pb::MessageParser<VirtualLane>(() => new VirtualLane());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VirtualLane> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PerceptionReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VirtualLane() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VirtualLane(VirtualLane other) : this() {
      _hasBits0 = other._hasBits0;
      laneId_ = other.laneId_;
      originRoadId_ = other.originRoadId_;
      destinationRoadId_ = other.destinationRoadId_;
      originLaneId_ = other.originLaneId_;
      destinationLaneId_ = other.destinationLaneId_;
      leftLineId_ = other.leftLineId_;
      rightLineId_ = other.rightLineId_;
      laneCenterPoints_ = other.laneCenterPoints_.Clone();
      laneCenterPointsUtm_ = other.laneCenterPointsUtm_.Clone();
      laneAttribute_ = other.laneAttribute_;
      laneWidth_ = other.laneWidth_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VirtualLane Clone() {
      return new VirtualLane(this);
    }

    /// <summary>Field number for the "lane_id" field.</summary>
    public const int LaneIdFieldNumber = 1;
    private readonly static int LaneIdDefaultValue = 0;

    private int laneId_;
    /// <summary>
    /// 虚拟车道id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LaneId {
      get { if ((_hasBits0 & 1) != 0) { return laneId_; } else { return LaneIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        laneId_ = value;
      }
    }
    /// <summary>Gets whether the "lane_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLaneId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "lane_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLaneId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "origin_road_id" field.</summary>
    public const int OriginRoadIdFieldNumber = 2;
    private readonly static int OriginRoadIdDefaultValue = 0;

    private int originRoadId_;
    /// <summary>
    /// 虚拟车道连接起点road id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginRoadId {
      get { if ((_hasBits0 & 2) != 0) { return originRoadId_; } else { return OriginRoadIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        originRoadId_ = value;
      }
    }
    /// <summary>Gets whether the "origin_road_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOriginRoadId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "origin_road_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOriginRoadId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "destination_road_id" field.</summary>
    public const int DestinationRoadIdFieldNumber = 3;
    private readonly static int DestinationRoadIdDefaultValue = 0;

    private int destinationRoadId_;
    /// <summary>
    /// 虚拟车道连接终点road id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DestinationRoadId {
      get { if ((_hasBits0 & 4) != 0) { return destinationRoadId_; } else { return DestinationRoadIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        destinationRoadId_ = value;
      }
    }
    /// <summary>Gets whether the "destination_road_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDestinationRoadId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "destination_road_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDestinationRoadId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "origin_lane_id" field.</summary>
    public const int OriginLaneIdFieldNumber = 4;
    private readonly static int OriginLaneIdDefaultValue = 0;

    private int originLaneId_;
    /// <summary>
    /// 虚拟车道连接起点lane id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginLaneId {
      get { if ((_hasBits0 & 8) != 0) { return originLaneId_; } else { return OriginLaneIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        originLaneId_ = value;
      }
    }
    /// <summary>Gets whether the "origin_lane_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOriginLaneId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "origin_lane_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOriginLaneId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "destination_lane_id" field.</summary>
    public const int DestinationLaneIdFieldNumber = 5;
    private readonly static int DestinationLaneIdDefaultValue = 0;

    private int destinationLaneId_;
    /// <summary>
    /// 虚拟车道连接终点lane id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DestinationLaneId {
      get { if ((_hasBits0 & 16) != 0) { return destinationLaneId_; } else { return DestinationLaneIdDefaultValue; } }
      set {
        _hasBits0 |= 16;
        destinationLaneId_ = value;
      }
    }
    /// <summary>Gets whether the "destination_lane_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDestinationLaneId {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "destination_lane_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDestinationLaneId() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "left_line_id" field.</summary>
    public const int LeftLineIdFieldNumber = 6;
    private readonly static int LeftLineIdDefaultValue = 0;

    private int leftLineId_;
    /// <summary>
    /// 左虚拟车道线id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftLineId {
      get { if ((_hasBits0 & 32) != 0) { return leftLineId_; } else { return LeftLineIdDefaultValue; } }
      set {
        _hasBits0 |= 32;
        leftLineId_ = value;
      }
    }
    /// <summary>Gets whether the "left_line_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeftLineId {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "left_line_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeftLineId() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "right_line_id" field.</summary>
    public const int RightLineIdFieldNumber = 7;
    private readonly static int RightLineIdDefaultValue = 0;

    private int rightLineId_;
    /// <summary>
    /// 右虚拟车道线id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RightLineId {
      get { if ((_hasBits0 & 64) != 0) { return rightLineId_; } else { return RightLineIdDefaultValue; } }
      set {
        _hasBits0 |= 64;
        rightLineId_ = value;
      }
    }
    /// <summary>Gets whether the "right_line_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRightLineId {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "right_line_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRightLineId() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "lane_center_points" field.</summary>
    public const int LaneCenterPointsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_laneCenterPoints_codec
        = pb::FieldCodec.ForMessage(66, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> laneCenterPoints_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// 中心点坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> LaneCenterPoints {
      get { return laneCenterPoints_; }
    }

    /// <summary>Field number for the "lane_center_points_utm" field.</summary>
    public const int LaneCenterPointsUtmFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_laneCenterPointsUtm_codec
        = pb::FieldCodec.ForMessage(74, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> laneCenterPointsUtm_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// 中心点坐标 utm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> LaneCenterPointsUtm {
      get { return laneCenterPointsUtm_; }
    }

    /// <summary>Field number for the "lane_attribute" field.</summary>
    public const int LaneAttributeFieldNumber = 10;
    private readonly static uint LaneAttributeDefaultValue = 0;

    private uint laneAttribute_;
    /// <summary>
    /// 车道导流属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LaneAttribute {
      get { if ((_hasBits0 & 128) != 0) { return laneAttribute_; } else { return LaneAttributeDefaultValue; } }
      set {
        _hasBits0 |= 128;
        laneAttribute_ = value;
      }
    }
    /// <summary>Gets whether the "lane_attribute" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLaneAttribute {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "lane_attribute" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLaneAttribute() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "lane_width" field.</summary>
    public const int LaneWidthFieldNumber = 11;
    private static readonly pb::FieldCodec<float> _repeated_laneWidth_codec
        = pb::FieldCodec.ForFloat(93);
    private readonly pbc::RepeatedField<float> laneWidth_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 车道宽度，数组大小与中心点个数保持一致
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> LaneWidth {
      get { return laneWidth_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VirtualLane);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VirtualLane other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LaneId != other.LaneId) return false;
      if (OriginRoadId != other.OriginRoadId) return false;
      if (DestinationRoadId != other.DestinationRoadId) return false;
      if (OriginLaneId != other.OriginLaneId) return false;
      if (DestinationLaneId != other.DestinationLaneId) return false;
      if (LeftLineId != other.LeftLineId) return false;
      if (RightLineId != other.RightLineId) return false;
      if(!laneCenterPoints_.Equals(other.laneCenterPoints_)) return false;
      if(!laneCenterPointsUtm_.Equals(other.laneCenterPointsUtm_)) return false;
      if (LaneAttribute != other.LaneAttribute) return false;
      if(!laneWidth_.Equals(other.laneWidth_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLaneId) hash ^= LaneId.GetHashCode();
      if (HasOriginRoadId) hash ^= OriginRoadId.GetHashCode();
      if (HasDestinationRoadId) hash ^= DestinationRoadId.GetHashCode();
      if (HasOriginLaneId) hash ^= OriginLaneId.GetHashCode();
      if (HasDestinationLaneId) hash ^= DestinationLaneId.GetHashCode();
      if (HasLeftLineId) hash ^= LeftLineId.GetHashCode();
      if (HasRightLineId) hash ^= RightLineId.GetHashCode();
      hash ^= laneCenterPoints_.GetHashCode();
      hash ^= laneCenterPointsUtm_.GetHashCode();
      if (HasLaneAttribute) hash ^= LaneAttribute.GetHashCode();
      hash ^= laneWidth_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasLaneId) {
        output.WriteRawTag(8);
        output.WriteInt32(LaneId);
      }
      if (HasOriginRoadId) {
        output.WriteRawTag(16);
        output.WriteInt32(OriginRoadId);
      }
      if (HasDestinationRoadId) {
        output.WriteRawTag(24);
        output.WriteInt32(DestinationRoadId);
      }
      if (HasOriginLaneId) {
        output.WriteRawTag(32);
        output.WriteInt32(OriginLaneId);
      }
      if (HasDestinationLaneId) {
        output.WriteRawTag(40);
        output.WriteInt32(DestinationLaneId);
      }
      if (HasLeftLineId) {
        output.WriteRawTag(48);
        output.WriteInt32(LeftLineId);
      }
      if (HasRightLineId) {
        output.WriteRawTag(56);
        output.WriteInt32(RightLineId);
      }
      laneCenterPoints_.WriteTo(output, _repeated_laneCenterPoints_codec);
      laneCenterPointsUtm_.WriteTo(output, _repeated_laneCenterPointsUtm_codec);
      if (HasLaneAttribute) {
        output.WriteRawTag(80);
        output.WriteUInt32(LaneAttribute);
      }
      laneWidth_.WriteTo(output, _repeated_laneWidth_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasLaneId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LaneId);
      }
      if (HasOriginRoadId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginRoadId);
      }
      if (HasDestinationRoadId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DestinationRoadId);
      }
      if (HasOriginLaneId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginLaneId);
      }
      if (HasDestinationLaneId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DestinationLaneId);
      }
      if (HasLeftLineId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftLineId);
      }
      if (HasRightLineId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RightLineId);
      }
      size += laneCenterPoints_.CalculateSize(_repeated_laneCenterPoints_codec);
      size += laneCenterPointsUtm_.CalculateSize(_repeated_laneCenterPointsUtm_codec);
      if (HasLaneAttribute) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LaneAttribute);
      }
      size += laneWidth_.CalculateSize(_repeated_laneWidth_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VirtualLane other) {
      if (other == null) {
        return;
      }
      if (other.HasLaneId) {
        LaneId = other.LaneId;
      }
      if (other.HasOriginRoadId) {
        OriginRoadId = other.OriginRoadId;
      }
      if (other.HasDestinationRoadId) {
        DestinationRoadId = other.DestinationRoadId;
      }
      if (other.HasOriginLaneId) {
        OriginLaneId = other.OriginLaneId;
      }
      if (other.HasDestinationLaneId) {
        DestinationLaneId = other.DestinationLaneId;
      }
      if (other.HasLeftLineId) {
        LeftLineId = other.LeftLineId;
      }
      if (other.HasRightLineId) {
        RightLineId = other.RightLineId;
      }
      laneCenterPoints_.Add(other.laneCenterPoints_);
      laneCenterPointsUtm_.Add(other.laneCenterPointsUtm_);
      if (other.HasLaneAttribute) {
        LaneAttribute = other.LaneAttribute;
      }
      laneWidth_.Add(other.laneWidth_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LaneId = input.ReadInt32();
            break;
          }
          case 16: {
            OriginRoadId = input.ReadInt32();
            break;
          }
          case 24: {
            DestinationRoadId = input.ReadInt32();
            break;
          }
          case 32: {
            OriginLaneId = input.ReadInt32();
            break;
          }
          case 40: {
            DestinationLaneId = input.ReadInt32();
            break;
          }
          case 48: {
            LeftLineId = input.ReadInt32();
            break;
          }
          case 56: {
            RightLineId = input.ReadInt32();
            break;
          }
          case 66: {
            laneCenterPoints_.AddEntriesFrom(input, _repeated_laneCenterPoints_codec);
            break;
          }
          case 74: {
            laneCenterPointsUtm_.AddEntriesFrom(input, _repeated_laneCenterPointsUtm_codec);
            break;
          }
          case 80: {
            LaneAttribute = input.ReadUInt32();
            break;
          }
          case 90:
          case 93: {
            laneWidth_.AddEntriesFrom(input, _repeated_laneWidth_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class VirtualLine : pb::IMessage<VirtualLine> {
    private static readonly pb::MessageParser<VirtualLine> _parser = new pb::MessageParser<VirtualLine>(() => new VirtualLine());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VirtualLine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PerceptionReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VirtualLine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VirtualLine(VirtualLine other) : this() {
      _hasBits0 = other._hasBits0;
      lineId_ = other.lineId_;
      linePoints_ = other.linePoints_.Clone();
      linePointsUtm_ = other.linePointsUtm_.Clone();
      originLineId_ = other.originLineId_;
      destinationLineId_ = other.destinationLineId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VirtualLine Clone() {
      return new VirtualLine(this);
    }

    /// <summary>Field number for the "line_id" field.</summary>
    public const int LineIdFieldNumber = 1;
    private readonly static int LineIdDefaultValue = 0;

    private int lineId_;
    /// <summary>
    /// 虚拟车道线id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LineId {
      get { if ((_hasBits0 & 1) != 0) { return lineId_; } else { return LineIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        lineId_ = value;
      }
    }
    /// <summary>Gets whether the "line_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLineId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "line_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLineId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "line_points" field.</summary>
    public const int LinePointsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_linePoints_codec
        = pb::FieldCodec.ForMessage(18, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> linePoints_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// 车道线点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> LinePoints {
      get { return linePoints_; }
    }

    /// <summary>Field number for the "line_points_utm" field.</summary>
    public const int LinePointsUtmFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_linePointsUtm_codec
        = pb::FieldCodec.ForMessage(26, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> linePointsUtm_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// 车道线点_utm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> LinePointsUtm {
      get { return linePointsUtm_; }
    }

    /// <summary>Field number for the "origin_line_id" field.</summary>
    public const int OriginLineIdFieldNumber = 4;
    private readonly static int OriginLineIdDefaultValue = 0;

    private int originLineId_;
    /// <summary>
    /// 虚拟车道线连接起始line id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginLineId {
      get { if ((_hasBits0 & 2) != 0) { return originLineId_; } else { return OriginLineIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        originLineId_ = value;
      }
    }
    /// <summary>Gets whether the "origin_line_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOriginLineId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "origin_line_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOriginLineId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "destination_line_id" field.</summary>
    public const int DestinationLineIdFieldNumber = 5;
    private readonly static int DestinationLineIdDefaultValue = 0;

    private int destinationLineId_;
    /// <summary>
    /// 虚拟车道线连接目标line id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DestinationLineId {
      get { if ((_hasBits0 & 4) != 0) { return destinationLineId_; } else { return DestinationLineIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        destinationLineId_ = value;
      }
    }
    /// <summary>Gets whether the "destination_line_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDestinationLineId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "destination_line_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDestinationLineId() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VirtualLine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VirtualLine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LineId != other.LineId) return false;
      if(!linePoints_.Equals(other.linePoints_)) return false;
      if(!linePointsUtm_.Equals(other.linePointsUtm_)) return false;
      if (OriginLineId != other.OriginLineId) return false;
      if (DestinationLineId != other.DestinationLineId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLineId) hash ^= LineId.GetHashCode();
      hash ^= linePoints_.GetHashCode();
      hash ^= linePointsUtm_.GetHashCode();
      if (HasOriginLineId) hash ^= OriginLineId.GetHashCode();
      if (HasDestinationLineId) hash ^= DestinationLineId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasLineId) {
        output.WriteRawTag(8);
        output.WriteInt32(LineId);
      }
      linePoints_.WriteTo(output, _repeated_linePoints_codec);
      linePointsUtm_.WriteTo(output, _repeated_linePointsUtm_codec);
      if (HasOriginLineId) {
        output.WriteRawTag(32);
        output.WriteInt32(OriginLineId);
      }
      if (HasDestinationLineId) {
        output.WriteRawTag(40);
        output.WriteInt32(DestinationLineId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasLineId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LineId);
      }
      size += linePoints_.CalculateSize(_repeated_linePoints_codec);
      size += linePointsUtm_.CalculateSize(_repeated_linePointsUtm_codec);
      if (HasOriginLineId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginLineId);
      }
      if (HasDestinationLineId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DestinationLineId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VirtualLine other) {
      if (other == null) {
        return;
      }
      if (other.HasLineId) {
        LineId = other.LineId;
      }
      linePoints_.Add(other.linePoints_);
      linePointsUtm_.Add(other.linePointsUtm_);
      if (other.HasOriginLineId) {
        OriginLineId = other.OriginLineId;
      }
      if (other.HasDestinationLineId) {
        DestinationLineId = other.DestinationLineId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LineId = input.ReadInt32();
            break;
          }
          case 18: {
            linePoints_.AddEntriesFrom(input, _repeated_linePoints_codec);
            break;
          }
          case 26: {
            linePointsUtm_.AddEntriesFrom(input, _repeated_linePointsUtm_codec);
            break;
          }
          case 32: {
            OriginLineId = input.ReadInt32();
            break;
          }
          case 40: {
            DestinationLineId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Intersection : pb::IMessage<Intersection> {
    private static readonly pb::MessageParser<Intersection> _parser = new pb::MessageParser<Intersection>(() => new Intersection());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Intersection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PerceptionReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Intersection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Intersection(Intersection other) : this() {
      _hasBits0 = other._hasBits0;
      intersectionId_ = other.intersectionId_;
      virtualLanes_ = other.virtualLanes_.Clone();
      virtualLines_ = other.virtualLines_.Clone();
      referenceLines_ = other.referenceLines_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Intersection Clone() {
      return new Intersection(this);
    }

    /// <summary>Field number for the "intersection_id" field.</summary>
    public const int IntersectionIdFieldNumber = 1;
    private readonly static int IntersectionIdDefaultValue = 0;

    private int intersectionId_;
    /// <summary>
    /// 路口id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IntersectionId {
      get { if ((_hasBits0 & 1) != 0) { return intersectionId_; } else { return IntersectionIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        intersectionId_ = value;
      }
    }
    /// <summary>Gets whether the "intersection_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIntersectionId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "intersection_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIntersectionId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "virtual_lanes" field.</summary>
    public const int VirtualLanesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xviewer.VirtualLane> _repeated_virtualLanes_codec
        = pb::FieldCodec.ForMessage(18, global::Xviewer.VirtualLane.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.VirtualLane> virtualLanes_ = new pbc::RepeatedField<global::Xviewer.VirtualLane>();
    /// <summary>
    /// 虚拟车道集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.VirtualLane> VirtualLanes {
      get { return virtualLanes_; }
    }

    /// <summary>Field number for the "virtual_lines" field.</summary>
    public const int VirtualLinesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Xviewer.VirtualLine> _repeated_virtualLines_codec
        = pb::FieldCodec.ForMessage(26, global::Xviewer.VirtualLine.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.VirtualLine> virtualLines_ = new pbc::RepeatedField<global::Xviewer.VirtualLine>();
    /// <summary>
    /// 虚拟车道线集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.VirtualLine> VirtualLines {
      get { return virtualLines_; }
    }

    /// <summary>Field number for the "reference_lines" field.</summary>
    public const int ReferenceLinesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Xviewer.ReferenceLine> _repeated_referenceLines_codec
        = pb::FieldCodec.ForMessage(34, global::Xviewer.ReferenceLine.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.ReferenceLine> referenceLines_ = new pbc::RepeatedField<global::Xviewer.ReferenceLine>();
    /// <summary>
    /// 引导线集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.ReferenceLine> ReferenceLines {
      get { return referenceLines_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Intersection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Intersection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IntersectionId != other.IntersectionId) return false;
      if(!virtualLanes_.Equals(other.virtualLanes_)) return false;
      if(!virtualLines_.Equals(other.virtualLines_)) return false;
      if(!referenceLines_.Equals(other.referenceLines_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIntersectionId) hash ^= IntersectionId.GetHashCode();
      hash ^= virtualLanes_.GetHashCode();
      hash ^= virtualLines_.GetHashCode();
      hash ^= referenceLines_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasIntersectionId) {
        output.WriteRawTag(8);
        output.WriteInt32(IntersectionId);
      }
      virtualLanes_.WriteTo(output, _repeated_virtualLanes_codec);
      virtualLines_.WriteTo(output, _repeated_virtualLines_codec);
      referenceLines_.WriteTo(output, _repeated_referenceLines_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasIntersectionId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IntersectionId);
      }
      size += virtualLanes_.CalculateSize(_repeated_virtualLanes_codec);
      size += virtualLines_.CalculateSize(_repeated_virtualLines_codec);
      size += referenceLines_.CalculateSize(_repeated_referenceLines_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Intersection other) {
      if (other == null) {
        return;
      }
      if (other.HasIntersectionId) {
        IntersectionId = other.IntersectionId;
      }
      virtualLanes_.Add(other.virtualLanes_);
      virtualLines_.Add(other.virtualLines_);
      referenceLines_.Add(other.referenceLines_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IntersectionId = input.ReadInt32();
            break;
          }
          case 18: {
            virtualLanes_.AddEntriesFrom(input, _repeated_virtualLanes_codec);
            break;
          }
          case 26: {
            virtualLines_.AddEntriesFrom(input, _repeated_virtualLines_codec);
            break;
          }
          case 34: {
            referenceLines_.AddEntriesFrom(input, _repeated_referenceLines_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Curb : pb::IMessage<Curb> {
    private static readonly pb::MessageParser<Curb> _parser = new pb::MessageParser<Curb>(() => new Curb());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Curb> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PerceptionReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Curb() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Curb(Curb other) : this() {
      _hasBits0 = other._hasBits0;
      curbId_ = other.curbId_;
      typeList_ = other.typeList_.Clone();
      indexList_ = other.indexList_.Clone();
      confidence_ = other.confidence_;
      curbPointsUtm_ = other.curbPointsUtm_.Clone();
      curbPoints_ = other.curbPoints_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Curb Clone() {
      return new Curb(this);
    }

    /// <summary>Field number for the "curb_id" field.</summary>
    public const int CurbIdFieldNumber = 1;
    private readonly static int CurbIdDefaultValue = 0;

    private int curbId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurbId {
      get { if ((_hasBits0 & 1) != 0) { return curbId_; } else { return CurbIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        curbId_ = value;
      }
    }
    /// <summary>Gets whether the "curb_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCurbId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "curb_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCurbId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "type_list" field.</summary>
    public const int TypeListFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_typeList_codec
        = pb::FieldCodec.ForUInt32(16);
    private readonly pbc::RepeatedField<uint> typeList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// curb类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TypeList {
      get { return typeList_; }
    }

    /// <summary>Field number for the "index_list" field.</summary>
    public const int IndexListFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_indexList_codec
        = pb::FieldCodec.ForInt32(24);
    private readonly pbc::RepeatedField<int> indexList_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 一段线如有多个属性，对应不同属性线段之间的切分点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IndexList {
      get { return indexList_; }
    }

    /// <summary>Field number for the "confidence" field.</summary>
    public const int ConfidenceFieldNumber = 4;
    private readonly static float ConfidenceDefaultValue = 0F;

    private float confidence_;
    /// <summary>
    /// 类型置信度，0~100
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Confidence {
      get { if ((_hasBits0 & 2) != 0) { return confidence_; } else { return ConfidenceDefaultValue; } }
      set {
        _hasBits0 |= 2;
        confidence_ = value;
      }
    }
    /// <summary>Gets whether the "confidence" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasConfidence {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "confidence" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConfidence() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "curb_points_utm" field.</summary>
    public const int CurbPointsUtmFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_curbPointsUtm_codec
        = pb::FieldCodec.ForMessage(42, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> curbPointsUtm_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// curb线点列表, utm坐标系下
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> CurbPointsUtm {
      get { return curbPointsUtm_; }
    }

    /// <summary>Field number for the "curb_points" field.</summary>
    public const int CurbPointsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_curbPoints_codec
        = pb::FieldCodec.ForMessage(50, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> curbPoints_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    ///	基于自车坐标系下的多个路牙线点坐标[(x,y,z)]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> CurbPoints {
      get { return curbPoints_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Curb);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Curb other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurbId != other.CurbId) return false;
      if(!typeList_.Equals(other.typeList_)) return false;
      if(!indexList_.Equals(other.indexList_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Confidence, other.Confidence)) return false;
      if(!curbPointsUtm_.Equals(other.curbPointsUtm_)) return false;
      if(!curbPoints_.Equals(other.curbPoints_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCurbId) hash ^= CurbId.GetHashCode();
      hash ^= typeList_.GetHashCode();
      hash ^= indexList_.GetHashCode();
      if (HasConfidence) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Confidence);
      hash ^= curbPointsUtm_.GetHashCode();
      hash ^= curbPoints_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasCurbId) {
        output.WriteRawTag(8);
        output.WriteInt32(CurbId);
      }
      typeList_.WriteTo(output, _repeated_typeList_codec);
      indexList_.WriteTo(output, _repeated_indexList_codec);
      if (HasConfidence) {
        output.WriteRawTag(37);
        output.WriteFloat(Confidence);
      }
      curbPointsUtm_.WriteTo(output, _repeated_curbPointsUtm_codec);
      curbPoints_.WriteTo(output, _repeated_curbPoints_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCurbId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurbId);
      }
      size += typeList_.CalculateSize(_repeated_typeList_codec);
      size += indexList_.CalculateSize(_repeated_indexList_codec);
      if (HasConfidence) {
        size += 1 + 4;
      }
      size += curbPointsUtm_.CalculateSize(_repeated_curbPointsUtm_codec);
      size += curbPoints_.CalculateSize(_repeated_curbPoints_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Curb other) {
      if (other == null) {
        return;
      }
      if (other.HasCurbId) {
        CurbId = other.CurbId;
      }
      typeList_.Add(other.typeList_);
      indexList_.Add(other.indexList_);
      if (other.HasConfidence) {
        Confidence = other.Confidence;
      }
      curbPointsUtm_.Add(other.curbPointsUtm_);
      curbPoints_.Add(other.curbPoints_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CurbId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            typeList_.AddEntriesFrom(input, _repeated_typeList_codec);
            break;
          }
          case 26:
          case 24: {
            indexList_.AddEntriesFrom(input, _repeated_indexList_codec);
            break;
          }
          case 37: {
            Confidence = input.ReadFloat();
            break;
          }
          case 42: {
            curbPointsUtm_.AddEntriesFrom(input, _repeated_curbPointsUtm_codec);
            break;
          }
          case 50: {
            curbPoints_.AddEntriesFrom(input, _repeated_curbPoints_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoadInfo : pb::IMessage<RoadInfo> {
    private static readonly pb::MessageParser<RoadInfo> _parser = new pb::MessageParser<RoadInfo>(() => new RoadInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoadInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PerceptionReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoadInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoadInfo(RoadInfo other) : this() {
      _hasBits0 = other._hasBits0;
      egoRoadId_ = other.egoRoadId_;
      roads_ = other.roads_.Clone();
      intersections_ = other.intersections_.Clone();
      curbs_ = other.curbs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoadInfo Clone() {
      return new RoadInfo(this);
    }

    /// <summary>Field number for the "ego_road_id" field.</summary>
    public const int EgoRoadIdFieldNumber = 1;
    private readonly static int EgoRoadIdDefaultValue = 0;

    private int egoRoadId_;
    /// <summary>
    /// 车辆所处最近的road id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EgoRoadId {
      get { if ((_hasBits0 & 1) != 0) { return egoRoadId_; } else { return EgoRoadIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        egoRoadId_ = value;
      }
    }
    /// <summary>Gets whether the "ego_road_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEgoRoadId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ego_road_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEgoRoadId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "roads" field.</summary>
    public const int RoadsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xviewer.Road> _repeated_roads_codec
        = pb::FieldCodec.ForMessage(18, global::Xviewer.Road.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Road> roads_ = new pbc::RepeatedField<global::Xviewer.Road>();
    /// <summary>
    /// road集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Road> Roads {
      get { return roads_; }
    }

    /// <summary>Field number for the "intersections" field.</summary>
    public const int IntersectionsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Xviewer.Intersection> _repeated_intersections_codec
        = pb::FieldCodec.ForMessage(26, global::Xviewer.Intersection.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Intersection> intersections_ = new pbc::RepeatedField<global::Xviewer.Intersection>();
    /// <summary>
    /// 路口集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Intersection> Intersections {
      get { return intersections_; }
    }

    /// <summary>Field number for the "curbs" field.</summary>
    public const int CurbsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Xviewer.Curb> _repeated_curbs_codec
        = pb::FieldCodec.ForMessage(34, global::Xviewer.Curb.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Curb> curbs_ = new pbc::RepeatedField<global::Xviewer.Curb>();
    /// <summary>
    /// 路牙集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Curb> Curbs {
      get { return curbs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoadInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoadInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EgoRoadId != other.EgoRoadId) return false;
      if(!roads_.Equals(other.roads_)) return false;
      if(!intersections_.Equals(other.intersections_)) return false;
      if(!curbs_.Equals(other.curbs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEgoRoadId) hash ^= EgoRoadId.GetHashCode();
      hash ^= roads_.GetHashCode();
      hash ^= intersections_.GetHashCode();
      hash ^= curbs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasEgoRoadId) {
        output.WriteRawTag(8);
        output.WriteInt32(EgoRoadId);
      }
      roads_.WriteTo(output, _repeated_roads_codec);
      intersections_.WriteTo(output, _repeated_intersections_codec);
      curbs_.WriteTo(output, _repeated_curbs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEgoRoadId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EgoRoadId);
      }
      size += roads_.CalculateSize(_repeated_roads_codec);
      size += intersections_.CalculateSize(_repeated_intersections_codec);
      size += curbs_.CalculateSize(_repeated_curbs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoadInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasEgoRoadId) {
        EgoRoadId = other.EgoRoadId;
      }
      roads_.Add(other.roads_);
      intersections_.Add(other.intersections_);
      curbs_.Add(other.curbs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EgoRoadId = input.ReadInt32();
            break;
          }
          case 18: {
            roads_.AddEntriesFrom(input, _repeated_roads_codec);
            break;
          }
          case 26: {
            intersections_.AddEntriesFrom(input, _repeated_intersections_codec);
            break;
          }
          case 34: {
            curbs_.AddEntriesFrom(input, _repeated_curbs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ------------ 仿真完美感知消息结构 ---------------//
  /// </summary>
  public sealed partial class PerceptionFusionVTD : pb::IMessage<PerceptionFusionVTD> {
    private static readonly pb::MessageParser<PerceptionFusionVTD> _parser = new pb::MessageParser<PerceptionFusionVTD>(() => new PerceptionFusionVTD());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PerceptionFusionVTD> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PerceptionReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PerceptionFusionVTD() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PerceptionFusionVTD(PerceptionFusionVTD other) : this() {
      roadInfo_ = other.roadInfo_ != null ? other.roadInfo_.Clone() : null;
      objectInfo_ = other.objectInfo_ != null ? other.objectInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PerceptionFusionVTD Clone() {
      return new PerceptionFusionVTD(this);
    }

    /// <summary>Field number for the "road_info" field.</summary>
    public const int RoadInfoFieldNumber = 1;
    private global::Xviewer.RoadInfo roadInfo_;
    /// <summary>
    /// 车道线/车道集合信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.RoadInfo RoadInfo {
      get { return roadInfo_; }
      set {
        roadInfo_ = value;
      }
    }

    /// <summary>Field number for the "object_info" field.</summary>
    public const int ObjectInfoFieldNumber = 2;
    private global::Xviewer.ObjectInfo objectInfo_;
    /// <summary>
    /// 目标信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.ObjectInfo ObjectInfo {
      get { return objectInfo_; }
      set {
        objectInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PerceptionFusionVTD);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PerceptionFusionVTD other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoadInfo, other.RoadInfo)) return false;
      if (!object.Equals(ObjectInfo, other.ObjectInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roadInfo_ != null) hash ^= RoadInfo.GetHashCode();
      if (objectInfo_ != null) hash ^= ObjectInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roadInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoadInfo);
      }
      if (objectInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ObjectInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roadInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoadInfo);
      }
      if (objectInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObjectInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PerceptionFusionVTD other) {
      if (other == null) {
        return;
      }
      if (other.roadInfo_ != null) {
        if (roadInfo_ == null) {
          RoadInfo = new global::Xviewer.RoadInfo();
        }
        RoadInfo.MergeFrom(other.RoadInfo);
      }
      if (other.objectInfo_ != null) {
        if (objectInfo_ == null) {
          ObjectInfo = new global::Xviewer.ObjectInfo();
        }
        ObjectInfo.MergeFrom(other.ObjectInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roadInfo_ == null) {
              RoadInfo = new global::Xviewer.RoadInfo();
            }
            input.ReadMessage(RoadInfo);
            break;
          }
          case 18: {
            if (objectInfo_ == null) {
              ObjectInfo = new global::Xviewer.ObjectInfo();
            }
            input.ReadMessage(ObjectInfo);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PerceptionFusion : pb::IMessage<PerceptionFusion> {
    private static readonly pb::MessageParser<PerceptionFusion> _parser = new pb::MessageParser<PerceptionFusion>(() => new PerceptionFusion());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PerceptionFusion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PerceptionReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PerceptionFusion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PerceptionFusion(PerceptionFusion other) : this() {
      rtkInfo_ = other.rtkInfo_ != null ? other.rtkInfo_.Clone() : null;
      roadInfo_ = other.roadInfo_ != null ? other.roadInfo_.Clone() : null;
      objectInfo_ = other.objectInfo_ != null ? other.objectInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PerceptionFusion Clone() {
      return new PerceptionFusion(this);
    }

    /// <summary>Field number for the "rtk_info" field.</summary>
    public const int RtkInfoFieldNumber = 1;
    private global::Xviewer.Localization rtkInfo_;
    /// <summary>
    /// 匹配的rtk定位信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Localization RtkInfo {
      get { return rtkInfo_; }
      set {
        rtkInfo_ = value;
      }
    }

    /// <summary>Field number for the "road_info" field.</summary>
    public const int RoadInfoFieldNumber = 2;
    private global::Xviewer.RoadInfo roadInfo_;
    /// <summary>
    /// 车道线/车道集合信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.RoadInfo RoadInfo {
      get { return roadInfo_; }
      set {
        roadInfo_ = value;
      }
    }

    /// <summary>Field number for the "object_info" field.</summary>
    public const int ObjectInfoFieldNumber = 3;
    private global::Xviewer.ObjectInfo objectInfo_;
    /// <summary>
    /// 目标信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.ObjectInfo ObjectInfo {
      get { return objectInfo_; }
      set {
        objectInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PerceptionFusion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PerceptionFusion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RtkInfo, other.RtkInfo)) return false;
      if (!object.Equals(RoadInfo, other.RoadInfo)) return false;
      if (!object.Equals(ObjectInfo, other.ObjectInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rtkInfo_ != null) hash ^= RtkInfo.GetHashCode();
      if (roadInfo_ != null) hash ^= RoadInfo.GetHashCode();
      if (objectInfo_ != null) hash ^= ObjectInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rtkInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RtkInfo);
      }
      if (roadInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RoadInfo);
      }
      if (objectInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ObjectInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rtkInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RtkInfo);
      }
      if (roadInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoadInfo);
      }
      if (objectInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObjectInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PerceptionFusion other) {
      if (other == null) {
        return;
      }
      if (other.rtkInfo_ != null) {
        if (rtkInfo_ == null) {
          RtkInfo = new global::Xviewer.Localization();
        }
        RtkInfo.MergeFrom(other.RtkInfo);
      }
      if (other.roadInfo_ != null) {
        if (roadInfo_ == null) {
          RoadInfo = new global::Xviewer.RoadInfo();
        }
        RoadInfo.MergeFrom(other.RoadInfo);
      }
      if (other.objectInfo_ != null) {
        if (objectInfo_ == null) {
          ObjectInfo = new global::Xviewer.ObjectInfo();
        }
        ObjectInfo.MergeFrom(other.ObjectInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (rtkInfo_ == null) {
              RtkInfo = new global::Xviewer.Localization();
            }
            input.ReadMessage(RtkInfo);
            break;
          }
          case 18: {
            if (roadInfo_ == null) {
              RoadInfo = new global::Xviewer.RoadInfo();
            }
            input.ReadMessage(RoadInfo);
            break;
          }
          case 26: {
            if (objectInfo_ == null) {
              ObjectInfo = new global::Xviewer.ObjectInfo();
            }
            input.ReadMessage(ObjectInfo);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TrackBox : pb::IMessage<TrackBox> {
    private static readonly pb::MessageParser<TrackBox> _parser = new pb::MessageParser<TrackBox>(() => new TrackBox());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrackBox> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PerceptionReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackBox() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackBox(TrackBox other) : this() {
      _hasBits0 = other._hasBits0;
      trackId_ = other.trackId_;
      classLabel_ = other.classLabel_;
      confidence_ = other.confidence_;
      trackQuality_ = other.trackQuality_;
      timeLastSeen_ = other.timeLastSeen_ != null ? other.timeLastSeen_.Clone() : null;
      timeCreation_ = other.timeCreation_ != null ? other.timeCreation_.Clone() : null;
      objectAge_ = other.objectAge_ != null ? other.objectAge_.Clone() : null;
      cx_ = other.cx_;
      cy_ = other.cy_;
      cz_ = other.cz_;
      w_ = other.w_;
      l_ = other.l_;
      h_ = other.h_;
      yaw_ = other.yaw_;
      velocity_ = other.velocity_.Clone();
      objectAccel_ = other.objectAccel_.Clone();
      omega_ = other.omega_.Clone();
      omegaAccel_ = other.omegaAccel_.Clone();
      cxGlobal_ = other.cxGlobal_;
      cyGlobal_ = other.cyGlobal_;
      czGlobal_ = other.czGlobal_;
      yawGlobal_ = other.yawGlobal_;
      velocityGlobal_ = other.velocityGlobal_.Clone();
      objectAccelGlobal_ = other.objectAccelGlobal_.Clone();
      omegaGlobal_ = other.omegaGlobal_.Clone();
      omegaAccelGlobal_ = other.omegaAccelGlobal_.Clone();
      motionState_ = other.motionState_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackBox Clone() {
      return new TrackBox(this);
    }

    /// <summary>Field number for the "track_id" field.</summary>
    public const int TrackIdFieldNumber = 1;
    private readonly static int TrackIdDefaultValue = 0;

    private int trackId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TrackId {
      get { if ((_hasBits0 & 1) != 0) { return trackId_; } else { return TrackIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        trackId_ = value;
      }
    }
    /// <summary>Gets whether the "track_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTrackId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "track_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTrackId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "class_label" field.</summary>
    public const int ClassLabelFieldNumber = 2;
    private readonly static int ClassLabelDefaultValue = 0;

    private int classLabel_;
    /// <summary>
    /// 0 unknown，1 animal，2 car，3 bicycle，4 pedestrian，5 barrier，6 traffic_cone，7 limiting_stopper, 8 parking_lock
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClassLabel {
      get { if ((_hasBits0 & 2) != 0) { return classLabel_; } else { return ClassLabelDefaultValue; } }
      set {
        _hasBits0 |= 2;
        classLabel_ = value;
      }
    }
    /// <summary>Gets whether the "class_label" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClassLabel {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "class_label" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClassLabel() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "confidence" field.</summary>
    public const int ConfidenceFieldNumber = 3;
    private readonly static float ConfidenceDefaultValue = 0F;

    private float confidence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Confidence {
      get { if ((_hasBits0 & 4) != 0) { return confidence_; } else { return ConfidenceDefaultValue; } }
      set {
        _hasBits0 |= 4;
        confidence_ = value;
      }
    }
    /// <summary>Gets whether the "confidence" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasConfidence {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "confidence" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConfidence() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "track_quality" field.</summary>
    public const int TrackQualityFieldNumber = 4;
    private readonly static float TrackQualityDefaultValue = 0F;

    private float trackQuality_;
    /// <summary>
    /// 跟踪质量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TrackQuality {
      get { if ((_hasBits0 & 8) != 0) { return trackQuality_; } else { return TrackQualityDefaultValue; } }
      set {
        _hasBits0 |= 8;
        trackQuality_ = value;
      }
    }
    /// <summary>Gets whether the "track_quality" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTrackQuality {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "track_quality" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTrackQuality() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "time_last_seen" field.</summary>
    public const int TimeLastSeenFieldNumber = 5;
    private global::Xviewer.Time timeLastSeen_;
    /// <summary>
    /// 目标上次更新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Time TimeLastSeen {
      get { return timeLastSeen_; }
      set {
        timeLastSeen_ = value;
      }
    }

    /// <summary>Field number for the "time_creation" field.</summary>
    public const int TimeCreationFieldNumber = 6;
    private global::Xviewer.Time timeCreation_;
    /// <summary>
    /// 目标创建时刻
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Time TimeCreation {
      get { return timeCreation_; }
      set {
        timeCreation_ = value;
      }
    }

    /// <summary>Field number for the "object_age" field.</summary>
    public const int ObjectAgeFieldNumber = 7;
    private global::Xviewer.Time objectAge_;
    /// <summary>
    /// 目标被跟踪的时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Time ObjectAge {
      get { return objectAge_; }
      set {
        objectAge_ = value;
      }
    }

    /// <summary>Field number for the "cx" field.</summary>
    public const int CxFieldNumber = 8;
    private readonly static float CxDefaultValue = 0F;

    private float cx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Cx {
      get { if ((_hasBits0 & 16) != 0) { return cx_; } else { return CxDefaultValue; } }
      set {
        _hasBits0 |= 16;
        cx_ = value;
      }
    }
    /// <summary>Gets whether the "cx" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCx {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "cx" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCx() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "cy" field.</summary>
    public const int CyFieldNumber = 9;
    private readonly static float CyDefaultValue = 0F;

    private float cy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Cy {
      get { if ((_hasBits0 & 32) != 0) { return cy_; } else { return CyDefaultValue; } }
      set {
        _hasBits0 |= 32;
        cy_ = value;
      }
    }
    /// <summary>Gets whether the "cy" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCy {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "cy" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCy() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "cz" field.</summary>
    public const int CzFieldNumber = 10;
    private readonly static float CzDefaultValue = 0F;

    private float cz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Cz {
      get { if ((_hasBits0 & 64) != 0) { return cz_; } else { return CzDefaultValue; } }
      set {
        _hasBits0 |= 64;
        cz_ = value;
      }
    }
    /// <summary>Gets whether the "cz" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCz {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "cz" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCz() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 11;
    private readonly static float WDefaultValue = 0F;

    private float w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float W {
      get { if ((_hasBits0 & 128) != 0) { return w_; } else { return WDefaultValue; } }
      set {
        _hasBits0 |= 128;
        w_ = value;
      }
    }
    /// <summary>Gets whether the "w" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasW {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "w" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearW() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "l" field.</summary>
    public const int LFieldNumber = 12;
    private readonly static float LDefaultValue = 0F;

    private float l_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float L {
      get { if ((_hasBits0 & 256) != 0) { return l_; } else { return LDefaultValue; } }
      set {
        _hasBits0 |= 256;
        l_ = value;
      }
    }
    /// <summary>Gets whether the "l" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasL {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "l" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearL() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "h" field.</summary>
    public const int HFieldNumber = 13;
    private readonly static float HDefaultValue = 0F;

    private float h_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float H {
      get { if ((_hasBits0 & 512) != 0) { return h_; } else { return HDefaultValue; } }
      set {
        _hasBits0 |= 512;
        h_ = value;
      }
    }
    /// <summary>Gets whether the "h" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasH {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "h" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearH() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "yaw" field.</summary>
    public const int YawFieldNumber = 14;
    private readonly static float YawDefaultValue = 0F;

    private float yaw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Yaw {
      get { if ((_hasBits0 & 1024) != 0) { return yaw_; } else { return YawDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        yaw_ = value;
      }
    }
    /// <summary>Gets whether the "yaw" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasYaw {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "yaw" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearYaw() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "velocity" field.</summary>
    public const int VelocityFieldNumber = 15;
    private static readonly pb::FieldCodec<float> _repeated_velocity_codec
        = pb::FieldCodec.ForFloat(125);
    private readonly pbc::RepeatedField<float> velocity_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 目标速度相对自车坐标系 (vx,vy,vz) vz如果没有检测出来，默认为0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Velocity {
      get { return velocity_; }
    }

    /// <summary>Field number for the "object_accel" field.</summary>
    public const int ObjectAccelFieldNumber = 16;
    private static readonly pb::FieldCodec<float> _repeated_objectAccel_codec
        = pb::FieldCodec.ForFloat(133);
    private readonly pbc::RepeatedField<float> objectAccel_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 目标加速度相对自车坐标系 (mx,my,mz)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> ObjectAccel {
      get { return objectAccel_; }
    }

    /// <summary>Field number for the "omega" field.</summary>
    public const int OmegaFieldNumber = 17;
    private static readonly pb::FieldCodec<float> _repeated_omega_codec
        = pb::FieldCodec.ForFloat(141);
    private readonly pbc::RepeatedField<float> omega_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 车辆坐标系下角速度,rad/s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Omega {
      get { return omega_; }
    }

    /// <summary>Field number for the "omega_accel" field.</summary>
    public const int OmegaAccelFieldNumber = 18;
    private static readonly pb::FieldCodec<float> _repeated_omegaAccel_codec
        = pb::FieldCodec.ForFloat(149);
    private readonly pbc::RepeatedField<float> omegaAccel_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 车辆坐标系下角加速度,rad/s2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> OmegaAccel {
      get { return omegaAccel_; }
    }

    /// <summary>Field number for the "cx_global" field.</summary>
    public const int CxGlobalFieldNumber = 19;
    private readonly static float CxGlobalDefaultValue = 0F;

    private float cxGlobal_;
    /// <summary>
    /// 全局坐标系下坐标 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CxGlobal {
      get { if ((_hasBits0 & 2048) != 0) { return cxGlobal_; } else { return CxGlobalDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        cxGlobal_ = value;
      }
    }
    /// <summary>Gets whether the "cx_global" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCxGlobal {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "cx_global" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCxGlobal() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "cy_global" field.</summary>
    public const int CyGlobalFieldNumber = 20;
    private readonly static float CyGlobalDefaultValue = 0F;

    private float cyGlobal_;
    /// <summary>
    /// 全局坐标系下坐标 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CyGlobal {
      get { if ((_hasBits0 & 4096) != 0) { return cyGlobal_; } else { return CyGlobalDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        cyGlobal_ = value;
      }
    }
    /// <summary>Gets whether the "cy_global" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCyGlobal {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "cy_global" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCyGlobal() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "cz_global" field.</summary>
    public const int CzGlobalFieldNumber = 21;
    private readonly static float CzGlobalDefaultValue = 0F;

    private float czGlobal_;
    /// <summary>
    /// 全局坐标系下坐标 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CzGlobal {
      get { if ((_hasBits0 & 8192) != 0) { return czGlobal_; } else { return CzGlobalDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        czGlobal_ = value;
      }
    }
    /// <summary>Gets whether the "cz_global" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCzGlobal {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "cz_global" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCzGlobal() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "yaw_global" field.</summary>
    public const int YawGlobalFieldNumber = 22;
    private readonly static float YawGlobalDefaultValue = 0F;

    private float yawGlobal_;
    /// <summary>
    /// 全局坐标系下角度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float YawGlobal {
      get { if ((_hasBits0 & 16384) != 0) { return yawGlobal_; } else { return YawGlobalDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        yawGlobal_ = value;
      }
    }
    /// <summary>Gets whether the "yaw_global" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasYawGlobal {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "yaw_global" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearYawGlobal() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "velocity_global" field.</summary>
    public const int VelocityGlobalFieldNumber = 23;
    private static readonly pb::FieldCodec<float> _repeated_velocityGlobal_codec
        = pb::FieldCodec.ForFloat(189);
    private readonly pbc::RepeatedField<float> velocityGlobal_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 目标速度相对全局标系 (vx,vy,vz) vz如果没有检测出来，默认为0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> VelocityGlobal {
      get { return velocityGlobal_; }
    }

    /// <summary>Field number for the "object_accel_global" field.</summary>
    public const int ObjectAccelGlobalFieldNumber = 24;
    private static readonly pb::FieldCodec<float> _repeated_objectAccelGlobal_codec
        = pb::FieldCodec.ForFloat(197);
    private readonly pbc::RepeatedField<float> objectAccelGlobal_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 目标加速度相对全局坐标系 (mx,my,mz)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> ObjectAccelGlobal {
      get { return objectAccelGlobal_; }
    }

    /// <summary>Field number for the "omega_global" field.</summary>
    public const int OmegaGlobalFieldNumber = 25;
    private static readonly pb::FieldCodec<float> _repeated_omegaGlobal_codec
        = pb::FieldCodec.ForFloat(205);
    private readonly pbc::RepeatedField<float> omegaGlobal_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 全局坐标系下角速度,rad/s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> OmegaGlobal {
      get { return omegaGlobal_; }
    }

    /// <summary>Field number for the "omega_accel_global" field.</summary>
    public const int OmegaAccelGlobalFieldNumber = 26;
    private static readonly pb::FieldCodec<float> _repeated_omegaAccelGlobal_codec
        = pb::FieldCodec.ForFloat(213);
    private readonly pbc::RepeatedField<float> omegaAccelGlobal_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 全局坐标系下角加速度,rad/s24 track_id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> OmegaAccelGlobal {
      get { return omegaAccelGlobal_; }
    }

    /// <summary>Field number for the "motion_state" field.</summary>
    public const int MotionStateFieldNumber = 27;
    private readonly static int MotionStateDefaultValue = 0;

    private int motionState_;
    /// <summary>
    /// 运动状态， 0-静态目标静止状态  1-动态目标静止状态  2-动态目标运动状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MotionState {
      get { if ((_hasBits0 & 32768) != 0) { return motionState_; } else { return MotionStateDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        motionState_ = value;
      }
    }
    /// <summary>Gets whether the "motion_state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMotionState {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "motion_state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMotionState() {
      _hasBits0 &= ~32768;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrackBox);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrackBox other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TrackId != other.TrackId) return false;
      if (ClassLabel != other.ClassLabel) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Confidence, other.Confidence)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrackQuality, other.TrackQuality)) return false;
      if (!object.Equals(TimeLastSeen, other.TimeLastSeen)) return false;
      if (!object.Equals(TimeCreation, other.TimeCreation)) return false;
      if (!object.Equals(ObjectAge, other.ObjectAge)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Cx, other.Cx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Cy, other.Cy)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Cz, other.Cz)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(W, other.W)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(L, other.L)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(H, other.H)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Yaw, other.Yaw)) return false;
      if(!velocity_.Equals(other.velocity_)) return false;
      if(!objectAccel_.Equals(other.objectAccel_)) return false;
      if(!omega_.Equals(other.omega_)) return false;
      if(!omegaAccel_.Equals(other.omegaAccel_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CxGlobal, other.CxGlobal)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CyGlobal, other.CyGlobal)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CzGlobal, other.CzGlobal)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(YawGlobal, other.YawGlobal)) return false;
      if(!velocityGlobal_.Equals(other.velocityGlobal_)) return false;
      if(!objectAccelGlobal_.Equals(other.objectAccelGlobal_)) return false;
      if(!omegaGlobal_.Equals(other.omegaGlobal_)) return false;
      if(!omegaAccelGlobal_.Equals(other.omegaAccelGlobal_)) return false;
      if (MotionState != other.MotionState) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTrackId) hash ^= TrackId.GetHashCode();
      if (HasClassLabel) hash ^= ClassLabel.GetHashCode();
      if (HasConfidence) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Confidence);
      if (HasTrackQuality) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrackQuality);
      if (timeLastSeen_ != null) hash ^= TimeLastSeen.GetHashCode();
      if (timeCreation_ != null) hash ^= TimeCreation.GetHashCode();
      if (objectAge_ != null) hash ^= ObjectAge.GetHashCode();
      if (HasCx) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Cx);
      if (HasCy) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Cy);
      if (HasCz) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Cz);
      if (HasW) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(W);
      if (HasL) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(L);
      if (HasH) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(H);
      if (HasYaw) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Yaw);
      hash ^= velocity_.GetHashCode();
      hash ^= objectAccel_.GetHashCode();
      hash ^= omega_.GetHashCode();
      hash ^= omegaAccel_.GetHashCode();
      if (HasCxGlobal) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CxGlobal);
      if (HasCyGlobal) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CyGlobal);
      if (HasCzGlobal) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CzGlobal);
      if (HasYawGlobal) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(YawGlobal);
      hash ^= velocityGlobal_.GetHashCode();
      hash ^= objectAccelGlobal_.GetHashCode();
      hash ^= omegaGlobal_.GetHashCode();
      hash ^= omegaAccelGlobal_.GetHashCode();
      if (HasMotionState) hash ^= MotionState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTrackId) {
        output.WriteRawTag(8);
        output.WriteInt32(TrackId);
      }
      if (HasClassLabel) {
        output.WriteRawTag(16);
        output.WriteInt32(ClassLabel);
      }
      if (HasConfidence) {
        output.WriteRawTag(29);
        output.WriteFloat(Confidence);
      }
      if (HasTrackQuality) {
        output.WriteRawTag(37);
        output.WriteFloat(TrackQuality);
      }
      if (timeLastSeen_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TimeLastSeen);
      }
      if (timeCreation_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TimeCreation);
      }
      if (objectAge_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ObjectAge);
      }
      if (HasCx) {
        output.WriteRawTag(69);
        output.WriteFloat(Cx);
      }
      if (HasCy) {
        output.WriteRawTag(77);
        output.WriteFloat(Cy);
      }
      if (HasCz) {
        output.WriteRawTag(85);
        output.WriteFloat(Cz);
      }
      if (HasW) {
        output.WriteRawTag(93);
        output.WriteFloat(W);
      }
      if (HasL) {
        output.WriteRawTag(101);
        output.WriteFloat(L);
      }
      if (HasH) {
        output.WriteRawTag(109);
        output.WriteFloat(H);
      }
      if (HasYaw) {
        output.WriteRawTag(117);
        output.WriteFloat(Yaw);
      }
      velocity_.WriteTo(output, _repeated_velocity_codec);
      objectAccel_.WriteTo(output, _repeated_objectAccel_codec);
      omega_.WriteTo(output, _repeated_omega_codec);
      omegaAccel_.WriteTo(output, _repeated_omegaAccel_codec);
      if (HasCxGlobal) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(CxGlobal);
      }
      if (HasCyGlobal) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(CyGlobal);
      }
      if (HasCzGlobal) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(CzGlobal);
      }
      if (HasYawGlobal) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(YawGlobal);
      }
      velocityGlobal_.WriteTo(output, _repeated_velocityGlobal_codec);
      objectAccelGlobal_.WriteTo(output, _repeated_objectAccelGlobal_codec);
      omegaGlobal_.WriteTo(output, _repeated_omegaGlobal_codec);
      omegaAccelGlobal_.WriteTo(output, _repeated_omegaAccelGlobal_codec);
      if (HasMotionState) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(MotionState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTrackId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrackId);
      }
      if (HasClassLabel) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClassLabel);
      }
      if (HasConfidence) {
        size += 1 + 4;
      }
      if (HasTrackQuality) {
        size += 1 + 4;
      }
      if (timeLastSeen_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeLastSeen);
      }
      if (timeCreation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeCreation);
      }
      if (objectAge_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObjectAge);
      }
      if (HasCx) {
        size += 1 + 4;
      }
      if (HasCy) {
        size += 1 + 4;
      }
      if (HasCz) {
        size += 1 + 4;
      }
      if (HasW) {
        size += 1 + 4;
      }
      if (HasL) {
        size += 1 + 4;
      }
      if (HasH) {
        size += 1 + 4;
      }
      if (HasYaw) {
        size += 1 + 4;
      }
      size += velocity_.CalculateSize(_repeated_velocity_codec);
      size += objectAccel_.CalculateSize(_repeated_objectAccel_codec);
      size += omega_.CalculateSize(_repeated_omega_codec);
      size += omegaAccel_.CalculateSize(_repeated_omegaAccel_codec);
      if (HasCxGlobal) {
        size += 2 + 4;
      }
      if (HasCyGlobal) {
        size += 2 + 4;
      }
      if (HasCzGlobal) {
        size += 2 + 4;
      }
      if (HasYawGlobal) {
        size += 2 + 4;
      }
      size += velocityGlobal_.CalculateSize(_repeated_velocityGlobal_codec);
      size += objectAccelGlobal_.CalculateSize(_repeated_objectAccelGlobal_codec);
      size += omegaGlobal_.CalculateSize(_repeated_omegaGlobal_codec);
      size += omegaAccelGlobal_.CalculateSize(_repeated_omegaAccelGlobal_codec);
      if (HasMotionState) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MotionState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrackBox other) {
      if (other == null) {
        return;
      }
      if (other.HasTrackId) {
        TrackId = other.TrackId;
      }
      if (other.HasClassLabel) {
        ClassLabel = other.ClassLabel;
      }
      if (other.HasConfidence) {
        Confidence = other.Confidence;
      }
      if (other.HasTrackQuality) {
        TrackQuality = other.TrackQuality;
      }
      if (other.timeLastSeen_ != null) {
        if (timeLastSeen_ == null) {
          TimeLastSeen = new global::Xviewer.Time();
        }
        TimeLastSeen.MergeFrom(other.TimeLastSeen);
      }
      if (other.timeCreation_ != null) {
        if (timeCreation_ == null) {
          TimeCreation = new global::Xviewer.Time();
        }
        TimeCreation.MergeFrom(other.TimeCreation);
      }
      if (other.objectAge_ != null) {
        if (objectAge_ == null) {
          ObjectAge = new global::Xviewer.Time();
        }
        ObjectAge.MergeFrom(other.ObjectAge);
      }
      if (other.HasCx) {
        Cx = other.Cx;
      }
      if (other.HasCy) {
        Cy = other.Cy;
      }
      if (other.HasCz) {
        Cz = other.Cz;
      }
      if (other.HasW) {
        W = other.W;
      }
      if (other.HasL) {
        L = other.L;
      }
      if (other.HasH) {
        H = other.H;
      }
      if (other.HasYaw) {
        Yaw = other.Yaw;
      }
      velocity_.Add(other.velocity_);
      objectAccel_.Add(other.objectAccel_);
      omega_.Add(other.omega_);
      omegaAccel_.Add(other.omegaAccel_);
      if (other.HasCxGlobal) {
        CxGlobal = other.CxGlobal;
      }
      if (other.HasCyGlobal) {
        CyGlobal = other.CyGlobal;
      }
      if (other.HasCzGlobal) {
        CzGlobal = other.CzGlobal;
      }
      if (other.HasYawGlobal) {
        YawGlobal = other.YawGlobal;
      }
      velocityGlobal_.Add(other.velocityGlobal_);
      objectAccelGlobal_.Add(other.objectAccelGlobal_);
      omegaGlobal_.Add(other.omegaGlobal_);
      omegaAccelGlobal_.Add(other.omegaAccelGlobal_);
      if (other.HasMotionState) {
        MotionState = other.MotionState;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TrackId = input.ReadInt32();
            break;
          }
          case 16: {
            ClassLabel = input.ReadInt32();
            break;
          }
          case 29: {
            Confidence = input.ReadFloat();
            break;
          }
          case 37: {
            TrackQuality = input.ReadFloat();
            break;
          }
          case 42: {
            if (timeLastSeen_ == null) {
              TimeLastSeen = new global::Xviewer.Time();
            }
            input.ReadMessage(TimeLastSeen);
            break;
          }
          case 50: {
            if (timeCreation_ == null) {
              TimeCreation = new global::Xviewer.Time();
            }
            input.ReadMessage(TimeCreation);
            break;
          }
          case 58: {
            if (objectAge_ == null) {
              ObjectAge = new global::Xviewer.Time();
            }
            input.ReadMessage(ObjectAge);
            break;
          }
          case 69: {
            Cx = input.ReadFloat();
            break;
          }
          case 77: {
            Cy = input.ReadFloat();
            break;
          }
          case 85: {
            Cz = input.ReadFloat();
            break;
          }
          case 93: {
            W = input.ReadFloat();
            break;
          }
          case 101: {
            L = input.ReadFloat();
            break;
          }
          case 109: {
            H = input.ReadFloat();
            break;
          }
          case 117: {
            Yaw = input.ReadFloat();
            break;
          }
          case 122:
          case 125: {
            velocity_.AddEntriesFrom(input, _repeated_velocity_codec);
            break;
          }
          case 130:
          case 133: {
            objectAccel_.AddEntriesFrom(input, _repeated_objectAccel_codec);
            break;
          }
          case 138:
          case 141: {
            omega_.AddEntriesFrom(input, _repeated_omega_codec);
            break;
          }
          case 146:
          case 149: {
            omegaAccel_.AddEntriesFrom(input, _repeated_omegaAccel_codec);
            break;
          }
          case 157: {
            CxGlobal = input.ReadFloat();
            break;
          }
          case 165: {
            CyGlobal = input.ReadFloat();
            break;
          }
          case 173: {
            CzGlobal = input.ReadFloat();
            break;
          }
          case 181: {
            YawGlobal = input.ReadFloat();
            break;
          }
          case 186:
          case 189: {
            velocityGlobal_.AddEntriesFrom(input, _repeated_velocityGlobal_codec);
            break;
          }
          case 194:
          case 197: {
            objectAccelGlobal_.AddEntriesFrom(input, _repeated_objectAccelGlobal_codec);
            break;
          }
          case 202:
          case 205: {
            omegaGlobal_.AddEntriesFrom(input, _repeated_omegaGlobal_codec);
            break;
          }
          case 210:
          case 213: {
            omegaAccelGlobal_.AddEntriesFrom(input, _repeated_omegaAccelGlobal_codec);
            break;
          }
          case 216: {
            MotionState = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TrackBoxList : pb::IMessage<TrackBoxList> {
    private static readonly pb::MessageParser<TrackBoxList> _parser = new pb::MessageParser<TrackBoxList>(() => new TrackBoxList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrackBoxList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PerceptionReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackBoxList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackBoxList(TrackBoxList other) : this() {
      time_ = other.time_ != null ? other.time_.Clone() : null;
      trackBoxList_ = other.trackBoxList_.Clone();
      rtkTime_ = other.rtkTime_ != null ? other.rtkTime_.Clone() : null;
      pose_ = other.pose_ != null ? other.pose_.Clone() : null;
      velocity_ = other.velocity_ != null ? other.velocity_.Clone() : null;
      acceleration_ = other.acceleration_ != null ? other.acceleration_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackBoxList Clone() {
      return new TrackBoxList(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private global::Xviewer.TimeWorld time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.TimeWorld Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "track_box_list" field.</summary>
    public const int TrackBoxList_FieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xviewer.TrackBox> _repeated_trackBoxList_codec
        = pb::FieldCodec.ForMessage(18, global::Xviewer.TrackBox.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.TrackBox> trackBoxList_ = new pbc::RepeatedField<global::Xviewer.TrackBox>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.TrackBox> TrackBoxList_ {
      get { return trackBoxList_; }
    }

    /// <summary>Field number for the "rtk_time" field.</summary>
    public const int RtkTimeFieldNumber = 3;
    private global::Xviewer.TimeWorld rtkTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.TimeWorld RtkTime {
      get { return rtkTime_; }
      set {
        rtkTime_ = value;
      }
    }

    /// <summary>Field number for the "pose" field.</summary>
    public const int PoseFieldNumber = 4;
    private global::Xviewer.Pose pose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Pose Pose {
      get { return pose_; }
      set {
        pose_ = value;
      }
    }

    /// <summary>Field number for the "velocity" field.</summary>
    public const int VelocityFieldNumber = 5;
    private global::Xviewer.TwistAccel velocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.TwistAccel Velocity {
      get { return velocity_; }
      set {
        velocity_ = value;
      }
    }

    /// <summary>Field number for the "acceleration" field.</summary>
    public const int AccelerationFieldNumber = 6;
    private global::Xviewer.TwistAccel acceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.TwistAccel Acceleration {
      get { return acceleration_; }
      set {
        acceleration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrackBoxList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrackBoxList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Time, other.Time)) return false;
      if(!trackBoxList_.Equals(other.trackBoxList_)) return false;
      if (!object.Equals(RtkTime, other.RtkTime)) return false;
      if (!object.Equals(Pose, other.Pose)) return false;
      if (!object.Equals(Velocity, other.Velocity)) return false;
      if (!object.Equals(Acceleration, other.Acceleration)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (time_ != null) hash ^= Time.GetHashCode();
      hash ^= trackBoxList_.GetHashCode();
      if (rtkTime_ != null) hash ^= RtkTime.GetHashCode();
      if (pose_ != null) hash ^= Pose.GetHashCode();
      if (velocity_ != null) hash ^= Velocity.GetHashCode();
      if (acceleration_ != null) hash ^= Acceleration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (time_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Time);
      }
      trackBoxList_.WriteTo(output, _repeated_trackBoxList_codec);
      if (rtkTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RtkTime);
      }
      if (pose_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Pose);
      }
      if (velocity_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Velocity);
      }
      if (acceleration_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Acceleration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (time_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Time);
      }
      size += trackBoxList_.CalculateSize(_repeated_trackBoxList_codec);
      if (rtkTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RtkTime);
      }
      if (pose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pose);
      }
      if (velocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Velocity);
      }
      if (acceleration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Acceleration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrackBoxList other) {
      if (other == null) {
        return;
      }
      if (other.time_ != null) {
        if (time_ == null) {
          Time = new global::Xviewer.TimeWorld();
        }
        Time.MergeFrom(other.Time);
      }
      trackBoxList_.Add(other.trackBoxList_);
      if (other.rtkTime_ != null) {
        if (rtkTime_ == null) {
          RtkTime = new global::Xviewer.TimeWorld();
        }
        RtkTime.MergeFrom(other.RtkTime);
      }
      if (other.pose_ != null) {
        if (pose_ == null) {
          Pose = new global::Xviewer.Pose();
        }
        Pose.MergeFrom(other.Pose);
      }
      if (other.velocity_ != null) {
        if (velocity_ == null) {
          Velocity = new global::Xviewer.TwistAccel();
        }
        Velocity.MergeFrom(other.Velocity);
      }
      if (other.acceleration_ != null) {
        if (acceleration_ == null) {
          Acceleration = new global::Xviewer.TwistAccel();
        }
        Acceleration.MergeFrom(other.Acceleration);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (time_ == null) {
              Time = new global::Xviewer.TimeWorld();
            }
            input.ReadMessage(Time);
            break;
          }
          case 18: {
            trackBoxList_.AddEntriesFrom(input, _repeated_trackBoxList_codec);
            break;
          }
          case 26: {
            if (rtkTime_ == null) {
              RtkTime = new global::Xviewer.TimeWorld();
            }
            input.ReadMessage(RtkTime);
            break;
          }
          case 34: {
            if (pose_ == null) {
              Pose = new global::Xviewer.Pose();
            }
            input.ReadMessage(Pose);
            break;
          }
          case 42: {
            if (velocity_ == null) {
              Velocity = new global::Xviewer.TwistAccel();
            }
            input.ReadMessage(Velocity);
            break;
          }
          case 50: {
            if (acceleration_ == null) {
              Acceleration = new global::Xviewer.TwistAccel();
            }
            input.ReadMessage(Acceleration);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TargetTrajectory : pb::IMessage<TargetTrajectory> {
    private static readonly pb::MessageParser<TargetTrajectory> _parser = new pb::MessageParser<TargetTrajectory>(() => new TargetTrajectory());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TargetTrajectory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PerceptionReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetTrajectory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetTrajectory(TargetTrajectory other) : this() {
      _hasBits0 = other._hasBits0;
      index_ = other.index_;
      rx_ = other.rx_;
      ry_ = other.ry_;
      height_ = other.height_;
      length_ = other.length_;
      width_ = other.width_;
      crossSpeed_ = other.crossSpeed_;
      longituSpeed_ = other.longituSpeed_;
      tarType_ = other.tarType_;
      obstacle_ = other.obstacle_;
      yaw_ = other.yaw_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetTrajectory Clone() {
      return new TargetTrajectory(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private readonly static uint IndexDefaultValue = 0;

    private uint index_;
    /// <summary>
    ///航迹编号 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { if ((_hasBits0 & 1) != 0) { return index_; } else { return IndexDefaultValue; } }
      set {
        _hasBits0 |= 1;
        index_ = value;
      }
    }
    /// <summary>Gets whether the "index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIndex {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIndex() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "rx" field.</summary>
    public const int RxFieldNumber = 2;
    private readonly static int RxDefaultValue = 0;

    private int rx_;
    /// <summary>
    ///纵向距离bev  + 自车x
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rx {
      get { if ((_hasBits0 & 2) != 0) { return rx_; } else { return RxDefaultValue; } }
      set {
        _hasBits0 |= 2;
        rx_ = value;
      }
    }
    /// <summary>Gets whether the "rx" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRx {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "rx" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRx() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "ry" field.</summary>
    public const int RyFieldNumber = 3;
    private readonly static int RyDefaultValue = 0;

    private int ry_;
    /// <summary>
    ///横向距离bev  + 自车y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ry {
      get { if ((_hasBits0 & 4) != 0) { return ry_; } else { return RyDefaultValue; } }
      set {
        _hasBits0 |= 4;
        ry_ = value;
      }
    }
    /// <summary>Gets whether the "ry" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRy {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "ry" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRy() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 4;
    private readonly static int HeightDefaultValue = 0;

    private int height_;
    /// <summary>
    ///目标高度  0.5
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { if ((_hasBits0 & 8) != 0) { return height_; } else { return HeightDefaultValue; } }
      set {
        _hasBits0 |= 8;
        height_ = value;
      }
    }
    /// <summary>Gets whether the "height" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeight {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "height" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeight() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 5;
    private readonly static int LengthDefaultValue = 0;

    private int length_;
    /// <summary>
    ///目标长度  0.5
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Length {
      get { if ((_hasBits0 & 16) != 0) { return length_; } else { return LengthDefaultValue; } }
      set {
        _hasBits0 |= 16;
        length_ = value;
      }
    }
    /// <summary>Gets whether the "length" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLength {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "length" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLength() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 6;
    private readonly static int WidthDefaultValue = 0;

    private int width_;
    /// <summary>
    ///目标宽度  0.5
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { if ((_hasBits0 & 32) != 0) { return width_; } else { return WidthDefaultValue; } }
      set {
        _hasBits0 |= 32;
        width_ = value;
      }
    }
    /// <summary>Gets whether the "width" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWidth {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "width" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWidth() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "cross_speed" field.</summary>
    public const int CrossSpeedFieldNumber = 7;
    private readonly static int CrossSpeedDefaultValue = 0;

    private int crossSpeed_;
    /// <summary>
    ///横向速度bev  + 自车y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CrossSpeed {
      get { if ((_hasBits0 & 64) != 0) { return crossSpeed_; } else { return CrossSpeedDefaultValue; } }
      set {
        _hasBits0 |= 64;
        crossSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "cross_speed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCrossSpeed {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "cross_speed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCrossSpeed() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "longitu_speed" field.</summary>
    public const int LongituSpeedFieldNumber = 8;
    private readonly static int LongituSpeedDefaultValue = 0;

    private int longituSpeed_;
    /// <summary>
    ///纵向速度bev + 自车x
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LongituSpeed {
      get { if ((_hasBits0 & 128) != 0) { return longituSpeed_; } else { return LongituSpeedDefaultValue; } }
      set {
        _hasBits0 |= 128;
        longituSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "longitu_speed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLongituSpeed {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "longitu_speed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLongituSpeed() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "tar_type" field.</summary>
    public const int TarTypeFieldNumber = 9;
    private readonly static uint TarTypeDefaultValue = 0;

    private uint tarType_;
    /// <summary>
    ///目标状态 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TarType {
      get { if ((_hasBits0 & 256) != 0) { return tarType_; } else { return TarTypeDefaultValue; } }
      set {
        _hasBits0 |= 256;
        tarType_ = value;
      }
    }
    /// <summary>Gets whether the "tar_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTarType {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "tar_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTarType() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "obstacle" field.</summary>
    public const int ObstacleFieldNumber = 10;
    private readonly static uint ObstacleDefaultValue = 0;

    private uint obstacle_;
    /// <summary>
    ///障碍物概率 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Obstacle {
      get { if ((_hasBits0 & 512) != 0) { return obstacle_; } else { return ObstacleDefaultValue; } }
      set {
        _hasBits0 |= 512;
        obstacle_ = value;
      }
    }
    /// <summary>Gets whether the "obstacle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasObstacle {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "obstacle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearObstacle() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "yaw" field.</summary>
    public const int YawFieldNumber = 11;
    private readonly static int YawDefaultValue = 0;

    private int yaw_;
    /// <summary>
    ///航向角  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Yaw {
      get { if ((_hasBits0 & 1024) != 0) { return yaw_; } else { return YawDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        yaw_ = value;
      }
    }
    /// <summary>Gets whether the "yaw" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasYaw {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "yaw" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearYaw() {
      _hasBits0 &= ~1024;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TargetTrajectory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TargetTrajectory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Rx != other.Rx) return false;
      if (Ry != other.Ry) return false;
      if (Height != other.Height) return false;
      if (Length != other.Length) return false;
      if (Width != other.Width) return false;
      if (CrossSpeed != other.CrossSpeed) return false;
      if (LongituSpeed != other.LongituSpeed) return false;
      if (TarType != other.TarType) return false;
      if (Obstacle != other.Obstacle) return false;
      if (Yaw != other.Yaw) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIndex) hash ^= Index.GetHashCode();
      if (HasRx) hash ^= Rx.GetHashCode();
      if (HasRy) hash ^= Ry.GetHashCode();
      if (HasHeight) hash ^= Height.GetHashCode();
      if (HasLength) hash ^= Length.GetHashCode();
      if (HasWidth) hash ^= Width.GetHashCode();
      if (HasCrossSpeed) hash ^= CrossSpeed.GetHashCode();
      if (HasLongituSpeed) hash ^= LongituSpeed.GetHashCode();
      if (HasTarType) hash ^= TarType.GetHashCode();
      if (HasObstacle) hash ^= Obstacle.GetHashCode();
      if (HasYaw) hash ^= Yaw.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasIndex) {
        output.WriteRawTag(8);
        output.WriteUInt32(Index);
      }
      if (HasRx) {
        output.WriteRawTag(16);
        output.WriteInt32(Rx);
      }
      if (HasRy) {
        output.WriteRawTag(24);
        output.WriteInt32(Ry);
      }
      if (HasHeight) {
        output.WriteRawTag(32);
        output.WriteInt32(Height);
      }
      if (HasLength) {
        output.WriteRawTag(40);
        output.WriteInt32(Length);
      }
      if (HasWidth) {
        output.WriteRawTag(48);
        output.WriteInt32(Width);
      }
      if (HasCrossSpeed) {
        output.WriteRawTag(56);
        output.WriteInt32(CrossSpeed);
      }
      if (HasLongituSpeed) {
        output.WriteRawTag(64);
        output.WriteInt32(LongituSpeed);
      }
      if (HasTarType) {
        output.WriteRawTag(72);
        output.WriteUInt32(TarType);
      }
      if (HasObstacle) {
        output.WriteRawTag(80);
        output.WriteUInt32(Obstacle);
      }
      if (HasYaw) {
        output.WriteRawTag(88);
        output.WriteInt32(Yaw);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasIndex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (HasRx) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rx);
      }
      if (HasRy) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ry);
      }
      if (HasHeight) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (HasLength) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Length);
      }
      if (HasWidth) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (HasCrossSpeed) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CrossSpeed);
      }
      if (HasLongituSpeed) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LongituSpeed);
      }
      if (HasTarType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TarType);
      }
      if (HasObstacle) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Obstacle);
      }
      if (HasYaw) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Yaw);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TargetTrajectory other) {
      if (other == null) {
        return;
      }
      if (other.HasIndex) {
        Index = other.Index;
      }
      if (other.HasRx) {
        Rx = other.Rx;
      }
      if (other.HasRy) {
        Ry = other.Ry;
      }
      if (other.HasHeight) {
        Height = other.Height;
      }
      if (other.HasLength) {
        Length = other.Length;
      }
      if (other.HasWidth) {
        Width = other.Width;
      }
      if (other.HasCrossSpeed) {
        CrossSpeed = other.CrossSpeed;
      }
      if (other.HasLongituSpeed) {
        LongituSpeed = other.LongituSpeed;
      }
      if (other.HasTarType) {
        TarType = other.TarType;
      }
      if (other.HasObstacle) {
        Obstacle = other.Obstacle;
      }
      if (other.HasYaw) {
        Yaw = other.Yaw;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadUInt32();
            break;
          }
          case 16: {
            Rx = input.ReadInt32();
            break;
          }
          case 24: {
            Ry = input.ReadInt32();
            break;
          }
          case 32: {
            Height = input.ReadInt32();
            break;
          }
          case 40: {
            Length = input.ReadInt32();
            break;
          }
          case 48: {
            Width = input.ReadInt32();
            break;
          }
          case 56: {
            CrossSpeed = input.ReadInt32();
            break;
          }
          case 64: {
            LongituSpeed = input.ReadInt32();
            break;
          }
          case 72: {
            TarType = input.ReadUInt32();
            break;
          }
          case 80: {
            Obstacle = input.ReadUInt32();
            break;
          }
          case 88: {
            Yaw = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// -------------------- 感知消息 -------------------------//
  /// </summary>
  public sealed partial class Perception : pb::IMessage<Perception> {
    private static readonly pb::MessageParser<Perception> _parser = new pb::MessageParser<Perception>(() => new Perception());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Perception> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PerceptionReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Perception() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Perception(Perception other) : this() {
      freeSpace_ = other.freeSpace_.Clone();
      percFreeSpace_ = other.percFreeSpace_.Clone();
      parkingSlotsAll_ = other.parkingSlotsAll_ != null ? other.parkingSlotsAll_.Clone() : null;
      obstacleBoundarys_ = other.obstacleBoundarys_.Clone();
      percObstacleBoundarys_ = other.percObstacleBoundarys_.Clone();
      fusionPilot_ = other.fusionPilot_ != null ? other.fusionPilot_.Clone() : null;
      fusionPilotVtd_ = other.fusionPilotVtd_ != null ? other.fusionPilotVtd_.Clone() : null;
      trafficLightInfo_ = other.trafficLightInfo_ != null ? other.trafficLightInfo_.Clone() : null;
      laneLineInfoMapEngine_ = other.laneLineInfoMapEngine_ != null ? other.laneLineInfoMapEngine_.Clone() : null;
      laneLineInfoHmi_ = other.laneLineInfoHmi_ != null ? other.laneLineInfoHmi_.Clone() : null;
      laneLineInfoHdmap_ = other.laneLineInfoHdmap_ != null ? other.laneLineInfoHdmap_.Clone() : null;
      laneLineInfo_ = other.laneLineInfo_ != null ? other.laneLineInfo_.Clone() : null;
      laneLineRoadInfo_ = other.laneLineRoadInfo_ != null ? other.laneLineRoadInfo_.Clone() : null;
      apaPerceptionObject_ = other.apaPerceptionObject_ != null ? other.apaPerceptionObject_.Clone() : null;
      fusionPilotHdmap_ = other.fusionPilotHdmap_ != null ? other.fusionPilotHdmap_.Clone() : null;
      collisionDistanceInfo_ = other.collisionDistanceInfo_.Clone();
      radarTargetTrajectory_ = other.radarTargetTrajectory_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Perception Clone() {
      return new Perception(this);
    }

    /// <summary>Field number for the "free_space" field.</summary>
    public const int FreeSpaceFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_freeSpace_codec
        = pb::FieldCodec.ForMessage(10, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> freeSpace_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// 泊车 可行驶区域
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> FreeSpace {
      get { return freeSpace_; }
    }

    /// <summary>Field number for the "perc_free_space" field.</summary>
    public const int PercFreeSpaceFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_percFreeSpace_codec
        = pb::FieldCodec.ForMessage(18, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> percFreeSpace_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// 行车 可行驶区域
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> PercFreeSpace {
      get { return percFreeSpace_; }
    }

    /// <summary>Field number for the "parking_slots_all" field.</summary>
    public const int ParkingSlotsAllFieldNumber = 3;
    private global::Xviewer.ParkingSlots parkingSlotsAll_;
    /// <summary>
    /// 泊车位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.ParkingSlots ParkingSlotsAll {
      get { return parkingSlotsAll_; }
      set {
        parkingSlotsAll_ = value;
      }
    }

    /// <summary>Field number for the "obstacle_boundarys" field.</summary>
    public const int ObstacleBoundarysFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Xviewer.ObstacleBoundary> _repeated_obstacleBoundarys_codec
        = pb::FieldCodec.ForMessage(34, global::Xviewer.ObstacleBoundary.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.ObstacleBoundary> obstacleBoundarys_ = new pbc::RepeatedField<global::Xviewer.ObstacleBoundary>();
    /// <summary>
    /// 泊车 障碍物边界
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.ObstacleBoundary> ObstacleBoundarys {
      get { return obstacleBoundarys_; }
    }

    /// <summary>Field number for the "perc_obstacle_boundarys" field.</summary>
    public const int PercObstacleBoundarysFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Xviewer.ObstacleBoundary> _repeated_percObstacleBoundarys_codec
        = pb::FieldCodec.ForMessage(42, global::Xviewer.ObstacleBoundary.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.ObstacleBoundary> percObstacleBoundarys_ = new pbc::RepeatedField<global::Xviewer.ObstacleBoundary>();
    /// <summary>
    /// 行车 障碍物边界
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.ObstacleBoundary> PercObstacleBoundarys {
      get { return percObstacleBoundarys_; }
    }

    /// <summary>Field number for the "fusion_pilot" field.</summary>
    public const int FusionPilotFieldNumber = 6;
    private global::Xviewer.PerceptionFusion fusionPilot_;
    /// <summary>
    /// 行车融合感知
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.PerceptionFusion FusionPilot {
      get { return fusionPilot_; }
      set {
        fusionPilot_ = value;
      }
    }

    /// <summary>Field number for the "fusion_pilot_vtd" field.</summary>
    public const int FusionPilotVtdFieldNumber = 7;
    private global::Xviewer.PerceptionFusion fusionPilotVtd_;
    /// <summary>
    /// vtd完美感知
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.PerceptionFusion FusionPilotVtd {
      get { return fusionPilotVtd_; }
      set {
        fusionPilotVtd_ = value;
      }
    }

    /// <summary>Field number for the "traffic_light_info" field.</summary>
    public const int TrafficLightInfoFieldNumber = 8;
    private global::Xviewer.TrafficLightInfo trafficLightInfo_;
    /// <summary>
    /// 交通信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.TrafficLightInfo TrafficLightInfo {
      get { return trafficLightInfo_; }
      set {
        trafficLightInfo_ = value;
      }
    }

    /// <summary>Field number for the "lane_line_info_map_engine" field.</summary>
    public const int LaneLineInfoMapEngineFieldNumber = 9;
    private global::Xviewer.LaneLineInfo laneLineInfoMapEngine_;
    /// <summary>
    /// 车道线信息 MapEngine 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.LaneLineInfo LaneLineInfoMapEngine {
      get { return laneLineInfoMapEngine_; }
      set {
        laneLineInfoMapEngine_ = value;
      }
    }

    /// <summary>Field number for the "lane_line_info_hmi" field.</summary>
    public const int LaneLineInfoHmiFieldNumber = 10;
    private global::Xviewer.LaneLineInfo laneLineInfoHmi_;
    /// <summary>
    /// 车道线信息 HMI       
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.LaneLineInfo LaneLineInfoHmi {
      get { return laneLineInfoHmi_; }
      set {
        laneLineInfoHmi_ = value;
      }
    }

    /// <summary>Field number for the "lane_line_info_hdmap" field.</summary>
    public const int LaneLineInfoHdmapFieldNumber = 11;
    private global::Xviewer.LaneLineInfo laneLineInfoHdmap_;
    /// <summary>
    /// 车道线信息 HDMAP    
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.LaneLineInfo LaneLineInfoHdmap {
      get { return laneLineInfoHdmap_; }
      set {
        laneLineInfoHdmap_ = value;
      }
    }

    /// <summary>Field number for the "lane_line_info" field.</summary>
    public const int LaneLineInfoFieldNumber = 12;
    private global::Xviewer.LaneLineInfo laneLineInfo_;
    /// <summary>
    /// 车道线信息 Perception 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.LaneLineInfo LaneLineInfo {
      get { return laneLineInfo_; }
      set {
        laneLineInfo_ = value;
      }
    }

    /// <summary>Field number for the "lane_line_road_info" field.</summary>
    public const int LaneLineRoadInfoFieldNumber = 13;
    private global::Xviewer.RoadInfo laneLineRoadInfo_;
    /// <summary>
    /// 使用RoadInfo消息格式的感知车道线 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.RoadInfo LaneLineRoadInfo {
      get { return laneLineRoadInfo_; }
      set {
        laneLineRoadInfo_ = value;
      }
    }

    /// <summary>Field number for the "apa_perception_object" field.</summary>
    public const int ApaPerceptionObjectFieldNumber = 14;
    private global::Xviewer.TrackBoxList apaPerceptionObject_;
    /// <summary>
    /// 泊车 障碍物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.TrackBoxList ApaPerceptionObject {
      get { return apaPerceptionObject_; }
      set {
        apaPerceptionObject_ = value;
      }
    }

    /// <summary>Field number for the "fusion_pilot_hdmap" field.</summary>
    public const int FusionPilotHdmapFieldNumber = 15;
    private global::Xviewer.PerceptionFusion fusionPilotHdmap_;
    /// <summary>
    /// hdmap 模拟感知信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.PerceptionFusion FusionPilotHdmap {
      get { return fusionPilotHdmap_; }
      set {
        fusionPilotHdmap_ = value;
      }
    }

    /// <summary>Field number for the "collision_distance_info" field.</summary>
    public const int CollisionDistanceInfoFieldNumber = 16;
    private static readonly pb::FieldCodec<double> _repeated_collisionDistanceInfo_codec
        = pb::FieldCodec.ForDouble(129);
    private readonly pbc::RepeatedField<double> collisionDistanceInfo_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// 碰撞预警距离 m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> CollisionDistanceInfo {
      get { return collisionDistanceInfo_; }
    }

    /// <summary>Field number for the "radar_target_trajectory" field.</summary>
    public const int RadarTargetTrajectoryFieldNumber = 17;
    private static readonly pb::FieldCodec<global::Xviewer.TargetTrajectory> _repeated_radarTargetTrajectory_codec
        = pb::FieldCodec.ForMessage(138, global::Xviewer.TargetTrajectory.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.TargetTrajectory> radarTargetTrajectory_ = new pbc::RepeatedField<global::Xviewer.TargetTrajectory>();
    /// <summary>
    /// 毫米波雷达目标轨迹
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.TargetTrajectory> RadarTargetTrajectory {
      get { return radarTargetTrajectory_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Perception);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Perception other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!freeSpace_.Equals(other.freeSpace_)) return false;
      if(!percFreeSpace_.Equals(other.percFreeSpace_)) return false;
      if (!object.Equals(ParkingSlotsAll, other.ParkingSlotsAll)) return false;
      if(!obstacleBoundarys_.Equals(other.obstacleBoundarys_)) return false;
      if(!percObstacleBoundarys_.Equals(other.percObstacleBoundarys_)) return false;
      if (!object.Equals(FusionPilot, other.FusionPilot)) return false;
      if (!object.Equals(FusionPilotVtd, other.FusionPilotVtd)) return false;
      if (!object.Equals(TrafficLightInfo, other.TrafficLightInfo)) return false;
      if (!object.Equals(LaneLineInfoMapEngine, other.LaneLineInfoMapEngine)) return false;
      if (!object.Equals(LaneLineInfoHmi, other.LaneLineInfoHmi)) return false;
      if (!object.Equals(LaneLineInfoHdmap, other.LaneLineInfoHdmap)) return false;
      if (!object.Equals(LaneLineInfo, other.LaneLineInfo)) return false;
      if (!object.Equals(LaneLineRoadInfo, other.LaneLineRoadInfo)) return false;
      if (!object.Equals(ApaPerceptionObject, other.ApaPerceptionObject)) return false;
      if (!object.Equals(FusionPilotHdmap, other.FusionPilotHdmap)) return false;
      if(!collisionDistanceInfo_.Equals(other.collisionDistanceInfo_)) return false;
      if(!radarTargetTrajectory_.Equals(other.radarTargetTrajectory_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= freeSpace_.GetHashCode();
      hash ^= percFreeSpace_.GetHashCode();
      if (parkingSlotsAll_ != null) hash ^= ParkingSlotsAll.GetHashCode();
      hash ^= obstacleBoundarys_.GetHashCode();
      hash ^= percObstacleBoundarys_.GetHashCode();
      if (fusionPilot_ != null) hash ^= FusionPilot.GetHashCode();
      if (fusionPilotVtd_ != null) hash ^= FusionPilotVtd.GetHashCode();
      if (trafficLightInfo_ != null) hash ^= TrafficLightInfo.GetHashCode();
      if (laneLineInfoMapEngine_ != null) hash ^= LaneLineInfoMapEngine.GetHashCode();
      if (laneLineInfoHmi_ != null) hash ^= LaneLineInfoHmi.GetHashCode();
      if (laneLineInfoHdmap_ != null) hash ^= LaneLineInfoHdmap.GetHashCode();
      if (laneLineInfo_ != null) hash ^= LaneLineInfo.GetHashCode();
      if (laneLineRoadInfo_ != null) hash ^= LaneLineRoadInfo.GetHashCode();
      if (apaPerceptionObject_ != null) hash ^= ApaPerceptionObject.GetHashCode();
      if (fusionPilotHdmap_ != null) hash ^= FusionPilotHdmap.GetHashCode();
      hash ^= collisionDistanceInfo_.GetHashCode();
      hash ^= radarTargetTrajectory_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      freeSpace_.WriteTo(output, _repeated_freeSpace_codec);
      percFreeSpace_.WriteTo(output, _repeated_percFreeSpace_codec);
      if (parkingSlotsAll_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ParkingSlotsAll);
      }
      obstacleBoundarys_.WriteTo(output, _repeated_obstacleBoundarys_codec);
      percObstacleBoundarys_.WriteTo(output, _repeated_percObstacleBoundarys_codec);
      if (fusionPilot_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(FusionPilot);
      }
      if (fusionPilotVtd_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(FusionPilotVtd);
      }
      if (trafficLightInfo_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(TrafficLightInfo);
      }
      if (laneLineInfoMapEngine_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(LaneLineInfoMapEngine);
      }
      if (laneLineInfoHmi_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(LaneLineInfoHmi);
      }
      if (laneLineInfoHdmap_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(LaneLineInfoHdmap);
      }
      if (laneLineInfo_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(LaneLineInfo);
      }
      if (laneLineRoadInfo_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(LaneLineRoadInfo);
      }
      if (apaPerceptionObject_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(ApaPerceptionObject);
      }
      if (fusionPilotHdmap_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(FusionPilotHdmap);
      }
      collisionDistanceInfo_.WriteTo(output, _repeated_collisionDistanceInfo_codec);
      radarTargetTrajectory_.WriteTo(output, _repeated_radarTargetTrajectory_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += freeSpace_.CalculateSize(_repeated_freeSpace_codec);
      size += percFreeSpace_.CalculateSize(_repeated_percFreeSpace_codec);
      if (parkingSlotsAll_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ParkingSlotsAll);
      }
      size += obstacleBoundarys_.CalculateSize(_repeated_obstacleBoundarys_codec);
      size += percObstacleBoundarys_.CalculateSize(_repeated_percObstacleBoundarys_codec);
      if (fusionPilot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FusionPilot);
      }
      if (fusionPilotVtd_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FusionPilotVtd);
      }
      if (trafficLightInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrafficLightInfo);
      }
      if (laneLineInfoMapEngine_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LaneLineInfoMapEngine);
      }
      if (laneLineInfoHmi_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LaneLineInfoHmi);
      }
      if (laneLineInfoHdmap_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LaneLineInfoHdmap);
      }
      if (laneLineInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LaneLineInfo);
      }
      if (laneLineRoadInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LaneLineRoadInfo);
      }
      if (apaPerceptionObject_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApaPerceptionObject);
      }
      if (fusionPilotHdmap_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FusionPilotHdmap);
      }
      size += collisionDistanceInfo_.CalculateSize(_repeated_collisionDistanceInfo_codec);
      size += radarTargetTrajectory_.CalculateSize(_repeated_radarTargetTrajectory_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Perception other) {
      if (other == null) {
        return;
      }
      freeSpace_.Add(other.freeSpace_);
      percFreeSpace_.Add(other.percFreeSpace_);
      if (other.parkingSlotsAll_ != null) {
        if (parkingSlotsAll_ == null) {
          ParkingSlotsAll = new global::Xviewer.ParkingSlots();
        }
        ParkingSlotsAll.MergeFrom(other.ParkingSlotsAll);
      }
      obstacleBoundarys_.Add(other.obstacleBoundarys_);
      percObstacleBoundarys_.Add(other.percObstacleBoundarys_);
      if (other.fusionPilot_ != null) {
        if (fusionPilot_ == null) {
          FusionPilot = new global::Xviewer.PerceptionFusion();
        }
        FusionPilot.MergeFrom(other.FusionPilot);
      }
      if (other.fusionPilotVtd_ != null) {
        if (fusionPilotVtd_ == null) {
          FusionPilotVtd = new global::Xviewer.PerceptionFusion();
        }
        FusionPilotVtd.MergeFrom(other.FusionPilotVtd);
      }
      if (other.trafficLightInfo_ != null) {
        if (trafficLightInfo_ == null) {
          TrafficLightInfo = new global::Xviewer.TrafficLightInfo();
        }
        TrafficLightInfo.MergeFrom(other.TrafficLightInfo);
      }
      if (other.laneLineInfoMapEngine_ != null) {
        if (laneLineInfoMapEngine_ == null) {
          LaneLineInfoMapEngine = new global::Xviewer.LaneLineInfo();
        }
        LaneLineInfoMapEngine.MergeFrom(other.LaneLineInfoMapEngine);
      }
      if (other.laneLineInfoHmi_ != null) {
        if (laneLineInfoHmi_ == null) {
          LaneLineInfoHmi = new global::Xviewer.LaneLineInfo();
        }
        LaneLineInfoHmi.MergeFrom(other.LaneLineInfoHmi);
      }
      if (other.laneLineInfoHdmap_ != null) {
        if (laneLineInfoHdmap_ == null) {
          LaneLineInfoHdmap = new global::Xviewer.LaneLineInfo();
        }
        LaneLineInfoHdmap.MergeFrom(other.LaneLineInfoHdmap);
      }
      if (other.laneLineInfo_ != null) {
        if (laneLineInfo_ == null) {
          LaneLineInfo = new global::Xviewer.LaneLineInfo();
        }
        LaneLineInfo.MergeFrom(other.LaneLineInfo);
      }
      if (other.laneLineRoadInfo_ != null) {
        if (laneLineRoadInfo_ == null) {
          LaneLineRoadInfo = new global::Xviewer.RoadInfo();
        }
        LaneLineRoadInfo.MergeFrom(other.LaneLineRoadInfo);
      }
      if (other.apaPerceptionObject_ != null) {
        if (apaPerceptionObject_ == null) {
          ApaPerceptionObject = new global::Xviewer.TrackBoxList();
        }
        ApaPerceptionObject.MergeFrom(other.ApaPerceptionObject);
      }
      if (other.fusionPilotHdmap_ != null) {
        if (fusionPilotHdmap_ == null) {
          FusionPilotHdmap = new global::Xviewer.PerceptionFusion();
        }
        FusionPilotHdmap.MergeFrom(other.FusionPilotHdmap);
      }
      collisionDistanceInfo_.Add(other.collisionDistanceInfo_);
      radarTargetTrajectory_.Add(other.radarTargetTrajectory_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            freeSpace_.AddEntriesFrom(input, _repeated_freeSpace_codec);
            break;
          }
          case 18: {
            percFreeSpace_.AddEntriesFrom(input, _repeated_percFreeSpace_codec);
            break;
          }
          case 26: {
            if (parkingSlotsAll_ == null) {
              ParkingSlotsAll = new global::Xviewer.ParkingSlots();
            }
            input.ReadMessage(ParkingSlotsAll);
            break;
          }
          case 34: {
            obstacleBoundarys_.AddEntriesFrom(input, _repeated_obstacleBoundarys_codec);
            break;
          }
          case 42: {
            percObstacleBoundarys_.AddEntriesFrom(input, _repeated_percObstacleBoundarys_codec);
            break;
          }
          case 50: {
            if (fusionPilot_ == null) {
              FusionPilot = new global::Xviewer.PerceptionFusion();
            }
            input.ReadMessage(FusionPilot);
            break;
          }
          case 58: {
            if (fusionPilotVtd_ == null) {
              FusionPilotVtd = new global::Xviewer.PerceptionFusion();
            }
            input.ReadMessage(FusionPilotVtd);
            break;
          }
          case 66: {
            if (trafficLightInfo_ == null) {
              TrafficLightInfo = new global::Xviewer.TrafficLightInfo();
            }
            input.ReadMessage(TrafficLightInfo);
            break;
          }
          case 74: {
            if (laneLineInfoMapEngine_ == null) {
              LaneLineInfoMapEngine = new global::Xviewer.LaneLineInfo();
            }
            input.ReadMessage(LaneLineInfoMapEngine);
            break;
          }
          case 82: {
            if (laneLineInfoHmi_ == null) {
              LaneLineInfoHmi = new global::Xviewer.LaneLineInfo();
            }
            input.ReadMessage(LaneLineInfoHmi);
            break;
          }
          case 90: {
            if (laneLineInfoHdmap_ == null) {
              LaneLineInfoHdmap = new global::Xviewer.LaneLineInfo();
            }
            input.ReadMessage(LaneLineInfoHdmap);
            break;
          }
          case 98: {
            if (laneLineInfo_ == null) {
              LaneLineInfo = new global::Xviewer.LaneLineInfo();
            }
            input.ReadMessage(LaneLineInfo);
            break;
          }
          case 106: {
            if (laneLineRoadInfo_ == null) {
              LaneLineRoadInfo = new global::Xviewer.RoadInfo();
            }
            input.ReadMessage(LaneLineRoadInfo);
            break;
          }
          case 114: {
            if (apaPerceptionObject_ == null) {
              ApaPerceptionObject = new global::Xviewer.TrackBoxList();
            }
            input.ReadMessage(ApaPerceptionObject);
            break;
          }
          case 122: {
            if (fusionPilotHdmap_ == null) {
              FusionPilotHdmap = new global::Xviewer.PerceptionFusion();
            }
            input.ReadMessage(FusionPilotHdmap);
            break;
          }
          case 130:
          case 129: {
            collisionDistanceInfo_.AddEntriesFrom(input, _repeated_collisionDistanceInfo_codec);
            break;
          }
          case 138: {
            radarTargetTrajectory_.AddEntriesFrom(input, _repeated_radarTargetTrajectory_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
