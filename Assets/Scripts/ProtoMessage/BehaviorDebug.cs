// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: behavior_debug.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Xviewer {

  /// <summary>Holder for reflection information generated from behavior_debug.proto</summary>
  public static partial class BehaviorDebugReflection {

    #region Descriptor
    /// <summary>File descriptor for behavior_debug.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BehaviorDebugReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRiZWhhdmlvcl9kZWJ1Zy5wcm90bxIHeHZpZXdlciKlAQoOU3BlZWRMaW1p",
            "dEluZm8SGgoSc21fcmVjb21tZW5kX3NwZWVkGAEgASgCEhoKEmJwX3JlY29t",
            "bWVuZF9zcGVlZBgCIAEoAhIXCg9tYXBfc3BlZWRfbGltaXQYAyABKAISHgoW",
            "Y3VycmVudF9kcml2ZXJfY29tbWFuZBgEIAEoBRIiChpjdXJyZW50X25hdmln",
            "YXRpb25fY29tbWFuZBgFIAEoBSImCg5SZWZlcmVuY2VQb2ludBIJCgF4GAEg",
            "ASgBEgkKAXkYAiABKAEi4gEKC1JsRGVidWdJbmZvEhAKBWluZGV4GAEgASgF",
            "OgEwEhEKCWF0dHJpYnV0ZRgCIAEoBRIbChNwbGFubmluZ19kaXN0YW5jZV9t",
            "GAMgASgBEhgKEHNwbGl0X2Rpc3RhbmNlX20YBCABKAESGgoSbWVyZ2luZ19k",
            "aXN0YW5jZV9tGAUgASgBEhgKEHZpcnR1YWxfcHJpb3JpdHkYBiABKAUSEAoI",
            "aXNfc3R1Y2sYByABKAgSLwoOcmVmZXJlbmNlX2xpbmUYCSADKAsyFy54dmll",
            "d2VyLlJlZmVyZW5jZVBvaW50IocEChFGc21MYW5lQ2hhbmdlSW5mbxIjChtm",
            "c21fbGFuZV9jaGFuZ2VfY2FuY2VsX2ZsYWcYASABKAUSKAogbGFuZV9jaGFu",
            "Z2VfdHVybl9saWdodF9kaXJlY3Rpb24YAiABKAUSHQoVbGFuZV9jaGFuZ2Vf",
            "ZGlyZWN0aW9uGAMgASgFEhoKEmxhbmVfY2hhbmdlX2FjdGlvbhgEIAEoCRIW",
            "Cg5mc21fc3RhdGVfbW9kZRgFIAEoCRIYChBsYW5lX2NoYW5nZV90eXBlGAYg",
            "ASgJEiIKGmxhbmVfY2hhbmdlX2Nvb2xfZG93bl90aW1lGAcgASgFEhwKFGxh",
            "bmVfY2hhbmdlX3ByaW9yaXR5GAggASgBEhsKE2lzX2ZzbV9sYW5lX2tlZXBp",
            "bmcYCSABKAgSGgoSc3RhdGVfcnVubmluZ190aW1lGAogASgFEiAKGGlzX3Rh",
            "cmdldF9sYW5lX2Nyb3NzYWJsZRgLIAEoCBIkChxjYW5fbGFuZV9jaGFuZ2Vf",
            "YmVfY2FuY2VsbGVkGAwgASgIEh0KFWlzX2ZlYXNpYmxlX2dhcF9mb3VuZBgN",
            "IAEoCBIhChloaWdoZXN0X3ByaW9yaXR5X3JsX2luZGV4GA4gASgFEhsKE2xh",
            "bmVfY2hhbmdlX2NvdW50ZXIYDyABKAUSFAoMZGVidWdfc3RyaW5nGBAgASgJ",
            "IoUDCgxGc21OdWRnZUluZm8SHQoVZnNtX251ZGdlX2NhbmNlbF9mbGFnGAEg",
            "ASgFEhcKD251ZGdlX2RpcmVjdGlvbhgCIAEoBRIUCgxudWRnZV9hY3Rpb24Y",
            "AyABKAUSFgoOZnNtX3N0YXRlX21vZGUYBCABKAUSEgoKbnVkZ2VfdHlwZRgF",
            "IAEoBRIcChRudWRnZV9jb29sX2Rvd25fdGltZRgGIAEoBRIWCg5udWRnZV9w",
            "cmlvcml0eRgHIAEoARIbChNpc19mc21fbGFuZV9rZWVwaW5nGAggASgIEhoK",
            "EnN0YXRlX3J1bm5pbmdfdGltZRgJIAEoBRIgChhpc190YXJnZXRfbGFuZV9j",
            "cm9zc2FibGUYCiABKAgSHgoWY2FuX251ZGdlX2JlX2NhbmNlbGxlZBgLIAEo",
            "CBIdChVpc19mZWFzaWJsZV9nYXBfZm91bmQYDCABKAgSFQoNbnVkZ2VfY291",
            "bnRlchgNIAEoBRIUCgxkZWJ1Z19zdHJpbmcYDiABKAki0AEKCkVnb0NhclBv",
            "c2USHQoVc3lzdGVtX2N1cnJlbnRfdGltZV94GAEgASgBEh0KFXN5c3RlbV9j",
            "dXJyZW50X3RpbWVfeRgCIAEoARIjChtzeXN0ZW1fY3VycmVudF90aW1lX2hl",
            "YWRpbmcYAyABKAESHgoWdGltZV9hbGlnbmVkX3NwZWVkX21wcxgEIAEoARIf",
            "Chd0aW1lX2FsaWduZWRfYWNjZWxfbXBzMhgFIAEoARIeChZ0aW1lX2FsaWdu",
            "ZWRfamVya19tcHMzGAYgASgBIkcKCEJpYXNJbmZvEhMKC2JpYXNfZW5hYmxl",
            "GAEgASgIEg4KBmJpYXNfbBgCIAEoARIWCg5iaWFzX29iamVjdF9pZBgDIAMo",
            "BSJ2ChRMYW5lVHJhZmZpY0xpZ2h0SW5mbxILCgNkaXIYASABKAUSDQoFY29s",
            "b3IYAiABKAUSHAoUaXNfdGhpc19kaXJfcGFzc2FibGUYAyABKAgSJAocY3Vy",
            "cmVudF9jb2xvcl9yZW1haW5pbmdfdGltZRgEIAEoBSJgChVUcmFmZmljTGln",
            "aHREZWJ1Z0luZm8SEQoJZGlyZWN0aW9uGAEgASgFEjQKDXRyYWZmaWNfbGln",
            "aHQYAiADKAsyHS54dmlld2VyLkxhbmVUcmFmZmljTGlnaHRJbmZvIrQBCg9U",
            "aW1lQ29uc3VtcHRpb24SHwoXcGxhbm5pbmdfZnVzaW9uX3RpbWVfbXMYASAB",
            "KAUSIQoZYmVoYXZpb3JfcGxhbm5pbmdfdGltZV9tcxgCIAEoBRIeChZiZWhh",
            "dmlvcl9mcmFtZV90aW1lX21zGAMgASgFEh0KFXBhdGhfcGxhbm5pbmdfdGlt",
            "ZV9tcxgEIAEoBRIeChZzcGVlZF9wbGFubmluZ190aW1lX21zGAUgASgFItkC",
            "ChNFZ29SZWxhdGl2ZVBvc2l0aW9uEiIKGmVnb19jYXJfZGlzdGFuY2VfdG9f",
            "ZWdvX3JsGAEgASgBEi0KJWVnb19jYXJfZGlzdGFuY2VfdG9fZWdvX2xhbmVf",
            "Ym91bmRhcnkYAiABKAESKgoiZGlzdGFuY2VfdG9fY2xvc2VzdF9pbnRlcnNl",
            "Y3Rpb25fbRgDIAEoARInCh9lZ29faGVhZGluZ19hbmRfcmxfaGVhZGluZ19k",
            "aWZmGAQgASgBEisKI2Rpc3RhbmNlX3RvX2Nsb3Nlc3RfdHJhZmZpY19saWdo",
            "dF9tGAUgASgBEicKH2Rpc3RhbmNlX3RvX2Nsb3Nlc3RfY3Jvc3N3YWxrX20Y",
            "BiABKAESJQodZWdvX2Nhcl9kaXN0YW5jZV90b190YXJnZXRfcmwYByABKAES",
            "HQoVaXNfZWdvX2Nhcl93aXRoaW5fZWdvGAggASgIIskFChBCZWhhdmlvckRl",
            "YnVnTXNnEjsKGXBsYW5uaW5nX3RpbWVfY29uc3VtcHRpb24YASABKAsyGC54",
            "dmlld2VyLlRpbWVDb25zdW1wdGlvbhI6ChJ0cmFmZmljX2xpZ2h0X2luZm8Y",
            "AiABKAsyHi54dmlld2VyLlRyYWZmaWNMaWdodERlYnVnSW5mbxI0ChNyZWNv",
            "bW1lbmRfc3BlZWRfbXBzGAMgASgLMhcueHZpZXdlci5TcGVlZExpbWl0SW5m",
            "bxI7ChVlZ29fcmVsYXRpdmVfcG9zaXRpb24YBCABKAsyHC54dmlld2VyLkVn",
            "b1JlbGF0aXZlUG9zaXRpb24SKQoLZWdvX3JsX2luZm8YBSABKAsyFC54dmll",
            "d2VyLlJsRGVidWdJbmZvEiwKDnRhcmdldF9ybF9pbmZvGAYgASgLMhQueHZp",
            "ZXdlci5SbERlYnVnSW5mbxIqCgxsZWZ0X3JsX2luZm8YByABKAsyFC54dmll",
            "d2VyLlJsRGVidWdJbmZvEisKDXJpZ2h0X3JsX2luZm8YCCABKAsyFC54dmll",
            "d2VyLlJsRGVidWdJbmZvEjgKFGZzbV9sYW5lX2NoYW5nZV9pbmZvGAkgASgL",
            "MhoueHZpZXdlci5Gc21MYW5lQ2hhbmdlSW5mbxIlCh1hc3NpZ25lZF9keW5h",
            "bWljX29iamVjdHNfaW5mbxgKIAEoCRIVCg1sY19kZWJ1Z19pbmZvGAsgASgJ",
            "EhgKEG51ZGdlX2RlYnVnX2luZm8YDCABKAkSFgoOZ2FwX2RlYnVnX2luZm8Y",
            "DSABKAkSHAoUYWN0aW9uX2NhbmNlbF9yZWFzb24YDiABKAkSIAoYbGFuZV9j",
            "aGFuZ2VfZ2VuZXJhbF9pbmZvGA8gASgJEi0KDmZzbV9udWRnZV9pbmZvGBAg",
            "ASgLMhUueHZpZXdlci5Gc21OdWRnZUluZm8="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.SpeedLimitInfo), global::Xviewer.SpeedLimitInfo.Parser, new[]{ "SmRecommendSpeed", "BpRecommendSpeed", "MapSpeedLimit", "CurrentDriverCommand", "CurrentNavigationCommand" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.ReferencePoint), global::Xviewer.ReferencePoint.Parser, new[]{ "X", "Y" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.RlDebugInfo), global::Xviewer.RlDebugInfo.Parser, new[]{ "Index", "Attribute", "PlanningDistanceM", "SplitDistanceM", "MergingDistanceM", "VirtualPriority", "IsStuck", "ReferenceLine" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.FsmLaneChangeInfo), global::Xviewer.FsmLaneChangeInfo.Parser, new[]{ "FsmLaneChangeCancelFlag", "LaneChangeTurnLightDirection", "LaneChangeDirection", "LaneChangeAction", "FsmStateMode", "LaneChangeType", "LaneChangeCoolDownTime", "LaneChangePriority", "IsFsmLaneKeeping", "StateRunningTime", "IsTargetLaneCrossable", "CanLaneChangeBeCancelled", "IsFeasibleGapFound", "HighestPriorityRlIndex", "LaneChangeCounter", "DebugString" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.FsmNudgeInfo), global::Xviewer.FsmNudgeInfo.Parser, new[]{ "FsmNudgeCancelFlag", "NudgeDirection", "NudgeAction", "FsmStateMode", "NudgeType", "NudgeCoolDownTime", "NudgePriority", "IsFsmLaneKeeping", "StateRunningTime", "IsTargetLaneCrossable", "CanNudgeBeCancelled", "IsFeasibleGapFound", "NudgeCounter", "DebugString" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.EgoCarPose), global::Xviewer.EgoCarPose.Parser, new[]{ "SystemCurrentTimeX", "SystemCurrentTimeY", "SystemCurrentTimeHeading", "TimeAlignedSpeedMps", "TimeAlignedAccelMps2", "TimeAlignedJerkMps3" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.BiasInfo), global::Xviewer.BiasInfo.Parser, new[]{ "BiasEnable", "BiasL", "BiasObjectId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.LaneTrafficLightInfo), global::Xviewer.LaneTrafficLightInfo.Parser, new[]{ "Dir", "Color", "IsThisDirPassable", "CurrentColorRemainingTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.TrafficLightDebugInfo), global::Xviewer.TrafficLightDebugInfo.Parser, new[]{ "Direction", "TrafficLight" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.TimeConsumption), global::Xviewer.TimeConsumption.Parser, new[]{ "PlanningFusionTimeMs", "BehaviorPlanningTimeMs", "BehaviorFrameTimeMs", "PathPlanningTimeMs", "SpeedPlanningTimeMs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.EgoRelativePosition), global::Xviewer.EgoRelativePosition.Parser, new[]{ "EgoCarDistanceToEgoRl", "EgoCarDistanceToEgoLaneBoundary", "DistanceToClosestIntersectionM", "EgoHeadingAndRlHeadingDiff", "DistanceToClosestTrafficLightM", "DistanceToClosestCrosswalkM", "EgoCarDistanceToTargetRl", "IsEgoCarWithinEgo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.BehaviorDebugMsg), global::Xviewer.BehaviorDebugMsg.Parser, new[]{ "PlanningTimeConsumption", "TrafficLightInfo", "RecommendSpeedMps", "EgoRelativePosition", "EgoRlInfo", "TargetRlInfo", "LeftRlInfo", "RightRlInfo", "FsmLaneChangeInfo", "AssignedDynamicObjectsInfo", "LcDebugInfo", "NudgeDebugInfo", "GapDebugInfo", "ActionCancelReason", "LaneChangeGeneralInfo", "FsmNudgeInfo" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// contains all speed limit related info
  /// </summary>
  public sealed partial class SpeedLimitInfo : pb::IMessage<SpeedLimitInfo> {
    private static readonly pb::MessageParser<SpeedLimitInfo> _parser = new pb::MessageParser<SpeedLimitInfo>(() => new SpeedLimitInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpeedLimitInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.BehaviorDebugReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedLimitInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedLimitInfo(SpeedLimitInfo other) : this() {
      _hasBits0 = other._hasBits0;
      smRecommendSpeed_ = other.smRecommendSpeed_;
      bpRecommendSpeed_ = other.bpRecommendSpeed_;
      mapSpeedLimit_ = other.mapSpeedLimit_;
      currentDriverCommand_ = other.currentDriverCommand_;
      currentNavigationCommand_ = other.currentNavigationCommand_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedLimitInfo Clone() {
      return new SpeedLimitInfo(this);
    }

    /// <summary>Field number for the "sm_recommend_speed" field.</summary>
    public const int SmRecommendSpeedFieldNumber = 1;
    private readonly static float SmRecommendSpeedDefaultValue = 0F;

    private float smRecommendSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SmRecommendSpeed {
      get { if ((_hasBits0 & 1) != 0) { return smRecommendSpeed_; } else { return SmRecommendSpeedDefaultValue; } }
      set {
        _hasBits0 |= 1;
        smRecommendSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "sm_recommend_speed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSmRecommendSpeed {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "sm_recommend_speed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSmRecommendSpeed() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "bp_recommend_speed" field.</summary>
    public const int BpRecommendSpeedFieldNumber = 2;
    private readonly static float BpRecommendSpeedDefaultValue = 0F;

    private float bpRecommendSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BpRecommendSpeed {
      get { if ((_hasBits0 & 2) != 0) { return bpRecommendSpeed_; } else { return BpRecommendSpeedDefaultValue; } }
      set {
        _hasBits0 |= 2;
        bpRecommendSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "bp_recommend_speed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBpRecommendSpeed {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "bp_recommend_speed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBpRecommendSpeed() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "map_speed_limit" field.</summary>
    public const int MapSpeedLimitFieldNumber = 3;
    private readonly static float MapSpeedLimitDefaultValue = 0F;

    private float mapSpeedLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MapSpeedLimit {
      get { if ((_hasBits0 & 4) != 0) { return mapSpeedLimit_; } else { return MapSpeedLimitDefaultValue; } }
      set {
        _hasBits0 |= 4;
        mapSpeedLimit_ = value;
      }
    }
    /// <summary>Gets whether the "map_speed_limit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMapSpeedLimit {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "map_speed_limit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMapSpeedLimit() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "current_driver_command" field.</summary>
    public const int CurrentDriverCommandFieldNumber = 4;
    private readonly static int CurrentDriverCommandDefaultValue = 0;

    private int currentDriverCommand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentDriverCommand {
      get { if ((_hasBits0 & 8) != 0) { return currentDriverCommand_; } else { return CurrentDriverCommandDefaultValue; } }
      set {
        _hasBits0 |= 8;
        currentDriverCommand_ = value;
      }
    }
    /// <summary>Gets whether the "current_driver_command" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCurrentDriverCommand {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "current_driver_command" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCurrentDriverCommand() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "current_navigation_command" field.</summary>
    public const int CurrentNavigationCommandFieldNumber = 5;
    private readonly static int CurrentNavigationCommandDefaultValue = 0;

    private int currentNavigationCommand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentNavigationCommand {
      get { if ((_hasBits0 & 16) != 0) { return currentNavigationCommand_; } else { return CurrentNavigationCommandDefaultValue; } }
      set {
        _hasBits0 |= 16;
        currentNavigationCommand_ = value;
      }
    }
    /// <summary>Gets whether the "current_navigation_command" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCurrentNavigationCommand {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "current_navigation_command" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCurrentNavigationCommand() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpeedLimitInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpeedLimitInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SmRecommendSpeed, other.SmRecommendSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BpRecommendSpeed, other.BpRecommendSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MapSpeedLimit, other.MapSpeedLimit)) return false;
      if (CurrentDriverCommand != other.CurrentDriverCommand) return false;
      if (CurrentNavigationCommand != other.CurrentNavigationCommand) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSmRecommendSpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SmRecommendSpeed);
      if (HasBpRecommendSpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BpRecommendSpeed);
      if (HasMapSpeedLimit) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MapSpeedLimit);
      if (HasCurrentDriverCommand) hash ^= CurrentDriverCommand.GetHashCode();
      if (HasCurrentNavigationCommand) hash ^= CurrentNavigationCommand.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasSmRecommendSpeed) {
        output.WriteRawTag(13);
        output.WriteFloat(SmRecommendSpeed);
      }
      if (HasBpRecommendSpeed) {
        output.WriteRawTag(21);
        output.WriteFloat(BpRecommendSpeed);
      }
      if (HasMapSpeedLimit) {
        output.WriteRawTag(29);
        output.WriteFloat(MapSpeedLimit);
      }
      if (HasCurrentDriverCommand) {
        output.WriteRawTag(32);
        output.WriteInt32(CurrentDriverCommand);
      }
      if (HasCurrentNavigationCommand) {
        output.WriteRawTag(40);
        output.WriteInt32(CurrentNavigationCommand);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSmRecommendSpeed) {
        size += 1 + 4;
      }
      if (HasBpRecommendSpeed) {
        size += 1 + 4;
      }
      if (HasMapSpeedLimit) {
        size += 1 + 4;
      }
      if (HasCurrentDriverCommand) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentDriverCommand);
      }
      if (HasCurrentNavigationCommand) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentNavigationCommand);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpeedLimitInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasSmRecommendSpeed) {
        SmRecommendSpeed = other.SmRecommendSpeed;
      }
      if (other.HasBpRecommendSpeed) {
        BpRecommendSpeed = other.BpRecommendSpeed;
      }
      if (other.HasMapSpeedLimit) {
        MapSpeedLimit = other.MapSpeedLimit;
      }
      if (other.HasCurrentDriverCommand) {
        CurrentDriverCommand = other.CurrentDriverCommand;
      }
      if (other.HasCurrentNavigationCommand) {
        CurrentNavigationCommand = other.CurrentNavigationCommand;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            SmRecommendSpeed = input.ReadFloat();
            break;
          }
          case 21: {
            BpRecommendSpeed = input.ReadFloat();
            break;
          }
          case 29: {
            MapSpeedLimit = input.ReadFloat();
            break;
          }
          case 32: {
            CurrentDriverCommand = input.ReadInt32();
            break;
          }
          case 40: {
            CurrentNavigationCommand = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReferencePoint : pb::IMessage<ReferencePoint> {
    private static readonly pb::MessageParser<ReferencePoint> _parser = new pb::MessageParser<ReferencePoint>(() => new ReferencePoint());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReferencePoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.BehaviorDebugReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReferencePoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReferencePoint(ReferencePoint other) : this() {
      _hasBits0 = other._hasBits0;
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReferencePoint Clone() {
      return new ReferencePoint(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private readonly static double XDefaultValue = 0D;

    private double x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X {
      get { if ((_hasBits0 & 1) != 0) { return x_; } else { return XDefaultValue; } }
      set {
        _hasBits0 |= 1;
        x_ = value;
      }
    }
    /// <summary>Gets whether the "x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasX {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearX() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private readonly static double YDefaultValue = 0D;

    private double y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y {
      get { if ((_hasBits0 & 2) != 0) { return y_; } else { return YDefaultValue; } }
      set {
        _hasBits0 |= 2;
        y_ = value;
      }
    }
    /// <summary>Gets whether the "y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasY {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearY() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReferencePoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReferencePoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Y, other.Y)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasX) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(X);
      if (HasY) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Y);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasX) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (HasY) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasX) {
        size += 1 + 8;
      }
      if (HasY) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReferencePoint other) {
      if (other == null) {
        return;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RlDebugInfo : pb::IMessage<RlDebugInfo> {
    private static readonly pb::MessageParser<RlDebugInfo> _parser = new pb::MessageParser<RlDebugInfo>(() => new RlDebugInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RlDebugInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.BehaviorDebugReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RlDebugInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RlDebugInfo(RlDebugInfo other) : this() {
      _hasBits0 = other._hasBits0;
      index_ = other.index_;
      attribute_ = other.attribute_;
      planningDistanceM_ = other.planningDistanceM_;
      splitDistanceM_ = other.splitDistanceM_;
      mergingDistanceM_ = other.mergingDistanceM_;
      virtualPriority_ = other.virtualPriority_;
      isStuck_ = other.isStuck_;
      referenceLine_ = other.referenceLine_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RlDebugInfo Clone() {
      return new RlDebugInfo(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private readonly static int IndexDefaultValue = 0;

    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { if ((_hasBits0 & 1) != 0) { return index_; } else { return IndexDefaultValue; } }
      set {
        _hasBits0 |= 1;
        index_ = value;
      }
    }
    /// <summary>Gets whether the "index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIndex {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIndex() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 2;
    private readonly static int AttributeDefaultValue = 0;

    private int attribute_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Attribute {
      get { if ((_hasBits0 & 2) != 0) { return attribute_; } else { return AttributeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        attribute_ = value;
      }
    }
    /// <summary>Gets whether the "attribute" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAttribute {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "attribute" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAttribute() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "planning_distance_m" field.</summary>
    public const int PlanningDistanceMFieldNumber = 3;
    private readonly static double PlanningDistanceMDefaultValue = 0D;

    private double planningDistanceM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PlanningDistanceM {
      get { if ((_hasBits0 & 4) != 0) { return planningDistanceM_; } else { return PlanningDistanceMDefaultValue; } }
      set {
        _hasBits0 |= 4;
        planningDistanceM_ = value;
      }
    }
    /// <summary>Gets whether the "planning_distance_m" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlanningDistanceM {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "planning_distance_m" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlanningDistanceM() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "split_distance_m" field.</summary>
    public const int SplitDistanceMFieldNumber = 4;
    private readonly static double SplitDistanceMDefaultValue = 0D;

    private double splitDistanceM_;
    /// <summary>
    /// mod
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SplitDistanceM {
      get { if ((_hasBits0 & 8) != 0) { return splitDistanceM_; } else { return SplitDistanceMDefaultValue; } }
      set {
        _hasBits0 |= 8;
        splitDistanceM_ = value;
      }
    }
    /// <summary>Gets whether the "split_distance_m" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSplitDistanceM {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "split_distance_m" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSplitDistanceM() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "merging_distance_m" field.</summary>
    public const int MergingDistanceMFieldNumber = 5;
    private readonly static double MergingDistanceMDefaultValue = 0D;

    private double mergingDistanceM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MergingDistanceM {
      get { if ((_hasBits0 & 16) != 0) { return mergingDistanceM_; } else { return MergingDistanceMDefaultValue; } }
      set {
        _hasBits0 |= 16;
        mergingDistanceM_ = value;
      }
    }
    /// <summary>Gets whether the "merging_distance_m" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMergingDistanceM {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "merging_distance_m" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMergingDistanceM() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "virtual_priority" field.</summary>
    public const int VirtualPriorityFieldNumber = 6;
    private readonly static int VirtualPriorityDefaultValue = 0;

    private int virtualPriority_;
    /// <summary>
    /// mod
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VirtualPriority {
      get { if ((_hasBits0 & 32) != 0) { return virtualPriority_; } else { return VirtualPriorityDefaultValue; } }
      set {
        _hasBits0 |= 32;
        virtualPriority_ = value;
      }
    }
    /// <summary>Gets whether the "virtual_priority" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVirtualPriority {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "virtual_priority" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVirtualPriority() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "is_stuck" field.</summary>
    public const int IsStuckFieldNumber = 7;
    private readonly static bool IsStuckDefaultValue = false;

    private bool isStuck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStuck {
      get { if ((_hasBits0 & 64) != 0) { return isStuck_; } else { return IsStuckDefaultValue; } }
      set {
        _hasBits0 |= 64;
        isStuck_ = value;
      }
    }
    /// <summary>Gets whether the "is_stuck" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsStuck {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "is_stuck" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsStuck() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "reference_line" field.</summary>
    public const int ReferenceLineFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Xviewer.ReferencePoint> _repeated_referenceLine_codec
        = pb::FieldCodec.ForMessage(74, global::Xviewer.ReferencePoint.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.ReferencePoint> referenceLine_ = new pbc::RepeatedField<global::Xviewer.ReferencePoint>();
    /// <summary>
    ///optional string lane_turn_type = 8;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.ReferencePoint> ReferenceLine {
      get { return referenceLine_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RlDebugInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RlDebugInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Attribute != other.Attribute) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PlanningDistanceM, other.PlanningDistanceM)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SplitDistanceM, other.SplitDistanceM)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MergingDistanceM, other.MergingDistanceM)) return false;
      if (VirtualPriority != other.VirtualPriority) return false;
      if (IsStuck != other.IsStuck) return false;
      if(!referenceLine_.Equals(other.referenceLine_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIndex) hash ^= Index.GetHashCode();
      if (HasAttribute) hash ^= Attribute.GetHashCode();
      if (HasPlanningDistanceM) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PlanningDistanceM);
      if (HasSplitDistanceM) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SplitDistanceM);
      if (HasMergingDistanceM) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MergingDistanceM);
      if (HasVirtualPriority) hash ^= VirtualPriority.GetHashCode();
      if (HasIsStuck) hash ^= IsStuck.GetHashCode();
      hash ^= referenceLine_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasIndex) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (HasAttribute) {
        output.WriteRawTag(16);
        output.WriteInt32(Attribute);
      }
      if (HasPlanningDistanceM) {
        output.WriteRawTag(25);
        output.WriteDouble(PlanningDistanceM);
      }
      if (HasSplitDistanceM) {
        output.WriteRawTag(33);
        output.WriteDouble(SplitDistanceM);
      }
      if (HasMergingDistanceM) {
        output.WriteRawTag(41);
        output.WriteDouble(MergingDistanceM);
      }
      if (HasVirtualPriority) {
        output.WriteRawTag(48);
        output.WriteInt32(VirtualPriority);
      }
      if (HasIsStuck) {
        output.WriteRawTag(56);
        output.WriteBool(IsStuck);
      }
      referenceLine_.WriteTo(output, _repeated_referenceLine_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasIndex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (HasAttribute) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Attribute);
      }
      if (HasPlanningDistanceM) {
        size += 1 + 8;
      }
      if (HasSplitDistanceM) {
        size += 1 + 8;
      }
      if (HasMergingDistanceM) {
        size += 1 + 8;
      }
      if (HasVirtualPriority) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VirtualPriority);
      }
      if (HasIsStuck) {
        size += 1 + 1;
      }
      size += referenceLine_.CalculateSize(_repeated_referenceLine_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RlDebugInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasIndex) {
        Index = other.Index;
      }
      if (other.HasAttribute) {
        Attribute = other.Attribute;
      }
      if (other.HasPlanningDistanceM) {
        PlanningDistanceM = other.PlanningDistanceM;
      }
      if (other.HasSplitDistanceM) {
        SplitDistanceM = other.SplitDistanceM;
      }
      if (other.HasMergingDistanceM) {
        MergingDistanceM = other.MergingDistanceM;
      }
      if (other.HasVirtualPriority) {
        VirtualPriority = other.VirtualPriority;
      }
      if (other.HasIsStuck) {
        IsStuck = other.IsStuck;
      }
      referenceLine_.Add(other.referenceLine_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            Attribute = input.ReadInt32();
            break;
          }
          case 25: {
            PlanningDistanceM = input.ReadDouble();
            break;
          }
          case 33: {
            SplitDistanceM = input.ReadDouble();
            break;
          }
          case 41: {
            MergingDistanceM = input.ReadDouble();
            break;
          }
          case 48: {
            VirtualPriority = input.ReadInt32();
            break;
          }
          case 56: {
            IsStuck = input.ReadBool();
            break;
          }
          case 74: {
            referenceLine_.AddEntriesFrom(input, _repeated_referenceLine_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FsmLaneChangeInfo : pb::IMessage<FsmLaneChangeInfo> {
    private static readonly pb::MessageParser<FsmLaneChangeInfo> _parser = new pb::MessageParser<FsmLaneChangeInfo>(() => new FsmLaneChangeInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FsmLaneChangeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.BehaviorDebugReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FsmLaneChangeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FsmLaneChangeInfo(FsmLaneChangeInfo other) : this() {
      _hasBits0 = other._hasBits0;
      fsmLaneChangeCancelFlag_ = other.fsmLaneChangeCancelFlag_;
      laneChangeTurnLightDirection_ = other.laneChangeTurnLightDirection_;
      laneChangeDirection_ = other.laneChangeDirection_;
      laneChangeAction_ = other.laneChangeAction_;
      fsmStateMode_ = other.fsmStateMode_;
      laneChangeType_ = other.laneChangeType_;
      laneChangeCoolDownTime_ = other.laneChangeCoolDownTime_;
      laneChangePriority_ = other.laneChangePriority_;
      isFsmLaneKeeping_ = other.isFsmLaneKeeping_;
      stateRunningTime_ = other.stateRunningTime_;
      isTargetLaneCrossable_ = other.isTargetLaneCrossable_;
      canLaneChangeBeCancelled_ = other.canLaneChangeBeCancelled_;
      isFeasibleGapFound_ = other.isFeasibleGapFound_;
      highestPriorityRlIndex_ = other.highestPriorityRlIndex_;
      laneChangeCounter_ = other.laneChangeCounter_;
      debugString_ = other.debugString_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FsmLaneChangeInfo Clone() {
      return new FsmLaneChangeInfo(this);
    }

    /// <summary>Field number for the "fsm_lane_change_cancel_flag" field.</summary>
    public const int FsmLaneChangeCancelFlagFieldNumber = 1;
    private readonly static int FsmLaneChangeCancelFlagDefaultValue = 0;

    private int fsmLaneChangeCancelFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FsmLaneChangeCancelFlag {
      get { if ((_hasBits0 & 1) != 0) { return fsmLaneChangeCancelFlag_; } else { return FsmLaneChangeCancelFlagDefaultValue; } }
      set {
        _hasBits0 |= 1;
        fsmLaneChangeCancelFlag_ = value;
      }
    }
    /// <summary>Gets whether the "fsm_lane_change_cancel_flag" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFsmLaneChangeCancelFlag {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "fsm_lane_change_cancel_flag" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFsmLaneChangeCancelFlag() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lane_change_turn_light_direction" field.</summary>
    public const int LaneChangeTurnLightDirectionFieldNumber = 2;
    private readonly static int LaneChangeTurnLightDirectionDefaultValue = 0;

    private int laneChangeTurnLightDirection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LaneChangeTurnLightDirection {
      get { if ((_hasBits0 & 2) != 0) { return laneChangeTurnLightDirection_; } else { return LaneChangeTurnLightDirectionDefaultValue; } }
      set {
        _hasBits0 |= 2;
        laneChangeTurnLightDirection_ = value;
      }
    }
    /// <summary>Gets whether the "lane_change_turn_light_direction" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLaneChangeTurnLightDirection {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "lane_change_turn_light_direction" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLaneChangeTurnLightDirection() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "lane_change_direction" field.</summary>
    public const int LaneChangeDirectionFieldNumber = 3;
    private readonly static int LaneChangeDirectionDefaultValue = 0;

    private int laneChangeDirection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LaneChangeDirection {
      get { if ((_hasBits0 & 4) != 0) { return laneChangeDirection_; } else { return LaneChangeDirectionDefaultValue; } }
      set {
        _hasBits0 |= 4;
        laneChangeDirection_ = value;
      }
    }
    /// <summary>Gets whether the "lane_change_direction" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLaneChangeDirection {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "lane_change_direction" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLaneChangeDirection() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "lane_change_action" field.</summary>
    public const int LaneChangeActionFieldNumber = 4;
    private readonly static string LaneChangeActionDefaultValue = "";

    private string laneChangeAction_;
    /// <summary>
    /// mod
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LaneChangeAction {
      get { return laneChangeAction_ ?? LaneChangeActionDefaultValue; }
      set {
        laneChangeAction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "lane_change_action" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLaneChangeAction {
      get { return laneChangeAction_ != null; }
    }
    /// <summary>Clears the value of the "lane_change_action" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLaneChangeAction() {
      laneChangeAction_ = null;
    }

    /// <summary>Field number for the "fsm_state_mode" field.</summary>
    public const int FsmStateModeFieldNumber = 5;
    private readonly static string FsmStateModeDefaultValue = "";

    private string fsmStateMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FsmStateMode {
      get { return fsmStateMode_ ?? FsmStateModeDefaultValue; }
      set {
        fsmStateMode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "fsm_state_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFsmStateMode {
      get { return fsmStateMode_ != null; }
    }
    /// <summary>Clears the value of the "fsm_state_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFsmStateMode() {
      fsmStateMode_ = null;
    }

    /// <summary>Field number for the "lane_change_type" field.</summary>
    public const int LaneChangeTypeFieldNumber = 6;
    private readonly static string LaneChangeTypeDefaultValue = "";

    private string laneChangeType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LaneChangeType {
      get { return laneChangeType_ ?? LaneChangeTypeDefaultValue; }
      set {
        laneChangeType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "lane_change_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLaneChangeType {
      get { return laneChangeType_ != null; }
    }
    /// <summary>Clears the value of the "lane_change_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLaneChangeType() {
      laneChangeType_ = null;
    }

    /// <summary>Field number for the "lane_change_cool_down_time" field.</summary>
    public const int LaneChangeCoolDownTimeFieldNumber = 7;
    private readonly static int LaneChangeCoolDownTimeDefaultValue = 0;

    private int laneChangeCoolDownTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LaneChangeCoolDownTime {
      get { if ((_hasBits0 & 8) != 0) { return laneChangeCoolDownTime_; } else { return LaneChangeCoolDownTimeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        laneChangeCoolDownTime_ = value;
      }
    }
    /// <summary>Gets whether the "lane_change_cool_down_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLaneChangeCoolDownTime {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "lane_change_cool_down_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLaneChangeCoolDownTime() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "lane_change_priority" field.</summary>
    public const int LaneChangePriorityFieldNumber = 8;
    private readonly static double LaneChangePriorityDefaultValue = 0D;

    private double laneChangePriority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LaneChangePriority {
      get { if ((_hasBits0 & 16) != 0) { return laneChangePriority_; } else { return LaneChangePriorityDefaultValue; } }
      set {
        _hasBits0 |= 16;
        laneChangePriority_ = value;
      }
    }
    /// <summary>Gets whether the "lane_change_priority" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLaneChangePriority {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "lane_change_priority" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLaneChangePriority() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "is_fsm_lane_keeping" field.</summary>
    public const int IsFsmLaneKeepingFieldNumber = 9;
    private readonly static bool IsFsmLaneKeepingDefaultValue = false;

    private bool isFsmLaneKeeping_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFsmLaneKeeping {
      get { if ((_hasBits0 & 32) != 0) { return isFsmLaneKeeping_; } else { return IsFsmLaneKeepingDefaultValue; } }
      set {
        _hasBits0 |= 32;
        isFsmLaneKeeping_ = value;
      }
    }
    /// <summary>Gets whether the "is_fsm_lane_keeping" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsFsmLaneKeeping {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "is_fsm_lane_keeping" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsFsmLaneKeeping() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "state_running_time" field.</summary>
    public const int StateRunningTimeFieldNumber = 10;
    private readonly static int StateRunningTimeDefaultValue = 0;

    private int stateRunningTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StateRunningTime {
      get { if ((_hasBits0 & 64) != 0) { return stateRunningTime_; } else { return StateRunningTimeDefaultValue; } }
      set {
        _hasBits0 |= 64;
        stateRunningTime_ = value;
      }
    }
    /// <summary>Gets whether the "state_running_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStateRunningTime {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "state_running_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStateRunningTime() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "is_target_lane_crossable" field.</summary>
    public const int IsTargetLaneCrossableFieldNumber = 11;
    private readonly static bool IsTargetLaneCrossableDefaultValue = false;

    private bool isTargetLaneCrossable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTargetLaneCrossable {
      get { if ((_hasBits0 & 128) != 0) { return isTargetLaneCrossable_; } else { return IsTargetLaneCrossableDefaultValue; } }
      set {
        _hasBits0 |= 128;
        isTargetLaneCrossable_ = value;
      }
    }
    /// <summary>Gets whether the "is_target_lane_crossable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsTargetLaneCrossable {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "is_target_lane_crossable" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsTargetLaneCrossable() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "can_lane_change_be_cancelled" field.</summary>
    public const int CanLaneChangeBeCancelledFieldNumber = 12;
    private readonly static bool CanLaneChangeBeCancelledDefaultValue = false;

    private bool canLaneChangeBeCancelled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanLaneChangeBeCancelled {
      get { if ((_hasBits0 & 256) != 0) { return canLaneChangeBeCancelled_; } else { return CanLaneChangeBeCancelledDefaultValue; } }
      set {
        _hasBits0 |= 256;
        canLaneChangeBeCancelled_ = value;
      }
    }
    /// <summary>Gets whether the "can_lane_change_be_cancelled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCanLaneChangeBeCancelled {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "can_lane_change_be_cancelled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCanLaneChangeBeCancelled() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "is_feasible_gap_found" field.</summary>
    public const int IsFeasibleGapFoundFieldNumber = 13;
    private readonly static bool IsFeasibleGapFoundDefaultValue = false;

    private bool isFeasibleGapFound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFeasibleGapFound {
      get { if ((_hasBits0 & 512) != 0) { return isFeasibleGapFound_; } else { return IsFeasibleGapFoundDefaultValue; } }
      set {
        _hasBits0 |= 512;
        isFeasibleGapFound_ = value;
      }
    }
    /// <summary>Gets whether the "is_feasible_gap_found" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsFeasibleGapFound {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "is_feasible_gap_found" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsFeasibleGapFound() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "highest_priority_rl_index" field.</summary>
    public const int HighestPriorityRlIndexFieldNumber = 14;
    private readonly static int HighestPriorityRlIndexDefaultValue = 0;

    private int highestPriorityRlIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HighestPriorityRlIndex {
      get { if ((_hasBits0 & 1024) != 0) { return highestPriorityRlIndex_; } else { return HighestPriorityRlIndexDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        highestPriorityRlIndex_ = value;
      }
    }
    /// <summary>Gets whether the "highest_priority_rl_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHighestPriorityRlIndex {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "highest_priority_rl_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHighestPriorityRlIndex() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "lane_change_counter" field.</summary>
    public const int LaneChangeCounterFieldNumber = 15;
    private readonly static int LaneChangeCounterDefaultValue = 0;

    private int laneChangeCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LaneChangeCounter {
      get { if ((_hasBits0 & 2048) != 0) { return laneChangeCounter_; } else { return LaneChangeCounterDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        laneChangeCounter_ = value;
      }
    }
    /// <summary>Gets whether the "lane_change_counter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLaneChangeCounter {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "lane_change_counter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLaneChangeCounter() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "debug_string" field.</summary>
    public const int DebugStringFieldNumber = 16;
    private readonly static string DebugStringDefaultValue = "";

    private string debugString_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DebugString {
      get { return debugString_ ?? DebugStringDefaultValue; }
      set {
        debugString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "debug_string" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDebugString {
      get { return debugString_ != null; }
    }
    /// <summary>Clears the value of the "debug_string" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDebugString() {
      debugString_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FsmLaneChangeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FsmLaneChangeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FsmLaneChangeCancelFlag != other.FsmLaneChangeCancelFlag) return false;
      if (LaneChangeTurnLightDirection != other.LaneChangeTurnLightDirection) return false;
      if (LaneChangeDirection != other.LaneChangeDirection) return false;
      if (LaneChangeAction != other.LaneChangeAction) return false;
      if (FsmStateMode != other.FsmStateMode) return false;
      if (LaneChangeType != other.LaneChangeType) return false;
      if (LaneChangeCoolDownTime != other.LaneChangeCoolDownTime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LaneChangePriority, other.LaneChangePriority)) return false;
      if (IsFsmLaneKeeping != other.IsFsmLaneKeeping) return false;
      if (StateRunningTime != other.StateRunningTime) return false;
      if (IsTargetLaneCrossable != other.IsTargetLaneCrossable) return false;
      if (CanLaneChangeBeCancelled != other.CanLaneChangeBeCancelled) return false;
      if (IsFeasibleGapFound != other.IsFeasibleGapFound) return false;
      if (HighestPriorityRlIndex != other.HighestPriorityRlIndex) return false;
      if (LaneChangeCounter != other.LaneChangeCounter) return false;
      if (DebugString != other.DebugString) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasFsmLaneChangeCancelFlag) hash ^= FsmLaneChangeCancelFlag.GetHashCode();
      if (HasLaneChangeTurnLightDirection) hash ^= LaneChangeTurnLightDirection.GetHashCode();
      if (HasLaneChangeDirection) hash ^= LaneChangeDirection.GetHashCode();
      if (HasLaneChangeAction) hash ^= LaneChangeAction.GetHashCode();
      if (HasFsmStateMode) hash ^= FsmStateMode.GetHashCode();
      if (HasLaneChangeType) hash ^= LaneChangeType.GetHashCode();
      if (HasLaneChangeCoolDownTime) hash ^= LaneChangeCoolDownTime.GetHashCode();
      if (HasLaneChangePriority) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LaneChangePriority);
      if (HasIsFsmLaneKeeping) hash ^= IsFsmLaneKeeping.GetHashCode();
      if (HasStateRunningTime) hash ^= StateRunningTime.GetHashCode();
      if (HasIsTargetLaneCrossable) hash ^= IsTargetLaneCrossable.GetHashCode();
      if (HasCanLaneChangeBeCancelled) hash ^= CanLaneChangeBeCancelled.GetHashCode();
      if (HasIsFeasibleGapFound) hash ^= IsFeasibleGapFound.GetHashCode();
      if (HasHighestPriorityRlIndex) hash ^= HighestPriorityRlIndex.GetHashCode();
      if (HasLaneChangeCounter) hash ^= LaneChangeCounter.GetHashCode();
      if (HasDebugString) hash ^= DebugString.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasFsmLaneChangeCancelFlag) {
        output.WriteRawTag(8);
        output.WriteInt32(FsmLaneChangeCancelFlag);
      }
      if (HasLaneChangeTurnLightDirection) {
        output.WriteRawTag(16);
        output.WriteInt32(LaneChangeTurnLightDirection);
      }
      if (HasLaneChangeDirection) {
        output.WriteRawTag(24);
        output.WriteInt32(LaneChangeDirection);
      }
      if (HasLaneChangeAction) {
        output.WriteRawTag(34);
        output.WriteString(LaneChangeAction);
      }
      if (HasFsmStateMode) {
        output.WriteRawTag(42);
        output.WriteString(FsmStateMode);
      }
      if (HasLaneChangeType) {
        output.WriteRawTag(50);
        output.WriteString(LaneChangeType);
      }
      if (HasLaneChangeCoolDownTime) {
        output.WriteRawTag(56);
        output.WriteInt32(LaneChangeCoolDownTime);
      }
      if (HasLaneChangePriority) {
        output.WriteRawTag(65);
        output.WriteDouble(LaneChangePriority);
      }
      if (HasIsFsmLaneKeeping) {
        output.WriteRawTag(72);
        output.WriteBool(IsFsmLaneKeeping);
      }
      if (HasStateRunningTime) {
        output.WriteRawTag(80);
        output.WriteInt32(StateRunningTime);
      }
      if (HasIsTargetLaneCrossable) {
        output.WriteRawTag(88);
        output.WriteBool(IsTargetLaneCrossable);
      }
      if (HasCanLaneChangeBeCancelled) {
        output.WriteRawTag(96);
        output.WriteBool(CanLaneChangeBeCancelled);
      }
      if (HasIsFeasibleGapFound) {
        output.WriteRawTag(104);
        output.WriteBool(IsFeasibleGapFound);
      }
      if (HasHighestPriorityRlIndex) {
        output.WriteRawTag(112);
        output.WriteInt32(HighestPriorityRlIndex);
      }
      if (HasLaneChangeCounter) {
        output.WriteRawTag(120);
        output.WriteInt32(LaneChangeCounter);
      }
      if (HasDebugString) {
        output.WriteRawTag(130, 1);
        output.WriteString(DebugString);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasFsmLaneChangeCancelFlag) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FsmLaneChangeCancelFlag);
      }
      if (HasLaneChangeTurnLightDirection) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LaneChangeTurnLightDirection);
      }
      if (HasLaneChangeDirection) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LaneChangeDirection);
      }
      if (HasLaneChangeAction) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LaneChangeAction);
      }
      if (HasFsmStateMode) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FsmStateMode);
      }
      if (HasLaneChangeType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LaneChangeType);
      }
      if (HasLaneChangeCoolDownTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LaneChangeCoolDownTime);
      }
      if (HasLaneChangePriority) {
        size += 1 + 8;
      }
      if (HasIsFsmLaneKeeping) {
        size += 1 + 1;
      }
      if (HasStateRunningTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StateRunningTime);
      }
      if (HasIsTargetLaneCrossable) {
        size += 1 + 1;
      }
      if (HasCanLaneChangeBeCancelled) {
        size += 1 + 1;
      }
      if (HasIsFeasibleGapFound) {
        size += 1 + 1;
      }
      if (HasHighestPriorityRlIndex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HighestPriorityRlIndex);
      }
      if (HasLaneChangeCounter) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LaneChangeCounter);
      }
      if (HasDebugString) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DebugString);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FsmLaneChangeInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasFsmLaneChangeCancelFlag) {
        FsmLaneChangeCancelFlag = other.FsmLaneChangeCancelFlag;
      }
      if (other.HasLaneChangeTurnLightDirection) {
        LaneChangeTurnLightDirection = other.LaneChangeTurnLightDirection;
      }
      if (other.HasLaneChangeDirection) {
        LaneChangeDirection = other.LaneChangeDirection;
      }
      if (other.HasLaneChangeAction) {
        LaneChangeAction = other.LaneChangeAction;
      }
      if (other.HasFsmStateMode) {
        FsmStateMode = other.FsmStateMode;
      }
      if (other.HasLaneChangeType) {
        LaneChangeType = other.LaneChangeType;
      }
      if (other.HasLaneChangeCoolDownTime) {
        LaneChangeCoolDownTime = other.LaneChangeCoolDownTime;
      }
      if (other.HasLaneChangePriority) {
        LaneChangePriority = other.LaneChangePriority;
      }
      if (other.HasIsFsmLaneKeeping) {
        IsFsmLaneKeeping = other.IsFsmLaneKeeping;
      }
      if (other.HasStateRunningTime) {
        StateRunningTime = other.StateRunningTime;
      }
      if (other.HasIsTargetLaneCrossable) {
        IsTargetLaneCrossable = other.IsTargetLaneCrossable;
      }
      if (other.HasCanLaneChangeBeCancelled) {
        CanLaneChangeBeCancelled = other.CanLaneChangeBeCancelled;
      }
      if (other.HasIsFeasibleGapFound) {
        IsFeasibleGapFound = other.IsFeasibleGapFound;
      }
      if (other.HasHighestPriorityRlIndex) {
        HighestPriorityRlIndex = other.HighestPriorityRlIndex;
      }
      if (other.HasLaneChangeCounter) {
        LaneChangeCounter = other.LaneChangeCounter;
      }
      if (other.HasDebugString) {
        DebugString = other.DebugString;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FsmLaneChangeCancelFlag = input.ReadInt32();
            break;
          }
          case 16: {
            LaneChangeTurnLightDirection = input.ReadInt32();
            break;
          }
          case 24: {
            LaneChangeDirection = input.ReadInt32();
            break;
          }
          case 34: {
            LaneChangeAction = input.ReadString();
            break;
          }
          case 42: {
            FsmStateMode = input.ReadString();
            break;
          }
          case 50: {
            LaneChangeType = input.ReadString();
            break;
          }
          case 56: {
            LaneChangeCoolDownTime = input.ReadInt32();
            break;
          }
          case 65: {
            LaneChangePriority = input.ReadDouble();
            break;
          }
          case 72: {
            IsFsmLaneKeeping = input.ReadBool();
            break;
          }
          case 80: {
            StateRunningTime = input.ReadInt32();
            break;
          }
          case 88: {
            IsTargetLaneCrossable = input.ReadBool();
            break;
          }
          case 96: {
            CanLaneChangeBeCancelled = input.ReadBool();
            break;
          }
          case 104: {
            IsFeasibleGapFound = input.ReadBool();
            break;
          }
          case 112: {
            HighestPriorityRlIndex = input.ReadInt32();
            break;
          }
          case 120: {
            LaneChangeCounter = input.ReadInt32();
            break;
          }
          case 130: {
            DebugString = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FsmNudgeInfo : pb::IMessage<FsmNudgeInfo> {
    private static readonly pb::MessageParser<FsmNudgeInfo> _parser = new pb::MessageParser<FsmNudgeInfo>(() => new FsmNudgeInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FsmNudgeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.BehaviorDebugReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FsmNudgeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FsmNudgeInfo(FsmNudgeInfo other) : this() {
      _hasBits0 = other._hasBits0;
      fsmNudgeCancelFlag_ = other.fsmNudgeCancelFlag_;
      nudgeDirection_ = other.nudgeDirection_;
      nudgeAction_ = other.nudgeAction_;
      fsmStateMode_ = other.fsmStateMode_;
      nudgeType_ = other.nudgeType_;
      nudgeCoolDownTime_ = other.nudgeCoolDownTime_;
      nudgePriority_ = other.nudgePriority_;
      isFsmLaneKeeping_ = other.isFsmLaneKeeping_;
      stateRunningTime_ = other.stateRunningTime_;
      isTargetLaneCrossable_ = other.isTargetLaneCrossable_;
      canNudgeBeCancelled_ = other.canNudgeBeCancelled_;
      isFeasibleGapFound_ = other.isFeasibleGapFound_;
      nudgeCounter_ = other.nudgeCounter_;
      debugString_ = other.debugString_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FsmNudgeInfo Clone() {
      return new FsmNudgeInfo(this);
    }

    /// <summary>Field number for the "fsm_nudge_cancel_flag" field.</summary>
    public const int FsmNudgeCancelFlagFieldNumber = 1;
    private readonly static int FsmNudgeCancelFlagDefaultValue = 0;

    private int fsmNudgeCancelFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FsmNudgeCancelFlag {
      get { if ((_hasBits0 & 1) != 0) { return fsmNudgeCancelFlag_; } else { return FsmNudgeCancelFlagDefaultValue; } }
      set {
        _hasBits0 |= 1;
        fsmNudgeCancelFlag_ = value;
      }
    }
    /// <summary>Gets whether the "fsm_nudge_cancel_flag" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFsmNudgeCancelFlag {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "fsm_nudge_cancel_flag" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFsmNudgeCancelFlag() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "nudge_direction" field.</summary>
    public const int NudgeDirectionFieldNumber = 2;
    private readonly static int NudgeDirectionDefaultValue = 0;

    private int nudgeDirection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NudgeDirection {
      get { if ((_hasBits0 & 2) != 0) { return nudgeDirection_; } else { return NudgeDirectionDefaultValue; } }
      set {
        _hasBits0 |= 2;
        nudgeDirection_ = value;
      }
    }
    /// <summary>Gets whether the "nudge_direction" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNudgeDirection {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "nudge_direction" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNudgeDirection() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "nudge_action" field.</summary>
    public const int NudgeActionFieldNumber = 3;
    private readonly static int NudgeActionDefaultValue = 0;

    private int nudgeAction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NudgeAction {
      get { if ((_hasBits0 & 4) != 0) { return nudgeAction_; } else { return NudgeActionDefaultValue; } }
      set {
        _hasBits0 |= 4;
        nudgeAction_ = value;
      }
    }
    /// <summary>Gets whether the "nudge_action" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNudgeAction {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "nudge_action" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNudgeAction() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "fsm_state_mode" field.</summary>
    public const int FsmStateModeFieldNumber = 4;
    private readonly static int FsmStateModeDefaultValue = 0;

    private int fsmStateMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FsmStateMode {
      get { if ((_hasBits0 & 8) != 0) { return fsmStateMode_; } else { return FsmStateModeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        fsmStateMode_ = value;
      }
    }
    /// <summary>Gets whether the "fsm_state_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFsmStateMode {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "fsm_state_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFsmStateMode() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "nudge_type" field.</summary>
    public const int NudgeTypeFieldNumber = 5;
    private readonly static int NudgeTypeDefaultValue = 0;

    private int nudgeType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NudgeType {
      get { if ((_hasBits0 & 16) != 0) { return nudgeType_; } else { return NudgeTypeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        nudgeType_ = value;
      }
    }
    /// <summary>Gets whether the "nudge_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNudgeType {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "nudge_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNudgeType() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "nudge_cool_down_time" field.</summary>
    public const int NudgeCoolDownTimeFieldNumber = 6;
    private readonly static int NudgeCoolDownTimeDefaultValue = 0;

    private int nudgeCoolDownTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NudgeCoolDownTime {
      get { if ((_hasBits0 & 32) != 0) { return nudgeCoolDownTime_; } else { return NudgeCoolDownTimeDefaultValue; } }
      set {
        _hasBits0 |= 32;
        nudgeCoolDownTime_ = value;
      }
    }
    /// <summary>Gets whether the "nudge_cool_down_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNudgeCoolDownTime {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "nudge_cool_down_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNudgeCoolDownTime() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "nudge_priority" field.</summary>
    public const int NudgePriorityFieldNumber = 7;
    private readonly static double NudgePriorityDefaultValue = 0D;

    private double nudgePriority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double NudgePriority {
      get { if ((_hasBits0 & 64) != 0) { return nudgePriority_; } else { return NudgePriorityDefaultValue; } }
      set {
        _hasBits0 |= 64;
        nudgePriority_ = value;
      }
    }
    /// <summary>Gets whether the "nudge_priority" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNudgePriority {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "nudge_priority" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNudgePriority() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "is_fsm_lane_keeping" field.</summary>
    public const int IsFsmLaneKeepingFieldNumber = 8;
    private readonly static bool IsFsmLaneKeepingDefaultValue = false;

    private bool isFsmLaneKeeping_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFsmLaneKeeping {
      get { if ((_hasBits0 & 128) != 0) { return isFsmLaneKeeping_; } else { return IsFsmLaneKeepingDefaultValue; } }
      set {
        _hasBits0 |= 128;
        isFsmLaneKeeping_ = value;
      }
    }
    /// <summary>Gets whether the "is_fsm_lane_keeping" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsFsmLaneKeeping {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "is_fsm_lane_keeping" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsFsmLaneKeeping() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "state_running_time" field.</summary>
    public const int StateRunningTimeFieldNumber = 9;
    private readonly static int StateRunningTimeDefaultValue = 0;

    private int stateRunningTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StateRunningTime {
      get { if ((_hasBits0 & 256) != 0) { return stateRunningTime_; } else { return StateRunningTimeDefaultValue; } }
      set {
        _hasBits0 |= 256;
        stateRunningTime_ = value;
      }
    }
    /// <summary>Gets whether the "state_running_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStateRunningTime {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "state_running_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStateRunningTime() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "is_target_lane_crossable" field.</summary>
    public const int IsTargetLaneCrossableFieldNumber = 10;
    private readonly static bool IsTargetLaneCrossableDefaultValue = false;

    private bool isTargetLaneCrossable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTargetLaneCrossable {
      get { if ((_hasBits0 & 512) != 0) { return isTargetLaneCrossable_; } else { return IsTargetLaneCrossableDefaultValue; } }
      set {
        _hasBits0 |= 512;
        isTargetLaneCrossable_ = value;
      }
    }
    /// <summary>Gets whether the "is_target_lane_crossable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsTargetLaneCrossable {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "is_target_lane_crossable" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsTargetLaneCrossable() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "can_nudge_be_cancelled" field.</summary>
    public const int CanNudgeBeCancelledFieldNumber = 11;
    private readonly static bool CanNudgeBeCancelledDefaultValue = false;

    private bool canNudgeBeCancelled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanNudgeBeCancelled {
      get { if ((_hasBits0 & 1024) != 0) { return canNudgeBeCancelled_; } else { return CanNudgeBeCancelledDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        canNudgeBeCancelled_ = value;
      }
    }
    /// <summary>Gets whether the "can_nudge_be_cancelled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCanNudgeBeCancelled {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "can_nudge_be_cancelled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCanNudgeBeCancelled() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "is_feasible_gap_found" field.</summary>
    public const int IsFeasibleGapFoundFieldNumber = 12;
    private readonly static bool IsFeasibleGapFoundDefaultValue = false;

    private bool isFeasibleGapFound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFeasibleGapFound {
      get { if ((_hasBits0 & 2048) != 0) { return isFeasibleGapFound_; } else { return IsFeasibleGapFoundDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        isFeasibleGapFound_ = value;
      }
    }
    /// <summary>Gets whether the "is_feasible_gap_found" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsFeasibleGapFound {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "is_feasible_gap_found" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsFeasibleGapFound() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "nudge_counter" field.</summary>
    public const int NudgeCounterFieldNumber = 13;
    private readonly static int NudgeCounterDefaultValue = 0;

    private int nudgeCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NudgeCounter {
      get { if ((_hasBits0 & 4096) != 0) { return nudgeCounter_; } else { return NudgeCounterDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        nudgeCounter_ = value;
      }
    }
    /// <summary>Gets whether the "nudge_counter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNudgeCounter {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "nudge_counter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNudgeCounter() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "debug_string" field.</summary>
    public const int DebugStringFieldNumber = 14;
    private readonly static string DebugStringDefaultValue = "";

    private string debugString_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DebugString {
      get { return debugString_ ?? DebugStringDefaultValue; }
      set {
        debugString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "debug_string" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDebugString {
      get { return debugString_ != null; }
    }
    /// <summary>Clears the value of the "debug_string" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDebugString() {
      debugString_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FsmNudgeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FsmNudgeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FsmNudgeCancelFlag != other.FsmNudgeCancelFlag) return false;
      if (NudgeDirection != other.NudgeDirection) return false;
      if (NudgeAction != other.NudgeAction) return false;
      if (FsmStateMode != other.FsmStateMode) return false;
      if (NudgeType != other.NudgeType) return false;
      if (NudgeCoolDownTime != other.NudgeCoolDownTime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NudgePriority, other.NudgePriority)) return false;
      if (IsFsmLaneKeeping != other.IsFsmLaneKeeping) return false;
      if (StateRunningTime != other.StateRunningTime) return false;
      if (IsTargetLaneCrossable != other.IsTargetLaneCrossable) return false;
      if (CanNudgeBeCancelled != other.CanNudgeBeCancelled) return false;
      if (IsFeasibleGapFound != other.IsFeasibleGapFound) return false;
      if (NudgeCounter != other.NudgeCounter) return false;
      if (DebugString != other.DebugString) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasFsmNudgeCancelFlag) hash ^= FsmNudgeCancelFlag.GetHashCode();
      if (HasNudgeDirection) hash ^= NudgeDirection.GetHashCode();
      if (HasNudgeAction) hash ^= NudgeAction.GetHashCode();
      if (HasFsmStateMode) hash ^= FsmStateMode.GetHashCode();
      if (HasNudgeType) hash ^= NudgeType.GetHashCode();
      if (HasNudgeCoolDownTime) hash ^= NudgeCoolDownTime.GetHashCode();
      if (HasNudgePriority) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NudgePriority);
      if (HasIsFsmLaneKeeping) hash ^= IsFsmLaneKeeping.GetHashCode();
      if (HasStateRunningTime) hash ^= StateRunningTime.GetHashCode();
      if (HasIsTargetLaneCrossable) hash ^= IsTargetLaneCrossable.GetHashCode();
      if (HasCanNudgeBeCancelled) hash ^= CanNudgeBeCancelled.GetHashCode();
      if (HasIsFeasibleGapFound) hash ^= IsFeasibleGapFound.GetHashCode();
      if (HasNudgeCounter) hash ^= NudgeCounter.GetHashCode();
      if (HasDebugString) hash ^= DebugString.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasFsmNudgeCancelFlag) {
        output.WriteRawTag(8);
        output.WriteInt32(FsmNudgeCancelFlag);
      }
      if (HasNudgeDirection) {
        output.WriteRawTag(16);
        output.WriteInt32(NudgeDirection);
      }
      if (HasNudgeAction) {
        output.WriteRawTag(24);
        output.WriteInt32(NudgeAction);
      }
      if (HasFsmStateMode) {
        output.WriteRawTag(32);
        output.WriteInt32(FsmStateMode);
      }
      if (HasNudgeType) {
        output.WriteRawTag(40);
        output.WriteInt32(NudgeType);
      }
      if (HasNudgeCoolDownTime) {
        output.WriteRawTag(48);
        output.WriteInt32(NudgeCoolDownTime);
      }
      if (HasNudgePriority) {
        output.WriteRawTag(57);
        output.WriteDouble(NudgePriority);
      }
      if (HasIsFsmLaneKeeping) {
        output.WriteRawTag(64);
        output.WriteBool(IsFsmLaneKeeping);
      }
      if (HasStateRunningTime) {
        output.WriteRawTag(72);
        output.WriteInt32(StateRunningTime);
      }
      if (HasIsTargetLaneCrossable) {
        output.WriteRawTag(80);
        output.WriteBool(IsTargetLaneCrossable);
      }
      if (HasCanNudgeBeCancelled) {
        output.WriteRawTag(88);
        output.WriteBool(CanNudgeBeCancelled);
      }
      if (HasIsFeasibleGapFound) {
        output.WriteRawTag(96);
        output.WriteBool(IsFeasibleGapFound);
      }
      if (HasNudgeCounter) {
        output.WriteRawTag(104);
        output.WriteInt32(NudgeCounter);
      }
      if (HasDebugString) {
        output.WriteRawTag(114);
        output.WriteString(DebugString);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasFsmNudgeCancelFlag) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FsmNudgeCancelFlag);
      }
      if (HasNudgeDirection) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NudgeDirection);
      }
      if (HasNudgeAction) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NudgeAction);
      }
      if (HasFsmStateMode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FsmStateMode);
      }
      if (HasNudgeType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NudgeType);
      }
      if (HasNudgeCoolDownTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NudgeCoolDownTime);
      }
      if (HasNudgePriority) {
        size += 1 + 8;
      }
      if (HasIsFsmLaneKeeping) {
        size += 1 + 1;
      }
      if (HasStateRunningTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StateRunningTime);
      }
      if (HasIsTargetLaneCrossable) {
        size += 1 + 1;
      }
      if (HasCanNudgeBeCancelled) {
        size += 1 + 1;
      }
      if (HasIsFeasibleGapFound) {
        size += 1 + 1;
      }
      if (HasNudgeCounter) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NudgeCounter);
      }
      if (HasDebugString) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DebugString);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FsmNudgeInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasFsmNudgeCancelFlag) {
        FsmNudgeCancelFlag = other.FsmNudgeCancelFlag;
      }
      if (other.HasNudgeDirection) {
        NudgeDirection = other.NudgeDirection;
      }
      if (other.HasNudgeAction) {
        NudgeAction = other.NudgeAction;
      }
      if (other.HasFsmStateMode) {
        FsmStateMode = other.FsmStateMode;
      }
      if (other.HasNudgeType) {
        NudgeType = other.NudgeType;
      }
      if (other.HasNudgeCoolDownTime) {
        NudgeCoolDownTime = other.NudgeCoolDownTime;
      }
      if (other.HasNudgePriority) {
        NudgePriority = other.NudgePriority;
      }
      if (other.HasIsFsmLaneKeeping) {
        IsFsmLaneKeeping = other.IsFsmLaneKeeping;
      }
      if (other.HasStateRunningTime) {
        StateRunningTime = other.StateRunningTime;
      }
      if (other.HasIsTargetLaneCrossable) {
        IsTargetLaneCrossable = other.IsTargetLaneCrossable;
      }
      if (other.HasCanNudgeBeCancelled) {
        CanNudgeBeCancelled = other.CanNudgeBeCancelled;
      }
      if (other.HasIsFeasibleGapFound) {
        IsFeasibleGapFound = other.IsFeasibleGapFound;
      }
      if (other.HasNudgeCounter) {
        NudgeCounter = other.NudgeCounter;
      }
      if (other.HasDebugString) {
        DebugString = other.DebugString;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FsmNudgeCancelFlag = input.ReadInt32();
            break;
          }
          case 16: {
            NudgeDirection = input.ReadInt32();
            break;
          }
          case 24: {
            NudgeAction = input.ReadInt32();
            break;
          }
          case 32: {
            FsmStateMode = input.ReadInt32();
            break;
          }
          case 40: {
            NudgeType = input.ReadInt32();
            break;
          }
          case 48: {
            NudgeCoolDownTime = input.ReadInt32();
            break;
          }
          case 57: {
            NudgePriority = input.ReadDouble();
            break;
          }
          case 64: {
            IsFsmLaneKeeping = input.ReadBool();
            break;
          }
          case 72: {
            StateRunningTime = input.ReadInt32();
            break;
          }
          case 80: {
            IsTargetLaneCrossable = input.ReadBool();
            break;
          }
          case 88: {
            CanNudgeBeCancelled = input.ReadBool();
            break;
          }
          case 96: {
            IsFeasibleGapFound = input.ReadBool();
            break;
          }
          case 104: {
            NudgeCounter = input.ReadInt32();
            break;
          }
          case 114: {
            DebugString = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EgoCarPose : pb::IMessage<EgoCarPose> {
    private static readonly pb::MessageParser<EgoCarPose> _parser = new pb::MessageParser<EgoCarPose>(() => new EgoCarPose());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EgoCarPose> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.BehaviorDebugReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgoCarPose() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgoCarPose(EgoCarPose other) : this() {
      _hasBits0 = other._hasBits0;
      systemCurrentTimeX_ = other.systemCurrentTimeX_;
      systemCurrentTimeY_ = other.systemCurrentTimeY_;
      systemCurrentTimeHeading_ = other.systemCurrentTimeHeading_;
      timeAlignedSpeedMps_ = other.timeAlignedSpeedMps_;
      timeAlignedAccelMps2_ = other.timeAlignedAccelMps2_;
      timeAlignedJerkMps3_ = other.timeAlignedJerkMps3_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgoCarPose Clone() {
      return new EgoCarPose(this);
    }

    /// <summary>Field number for the "system_current_time_x" field.</summary>
    public const int SystemCurrentTimeXFieldNumber = 1;
    private readonly static double SystemCurrentTimeXDefaultValue = 0D;

    private double systemCurrentTimeX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SystemCurrentTimeX {
      get { if ((_hasBits0 & 1) != 0) { return systemCurrentTimeX_; } else { return SystemCurrentTimeXDefaultValue; } }
      set {
        _hasBits0 |= 1;
        systemCurrentTimeX_ = value;
      }
    }
    /// <summary>Gets whether the "system_current_time_x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSystemCurrentTimeX {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "system_current_time_x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSystemCurrentTimeX() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "system_current_time_y" field.</summary>
    public const int SystemCurrentTimeYFieldNumber = 2;
    private readonly static double SystemCurrentTimeYDefaultValue = 0D;

    private double systemCurrentTimeY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SystemCurrentTimeY {
      get { if ((_hasBits0 & 2) != 0) { return systemCurrentTimeY_; } else { return SystemCurrentTimeYDefaultValue; } }
      set {
        _hasBits0 |= 2;
        systemCurrentTimeY_ = value;
      }
    }
    /// <summary>Gets whether the "system_current_time_y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSystemCurrentTimeY {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "system_current_time_y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSystemCurrentTimeY() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "system_current_time_heading" field.</summary>
    public const int SystemCurrentTimeHeadingFieldNumber = 3;
    private readonly static double SystemCurrentTimeHeadingDefaultValue = 0D;

    private double systemCurrentTimeHeading_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SystemCurrentTimeHeading {
      get { if ((_hasBits0 & 4) != 0) { return systemCurrentTimeHeading_; } else { return SystemCurrentTimeHeadingDefaultValue; } }
      set {
        _hasBits0 |= 4;
        systemCurrentTimeHeading_ = value;
      }
    }
    /// <summary>Gets whether the "system_current_time_heading" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSystemCurrentTimeHeading {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "system_current_time_heading" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSystemCurrentTimeHeading() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "time_aligned_speed_mps" field.</summary>
    public const int TimeAlignedSpeedMpsFieldNumber = 4;
    private readonly static double TimeAlignedSpeedMpsDefaultValue = 0D;

    private double timeAlignedSpeedMps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TimeAlignedSpeedMps {
      get { if ((_hasBits0 & 8) != 0) { return timeAlignedSpeedMps_; } else { return TimeAlignedSpeedMpsDefaultValue; } }
      set {
        _hasBits0 |= 8;
        timeAlignedSpeedMps_ = value;
      }
    }
    /// <summary>Gets whether the "time_aligned_speed_mps" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimeAlignedSpeedMps {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "time_aligned_speed_mps" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimeAlignedSpeedMps() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "time_aligned_accel_mps2" field.</summary>
    public const int TimeAlignedAccelMps2FieldNumber = 5;
    private readonly static double TimeAlignedAccelMps2DefaultValue = 0D;

    private double timeAlignedAccelMps2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TimeAlignedAccelMps2 {
      get { if ((_hasBits0 & 16) != 0) { return timeAlignedAccelMps2_; } else { return TimeAlignedAccelMps2DefaultValue; } }
      set {
        _hasBits0 |= 16;
        timeAlignedAccelMps2_ = value;
      }
    }
    /// <summary>Gets whether the "time_aligned_accel_mps2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimeAlignedAccelMps2 {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "time_aligned_accel_mps2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimeAlignedAccelMps2() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "time_aligned_jerk_mps3" field.</summary>
    public const int TimeAlignedJerkMps3FieldNumber = 6;
    private readonly static double TimeAlignedJerkMps3DefaultValue = 0D;

    private double timeAlignedJerkMps3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TimeAlignedJerkMps3 {
      get { if ((_hasBits0 & 32) != 0) { return timeAlignedJerkMps3_; } else { return TimeAlignedJerkMps3DefaultValue; } }
      set {
        _hasBits0 |= 32;
        timeAlignedJerkMps3_ = value;
      }
    }
    /// <summary>Gets whether the "time_aligned_jerk_mps3" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimeAlignedJerkMps3 {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "time_aligned_jerk_mps3" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimeAlignedJerkMps3() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EgoCarPose);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EgoCarPose other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SystemCurrentTimeX, other.SystemCurrentTimeX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SystemCurrentTimeY, other.SystemCurrentTimeY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SystemCurrentTimeHeading, other.SystemCurrentTimeHeading)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TimeAlignedSpeedMps, other.TimeAlignedSpeedMps)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TimeAlignedAccelMps2, other.TimeAlignedAccelMps2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TimeAlignedJerkMps3, other.TimeAlignedJerkMps3)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSystemCurrentTimeX) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SystemCurrentTimeX);
      if (HasSystemCurrentTimeY) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SystemCurrentTimeY);
      if (HasSystemCurrentTimeHeading) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SystemCurrentTimeHeading);
      if (HasTimeAlignedSpeedMps) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TimeAlignedSpeedMps);
      if (HasTimeAlignedAccelMps2) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TimeAlignedAccelMps2);
      if (HasTimeAlignedJerkMps3) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TimeAlignedJerkMps3);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasSystemCurrentTimeX) {
        output.WriteRawTag(9);
        output.WriteDouble(SystemCurrentTimeX);
      }
      if (HasSystemCurrentTimeY) {
        output.WriteRawTag(17);
        output.WriteDouble(SystemCurrentTimeY);
      }
      if (HasSystemCurrentTimeHeading) {
        output.WriteRawTag(25);
        output.WriteDouble(SystemCurrentTimeHeading);
      }
      if (HasTimeAlignedSpeedMps) {
        output.WriteRawTag(33);
        output.WriteDouble(TimeAlignedSpeedMps);
      }
      if (HasTimeAlignedAccelMps2) {
        output.WriteRawTag(41);
        output.WriteDouble(TimeAlignedAccelMps2);
      }
      if (HasTimeAlignedJerkMps3) {
        output.WriteRawTag(49);
        output.WriteDouble(TimeAlignedJerkMps3);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSystemCurrentTimeX) {
        size += 1 + 8;
      }
      if (HasSystemCurrentTimeY) {
        size += 1 + 8;
      }
      if (HasSystemCurrentTimeHeading) {
        size += 1 + 8;
      }
      if (HasTimeAlignedSpeedMps) {
        size += 1 + 8;
      }
      if (HasTimeAlignedAccelMps2) {
        size += 1 + 8;
      }
      if (HasTimeAlignedJerkMps3) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EgoCarPose other) {
      if (other == null) {
        return;
      }
      if (other.HasSystemCurrentTimeX) {
        SystemCurrentTimeX = other.SystemCurrentTimeX;
      }
      if (other.HasSystemCurrentTimeY) {
        SystemCurrentTimeY = other.SystemCurrentTimeY;
      }
      if (other.HasSystemCurrentTimeHeading) {
        SystemCurrentTimeHeading = other.SystemCurrentTimeHeading;
      }
      if (other.HasTimeAlignedSpeedMps) {
        TimeAlignedSpeedMps = other.TimeAlignedSpeedMps;
      }
      if (other.HasTimeAlignedAccelMps2) {
        TimeAlignedAccelMps2 = other.TimeAlignedAccelMps2;
      }
      if (other.HasTimeAlignedJerkMps3) {
        TimeAlignedJerkMps3 = other.TimeAlignedJerkMps3;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            SystemCurrentTimeX = input.ReadDouble();
            break;
          }
          case 17: {
            SystemCurrentTimeY = input.ReadDouble();
            break;
          }
          case 25: {
            SystemCurrentTimeHeading = input.ReadDouble();
            break;
          }
          case 33: {
            TimeAlignedSpeedMps = input.ReadDouble();
            break;
          }
          case 41: {
            TimeAlignedAccelMps2 = input.ReadDouble();
            break;
          }
          case 49: {
            TimeAlignedJerkMps3 = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BiasInfo : pb::IMessage<BiasInfo> {
    private static readonly pb::MessageParser<BiasInfo> _parser = new pb::MessageParser<BiasInfo>(() => new BiasInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BiasInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.BehaviorDebugReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BiasInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BiasInfo(BiasInfo other) : this() {
      _hasBits0 = other._hasBits0;
      biasEnable_ = other.biasEnable_;
      biasL_ = other.biasL_;
      biasObjectId_ = other.biasObjectId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BiasInfo Clone() {
      return new BiasInfo(this);
    }

    /// <summary>Field number for the "bias_enable" field.</summary>
    public const int BiasEnableFieldNumber = 1;
    private readonly static bool BiasEnableDefaultValue = false;

    private bool biasEnable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BiasEnable {
      get { if ((_hasBits0 & 1) != 0) { return biasEnable_; } else { return BiasEnableDefaultValue; } }
      set {
        _hasBits0 |= 1;
        biasEnable_ = value;
      }
    }
    /// <summary>Gets whether the "bias_enable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBiasEnable {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "bias_enable" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBiasEnable() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "bias_l" field.</summary>
    public const int BiasLFieldNumber = 2;
    private readonly static double BiasLDefaultValue = 0D;

    private double biasL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BiasL {
      get { if ((_hasBits0 & 2) != 0) { return biasL_; } else { return BiasLDefaultValue; } }
      set {
        _hasBits0 |= 2;
        biasL_ = value;
      }
    }
    /// <summary>Gets whether the "bias_l" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBiasL {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "bias_l" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBiasL() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "bias_object_id" field.</summary>
    public const int BiasObjectIdFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_biasObjectId_codec
        = pb::FieldCodec.ForInt32(24);
    private readonly pbc::RepeatedField<int> biasObjectId_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BiasObjectId {
      get { return biasObjectId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BiasInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BiasInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BiasEnable != other.BiasEnable) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BiasL, other.BiasL)) return false;
      if(!biasObjectId_.Equals(other.biasObjectId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBiasEnable) hash ^= BiasEnable.GetHashCode();
      if (HasBiasL) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BiasL);
      hash ^= biasObjectId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasBiasEnable) {
        output.WriteRawTag(8);
        output.WriteBool(BiasEnable);
      }
      if (HasBiasL) {
        output.WriteRawTag(17);
        output.WriteDouble(BiasL);
      }
      biasObjectId_.WriteTo(output, _repeated_biasObjectId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasBiasEnable) {
        size += 1 + 1;
      }
      if (HasBiasL) {
        size += 1 + 8;
      }
      size += biasObjectId_.CalculateSize(_repeated_biasObjectId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BiasInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasBiasEnable) {
        BiasEnable = other.BiasEnable;
      }
      if (other.HasBiasL) {
        BiasL = other.BiasL;
      }
      biasObjectId_.Add(other.biasObjectId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BiasEnable = input.ReadBool();
            break;
          }
          case 17: {
            BiasL = input.ReadDouble();
            break;
          }
          case 26:
          case 24: {
            biasObjectId_.AddEntriesFrom(input, _repeated_biasObjectId_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LaneTrafficLightInfo : pb::IMessage<LaneTrafficLightInfo> {
    private static readonly pb::MessageParser<LaneTrafficLightInfo> _parser = new pb::MessageParser<LaneTrafficLightInfo>(() => new LaneTrafficLightInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LaneTrafficLightInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.BehaviorDebugReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneTrafficLightInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneTrafficLightInfo(LaneTrafficLightInfo other) : this() {
      _hasBits0 = other._hasBits0;
      dir_ = other.dir_;
      color_ = other.color_;
      isThisDirPassable_ = other.isThisDirPassable_;
      currentColorRemainingTime_ = other.currentColorRemainingTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneTrafficLightInfo Clone() {
      return new LaneTrafficLightInfo(this);
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 1;
    private readonly static int DirDefaultValue = 0;

    private int dir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Dir {
      get { if ((_hasBits0 & 1) != 0) { return dir_; } else { return DirDefaultValue; } }
      set {
        _hasBits0 |= 1;
        dir_ = value;
      }
    }
    /// <summary>Gets whether the "dir" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDir {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "dir" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDir() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 2;
    private readonly static int ColorDefaultValue = 0;

    private int color_;
    /// <summary>
    /// 0-black, 1-red, 2-yellow, 3-green
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Color {
      get { if ((_hasBits0 & 2) != 0) { return color_; } else { return ColorDefaultValue; } }
      set {
        _hasBits0 |= 2;
        color_ = value;
      }
    }
    /// <summary>Gets whether the "color" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasColor {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "color" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearColor() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "is_this_dir_passable" field.</summary>
    public const int IsThisDirPassableFieldNumber = 3;
    private readonly static bool IsThisDirPassableDefaultValue = false;

    private bool isThisDirPassable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsThisDirPassable {
      get { if ((_hasBits0 & 4) != 0) { return isThisDirPassable_; } else { return IsThisDirPassableDefaultValue; } }
      set {
        _hasBits0 |= 4;
        isThisDirPassable_ = value;
      }
    }
    /// <summary>Gets whether the "is_this_dir_passable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsThisDirPassable {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "is_this_dir_passable" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsThisDirPassable() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "current_color_remaining_time" field.</summary>
    public const int CurrentColorRemainingTimeFieldNumber = 4;
    private readonly static int CurrentColorRemainingTimeDefaultValue = 0;

    private int currentColorRemainingTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentColorRemainingTime {
      get { if ((_hasBits0 & 8) != 0) { return currentColorRemainingTime_; } else { return CurrentColorRemainingTimeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        currentColorRemainingTime_ = value;
      }
    }
    /// <summary>Gets whether the "current_color_remaining_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCurrentColorRemainingTime {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "current_color_remaining_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCurrentColorRemainingTime() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LaneTrafficLightInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LaneTrafficLightInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Dir != other.Dir) return false;
      if (Color != other.Color) return false;
      if (IsThisDirPassable != other.IsThisDirPassable) return false;
      if (CurrentColorRemainingTime != other.CurrentColorRemainingTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDir) hash ^= Dir.GetHashCode();
      if (HasColor) hash ^= Color.GetHashCode();
      if (HasIsThisDirPassable) hash ^= IsThisDirPassable.GetHashCode();
      if (HasCurrentColorRemainingTime) hash ^= CurrentColorRemainingTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasDir) {
        output.WriteRawTag(8);
        output.WriteInt32(Dir);
      }
      if (HasColor) {
        output.WriteRawTag(16);
        output.WriteInt32(Color);
      }
      if (HasIsThisDirPassable) {
        output.WriteRawTag(24);
        output.WriteBool(IsThisDirPassable);
      }
      if (HasCurrentColorRemainingTime) {
        output.WriteRawTag(32);
        output.WriteInt32(CurrentColorRemainingTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasDir) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dir);
      }
      if (HasColor) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Color);
      }
      if (HasIsThisDirPassable) {
        size += 1 + 1;
      }
      if (HasCurrentColorRemainingTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentColorRemainingTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LaneTrafficLightInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasDir) {
        Dir = other.Dir;
      }
      if (other.HasColor) {
        Color = other.Color;
      }
      if (other.HasIsThisDirPassable) {
        IsThisDirPassable = other.IsThisDirPassable;
      }
      if (other.HasCurrentColorRemainingTime) {
        CurrentColorRemainingTime = other.CurrentColorRemainingTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Dir = input.ReadInt32();
            break;
          }
          case 16: {
            Color = input.ReadInt32();
            break;
          }
          case 24: {
            IsThisDirPassable = input.ReadBool();
            break;
          }
          case 32: {
            CurrentColorRemainingTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TrafficLightDebugInfo : pb::IMessage<TrafficLightDebugInfo> {
    private static readonly pb::MessageParser<TrafficLightDebugInfo> _parser = new pb::MessageParser<TrafficLightDebugInfo>(() => new TrafficLightDebugInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrafficLightDebugInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.BehaviorDebugReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficLightDebugInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficLightDebugInfo(TrafficLightDebugInfo other) : this() {
      _hasBits0 = other._hasBits0;
      direction_ = other.direction_;
      trafficLight_ = other.trafficLight_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficLightDebugInfo Clone() {
      return new TrafficLightDebugInfo(this);
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 1;
    private readonly static int DirectionDefaultValue = 0;

    private int direction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Direction {
      get { if ((_hasBits0 & 1) != 0) { return direction_; } else { return DirectionDefaultValue; } }
      set {
        _hasBits0 |= 1;
        direction_ = value;
      }
    }
    /// <summary>Gets whether the "direction" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDirection {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "direction" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDirection() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "traffic_light" field.</summary>
    public const int TrafficLightFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xviewer.LaneTrafficLightInfo> _repeated_trafficLight_codec
        = pb::FieldCodec.ForMessage(18, global::Xviewer.LaneTrafficLightInfo.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.LaneTrafficLightInfo> trafficLight_ = new pbc::RepeatedField<global::Xviewer.LaneTrafficLightInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.LaneTrafficLightInfo> TrafficLight {
      get { return trafficLight_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrafficLightDebugInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrafficLightDebugInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Direction != other.Direction) return false;
      if(!trafficLight_.Equals(other.trafficLight_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDirection) hash ^= Direction.GetHashCode();
      hash ^= trafficLight_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasDirection) {
        output.WriteRawTag(8);
        output.WriteInt32(Direction);
      }
      trafficLight_.WriteTo(output, _repeated_trafficLight_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasDirection) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Direction);
      }
      size += trafficLight_.CalculateSize(_repeated_trafficLight_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrafficLightDebugInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasDirection) {
        Direction = other.Direction;
      }
      trafficLight_.Add(other.trafficLight_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Direction = input.ReadInt32();
            break;
          }
          case 18: {
            trafficLight_.AddEntriesFrom(input, _repeated_trafficLight_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TimeConsumption : pb::IMessage<TimeConsumption> {
    private static readonly pb::MessageParser<TimeConsumption> _parser = new pb::MessageParser<TimeConsumption>(() => new TimeConsumption());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeConsumption> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.BehaviorDebugReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeConsumption() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeConsumption(TimeConsumption other) : this() {
      _hasBits0 = other._hasBits0;
      planningFusionTimeMs_ = other.planningFusionTimeMs_;
      behaviorPlanningTimeMs_ = other.behaviorPlanningTimeMs_;
      behaviorFrameTimeMs_ = other.behaviorFrameTimeMs_;
      pathPlanningTimeMs_ = other.pathPlanningTimeMs_;
      speedPlanningTimeMs_ = other.speedPlanningTimeMs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeConsumption Clone() {
      return new TimeConsumption(this);
    }

    /// <summary>Field number for the "planning_fusion_time_ms" field.</summary>
    public const int PlanningFusionTimeMsFieldNumber = 1;
    private readonly static int PlanningFusionTimeMsDefaultValue = 0;

    private int planningFusionTimeMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlanningFusionTimeMs {
      get { if ((_hasBits0 & 1) != 0) { return planningFusionTimeMs_; } else { return PlanningFusionTimeMsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        planningFusionTimeMs_ = value;
      }
    }
    /// <summary>Gets whether the "planning_fusion_time_ms" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlanningFusionTimeMs {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "planning_fusion_time_ms" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlanningFusionTimeMs() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "behavior_planning_time_ms" field.</summary>
    public const int BehaviorPlanningTimeMsFieldNumber = 2;
    private readonly static int BehaviorPlanningTimeMsDefaultValue = 0;

    private int behaviorPlanningTimeMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BehaviorPlanningTimeMs {
      get { if ((_hasBits0 & 2) != 0) { return behaviorPlanningTimeMs_; } else { return BehaviorPlanningTimeMsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        behaviorPlanningTimeMs_ = value;
      }
    }
    /// <summary>Gets whether the "behavior_planning_time_ms" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBehaviorPlanningTimeMs {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "behavior_planning_time_ms" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBehaviorPlanningTimeMs() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "behavior_frame_time_ms" field.</summary>
    public const int BehaviorFrameTimeMsFieldNumber = 3;
    private readonly static int BehaviorFrameTimeMsDefaultValue = 0;

    private int behaviorFrameTimeMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BehaviorFrameTimeMs {
      get { if ((_hasBits0 & 4) != 0) { return behaviorFrameTimeMs_; } else { return BehaviorFrameTimeMsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        behaviorFrameTimeMs_ = value;
      }
    }
    /// <summary>Gets whether the "behavior_frame_time_ms" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBehaviorFrameTimeMs {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "behavior_frame_time_ms" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBehaviorFrameTimeMs() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "path_planning_time_ms" field.</summary>
    public const int PathPlanningTimeMsFieldNumber = 4;
    private readonly static int PathPlanningTimeMsDefaultValue = 0;

    private int pathPlanningTimeMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PathPlanningTimeMs {
      get { if ((_hasBits0 & 8) != 0) { return pathPlanningTimeMs_; } else { return PathPlanningTimeMsDefaultValue; } }
      set {
        _hasBits0 |= 8;
        pathPlanningTimeMs_ = value;
      }
    }
    /// <summary>Gets whether the "path_planning_time_ms" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPathPlanningTimeMs {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "path_planning_time_ms" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPathPlanningTimeMs() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "speed_planning_time_ms" field.</summary>
    public const int SpeedPlanningTimeMsFieldNumber = 5;
    private readonly static int SpeedPlanningTimeMsDefaultValue = 0;

    private int speedPlanningTimeMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpeedPlanningTimeMs {
      get { if ((_hasBits0 & 16) != 0) { return speedPlanningTimeMs_; } else { return SpeedPlanningTimeMsDefaultValue; } }
      set {
        _hasBits0 |= 16;
        speedPlanningTimeMs_ = value;
      }
    }
    /// <summary>Gets whether the "speed_planning_time_ms" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSpeedPlanningTimeMs {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "speed_planning_time_ms" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSpeedPlanningTimeMs() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeConsumption);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeConsumption other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlanningFusionTimeMs != other.PlanningFusionTimeMs) return false;
      if (BehaviorPlanningTimeMs != other.BehaviorPlanningTimeMs) return false;
      if (BehaviorFrameTimeMs != other.BehaviorFrameTimeMs) return false;
      if (PathPlanningTimeMs != other.PathPlanningTimeMs) return false;
      if (SpeedPlanningTimeMs != other.SpeedPlanningTimeMs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlanningFusionTimeMs) hash ^= PlanningFusionTimeMs.GetHashCode();
      if (HasBehaviorPlanningTimeMs) hash ^= BehaviorPlanningTimeMs.GetHashCode();
      if (HasBehaviorFrameTimeMs) hash ^= BehaviorFrameTimeMs.GetHashCode();
      if (HasPathPlanningTimeMs) hash ^= PathPlanningTimeMs.GetHashCode();
      if (HasSpeedPlanningTimeMs) hash ^= SpeedPlanningTimeMs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasPlanningFusionTimeMs) {
        output.WriteRawTag(8);
        output.WriteInt32(PlanningFusionTimeMs);
      }
      if (HasBehaviorPlanningTimeMs) {
        output.WriteRawTag(16);
        output.WriteInt32(BehaviorPlanningTimeMs);
      }
      if (HasBehaviorFrameTimeMs) {
        output.WriteRawTag(24);
        output.WriteInt32(BehaviorFrameTimeMs);
      }
      if (HasPathPlanningTimeMs) {
        output.WriteRawTag(32);
        output.WriteInt32(PathPlanningTimeMs);
      }
      if (HasSpeedPlanningTimeMs) {
        output.WriteRawTag(40);
        output.WriteInt32(SpeedPlanningTimeMs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlanningFusionTimeMs) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlanningFusionTimeMs);
      }
      if (HasBehaviorPlanningTimeMs) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BehaviorPlanningTimeMs);
      }
      if (HasBehaviorFrameTimeMs) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BehaviorFrameTimeMs);
      }
      if (HasPathPlanningTimeMs) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PathPlanningTimeMs);
      }
      if (HasSpeedPlanningTimeMs) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeedPlanningTimeMs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeConsumption other) {
      if (other == null) {
        return;
      }
      if (other.HasPlanningFusionTimeMs) {
        PlanningFusionTimeMs = other.PlanningFusionTimeMs;
      }
      if (other.HasBehaviorPlanningTimeMs) {
        BehaviorPlanningTimeMs = other.BehaviorPlanningTimeMs;
      }
      if (other.HasBehaviorFrameTimeMs) {
        BehaviorFrameTimeMs = other.BehaviorFrameTimeMs;
      }
      if (other.HasPathPlanningTimeMs) {
        PathPlanningTimeMs = other.PathPlanningTimeMs;
      }
      if (other.HasSpeedPlanningTimeMs) {
        SpeedPlanningTimeMs = other.SpeedPlanningTimeMs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlanningFusionTimeMs = input.ReadInt32();
            break;
          }
          case 16: {
            BehaviorPlanningTimeMs = input.ReadInt32();
            break;
          }
          case 24: {
            BehaviorFrameTimeMs = input.ReadInt32();
            break;
          }
          case 32: {
            PathPlanningTimeMs = input.ReadInt32();
            break;
          }
          case 40: {
            SpeedPlanningTimeMs = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EgoRelativePosition : pb::IMessage<EgoRelativePosition> {
    private static readonly pb::MessageParser<EgoRelativePosition> _parser = new pb::MessageParser<EgoRelativePosition>(() => new EgoRelativePosition());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EgoRelativePosition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.BehaviorDebugReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgoRelativePosition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgoRelativePosition(EgoRelativePosition other) : this() {
      _hasBits0 = other._hasBits0;
      egoCarDistanceToEgoRl_ = other.egoCarDistanceToEgoRl_;
      egoCarDistanceToEgoLaneBoundary_ = other.egoCarDistanceToEgoLaneBoundary_;
      distanceToClosestIntersectionM_ = other.distanceToClosestIntersectionM_;
      egoHeadingAndRlHeadingDiff_ = other.egoHeadingAndRlHeadingDiff_;
      distanceToClosestTrafficLightM_ = other.distanceToClosestTrafficLightM_;
      distanceToClosestCrosswalkM_ = other.distanceToClosestCrosswalkM_;
      egoCarDistanceToTargetRl_ = other.egoCarDistanceToTargetRl_;
      isEgoCarWithinEgo_ = other.isEgoCarWithinEgo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgoRelativePosition Clone() {
      return new EgoRelativePosition(this);
    }

    /// <summary>Field number for the "ego_car_distance_to_ego_rl" field.</summary>
    public const int EgoCarDistanceToEgoRlFieldNumber = 1;
    private readonly static double EgoCarDistanceToEgoRlDefaultValue = 0D;

    private double egoCarDistanceToEgoRl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EgoCarDistanceToEgoRl {
      get { if ((_hasBits0 & 1) != 0) { return egoCarDistanceToEgoRl_; } else { return EgoCarDistanceToEgoRlDefaultValue; } }
      set {
        _hasBits0 |= 1;
        egoCarDistanceToEgoRl_ = value;
      }
    }
    /// <summary>Gets whether the "ego_car_distance_to_ego_rl" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEgoCarDistanceToEgoRl {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ego_car_distance_to_ego_rl" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEgoCarDistanceToEgoRl() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "ego_car_distance_to_ego_lane_boundary" field.</summary>
    public const int EgoCarDistanceToEgoLaneBoundaryFieldNumber = 2;
    private readonly static double EgoCarDistanceToEgoLaneBoundaryDefaultValue = 0D;

    private double egoCarDistanceToEgoLaneBoundary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EgoCarDistanceToEgoLaneBoundary {
      get { if ((_hasBits0 & 2) != 0) { return egoCarDistanceToEgoLaneBoundary_; } else { return EgoCarDistanceToEgoLaneBoundaryDefaultValue; } }
      set {
        _hasBits0 |= 2;
        egoCarDistanceToEgoLaneBoundary_ = value;
      }
    }
    /// <summary>Gets whether the "ego_car_distance_to_ego_lane_boundary" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEgoCarDistanceToEgoLaneBoundary {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "ego_car_distance_to_ego_lane_boundary" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEgoCarDistanceToEgoLaneBoundary() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "distance_to_closest_intersection_m" field.</summary>
    public const int DistanceToClosestIntersectionMFieldNumber = 3;
    private readonly static double DistanceToClosestIntersectionMDefaultValue = 0D;

    private double distanceToClosestIntersectionM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DistanceToClosestIntersectionM {
      get { if ((_hasBits0 & 4) != 0) { return distanceToClosestIntersectionM_; } else { return DistanceToClosestIntersectionMDefaultValue; } }
      set {
        _hasBits0 |= 4;
        distanceToClosestIntersectionM_ = value;
      }
    }
    /// <summary>Gets whether the "distance_to_closest_intersection_m" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDistanceToClosestIntersectionM {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "distance_to_closest_intersection_m" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDistanceToClosestIntersectionM() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "ego_heading_and_rl_heading_diff" field.</summary>
    public const int EgoHeadingAndRlHeadingDiffFieldNumber = 4;
    private readonly static double EgoHeadingAndRlHeadingDiffDefaultValue = 0D;

    private double egoHeadingAndRlHeadingDiff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EgoHeadingAndRlHeadingDiff {
      get { if ((_hasBits0 & 8) != 0) { return egoHeadingAndRlHeadingDiff_; } else { return EgoHeadingAndRlHeadingDiffDefaultValue; } }
      set {
        _hasBits0 |= 8;
        egoHeadingAndRlHeadingDiff_ = value;
      }
    }
    /// <summary>Gets whether the "ego_heading_and_rl_heading_diff" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEgoHeadingAndRlHeadingDiff {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "ego_heading_and_rl_heading_diff" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEgoHeadingAndRlHeadingDiff() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "distance_to_closest_traffic_light_m" field.</summary>
    public const int DistanceToClosestTrafficLightMFieldNumber = 5;
    private readonly static double DistanceToClosestTrafficLightMDefaultValue = 0D;

    private double distanceToClosestTrafficLightM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DistanceToClosestTrafficLightM {
      get { if ((_hasBits0 & 16) != 0) { return distanceToClosestTrafficLightM_; } else { return DistanceToClosestTrafficLightMDefaultValue; } }
      set {
        _hasBits0 |= 16;
        distanceToClosestTrafficLightM_ = value;
      }
    }
    /// <summary>Gets whether the "distance_to_closest_traffic_light_m" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDistanceToClosestTrafficLightM {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "distance_to_closest_traffic_light_m" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDistanceToClosestTrafficLightM() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "distance_to_closest_crosswalk_m" field.</summary>
    public const int DistanceToClosestCrosswalkMFieldNumber = 6;
    private readonly static double DistanceToClosestCrosswalkMDefaultValue = 0D;

    private double distanceToClosestCrosswalkM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DistanceToClosestCrosswalkM {
      get { if ((_hasBits0 & 32) != 0) { return distanceToClosestCrosswalkM_; } else { return DistanceToClosestCrosswalkMDefaultValue; } }
      set {
        _hasBits0 |= 32;
        distanceToClosestCrosswalkM_ = value;
      }
    }
    /// <summary>Gets whether the "distance_to_closest_crosswalk_m" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDistanceToClosestCrosswalkM {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "distance_to_closest_crosswalk_m" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDistanceToClosestCrosswalkM() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "ego_car_distance_to_target_rl" field.</summary>
    public const int EgoCarDistanceToTargetRlFieldNumber = 7;
    private readonly static double EgoCarDistanceToTargetRlDefaultValue = 0D;

    private double egoCarDistanceToTargetRl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EgoCarDistanceToTargetRl {
      get { if ((_hasBits0 & 64) != 0) { return egoCarDistanceToTargetRl_; } else { return EgoCarDistanceToTargetRlDefaultValue; } }
      set {
        _hasBits0 |= 64;
        egoCarDistanceToTargetRl_ = value;
      }
    }
    /// <summary>Gets whether the "ego_car_distance_to_target_rl" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEgoCarDistanceToTargetRl {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "ego_car_distance_to_target_rl" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEgoCarDistanceToTargetRl() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "is_ego_car_within_ego" field.</summary>
    public const int IsEgoCarWithinEgoFieldNumber = 8;
    private readonly static bool IsEgoCarWithinEgoDefaultValue = false;

    private bool isEgoCarWithinEgo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEgoCarWithinEgo {
      get { if ((_hasBits0 & 128) != 0) { return isEgoCarWithinEgo_; } else { return IsEgoCarWithinEgoDefaultValue; } }
      set {
        _hasBits0 |= 128;
        isEgoCarWithinEgo_ = value;
      }
    }
    /// <summary>Gets whether the "is_ego_car_within_ego" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsEgoCarWithinEgo {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "is_ego_car_within_ego" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsEgoCarWithinEgo() {
      _hasBits0 &= ~128;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EgoRelativePosition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EgoRelativePosition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EgoCarDistanceToEgoRl, other.EgoCarDistanceToEgoRl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EgoCarDistanceToEgoLaneBoundary, other.EgoCarDistanceToEgoLaneBoundary)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DistanceToClosestIntersectionM, other.DistanceToClosestIntersectionM)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EgoHeadingAndRlHeadingDiff, other.EgoHeadingAndRlHeadingDiff)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DistanceToClosestTrafficLightM, other.DistanceToClosestTrafficLightM)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DistanceToClosestCrosswalkM, other.DistanceToClosestCrosswalkM)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EgoCarDistanceToTargetRl, other.EgoCarDistanceToTargetRl)) return false;
      if (IsEgoCarWithinEgo != other.IsEgoCarWithinEgo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEgoCarDistanceToEgoRl) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EgoCarDistanceToEgoRl);
      if (HasEgoCarDistanceToEgoLaneBoundary) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EgoCarDistanceToEgoLaneBoundary);
      if (HasDistanceToClosestIntersectionM) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DistanceToClosestIntersectionM);
      if (HasEgoHeadingAndRlHeadingDiff) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EgoHeadingAndRlHeadingDiff);
      if (HasDistanceToClosestTrafficLightM) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DistanceToClosestTrafficLightM);
      if (HasDistanceToClosestCrosswalkM) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DistanceToClosestCrosswalkM);
      if (HasEgoCarDistanceToTargetRl) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EgoCarDistanceToTargetRl);
      if (HasIsEgoCarWithinEgo) hash ^= IsEgoCarWithinEgo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasEgoCarDistanceToEgoRl) {
        output.WriteRawTag(9);
        output.WriteDouble(EgoCarDistanceToEgoRl);
      }
      if (HasEgoCarDistanceToEgoLaneBoundary) {
        output.WriteRawTag(17);
        output.WriteDouble(EgoCarDistanceToEgoLaneBoundary);
      }
      if (HasDistanceToClosestIntersectionM) {
        output.WriteRawTag(25);
        output.WriteDouble(DistanceToClosestIntersectionM);
      }
      if (HasEgoHeadingAndRlHeadingDiff) {
        output.WriteRawTag(33);
        output.WriteDouble(EgoHeadingAndRlHeadingDiff);
      }
      if (HasDistanceToClosestTrafficLightM) {
        output.WriteRawTag(41);
        output.WriteDouble(DistanceToClosestTrafficLightM);
      }
      if (HasDistanceToClosestCrosswalkM) {
        output.WriteRawTag(49);
        output.WriteDouble(DistanceToClosestCrosswalkM);
      }
      if (HasEgoCarDistanceToTargetRl) {
        output.WriteRawTag(57);
        output.WriteDouble(EgoCarDistanceToTargetRl);
      }
      if (HasIsEgoCarWithinEgo) {
        output.WriteRawTag(64);
        output.WriteBool(IsEgoCarWithinEgo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEgoCarDistanceToEgoRl) {
        size += 1 + 8;
      }
      if (HasEgoCarDistanceToEgoLaneBoundary) {
        size += 1 + 8;
      }
      if (HasDistanceToClosestIntersectionM) {
        size += 1 + 8;
      }
      if (HasEgoHeadingAndRlHeadingDiff) {
        size += 1 + 8;
      }
      if (HasDistanceToClosestTrafficLightM) {
        size += 1 + 8;
      }
      if (HasDistanceToClosestCrosswalkM) {
        size += 1 + 8;
      }
      if (HasEgoCarDistanceToTargetRl) {
        size += 1 + 8;
      }
      if (HasIsEgoCarWithinEgo) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EgoRelativePosition other) {
      if (other == null) {
        return;
      }
      if (other.HasEgoCarDistanceToEgoRl) {
        EgoCarDistanceToEgoRl = other.EgoCarDistanceToEgoRl;
      }
      if (other.HasEgoCarDistanceToEgoLaneBoundary) {
        EgoCarDistanceToEgoLaneBoundary = other.EgoCarDistanceToEgoLaneBoundary;
      }
      if (other.HasDistanceToClosestIntersectionM) {
        DistanceToClosestIntersectionM = other.DistanceToClosestIntersectionM;
      }
      if (other.HasEgoHeadingAndRlHeadingDiff) {
        EgoHeadingAndRlHeadingDiff = other.EgoHeadingAndRlHeadingDiff;
      }
      if (other.HasDistanceToClosestTrafficLightM) {
        DistanceToClosestTrafficLightM = other.DistanceToClosestTrafficLightM;
      }
      if (other.HasDistanceToClosestCrosswalkM) {
        DistanceToClosestCrosswalkM = other.DistanceToClosestCrosswalkM;
      }
      if (other.HasEgoCarDistanceToTargetRl) {
        EgoCarDistanceToTargetRl = other.EgoCarDistanceToTargetRl;
      }
      if (other.HasIsEgoCarWithinEgo) {
        IsEgoCarWithinEgo = other.IsEgoCarWithinEgo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            EgoCarDistanceToEgoRl = input.ReadDouble();
            break;
          }
          case 17: {
            EgoCarDistanceToEgoLaneBoundary = input.ReadDouble();
            break;
          }
          case 25: {
            DistanceToClosestIntersectionM = input.ReadDouble();
            break;
          }
          case 33: {
            EgoHeadingAndRlHeadingDiff = input.ReadDouble();
            break;
          }
          case 41: {
            DistanceToClosestTrafficLightM = input.ReadDouble();
            break;
          }
          case 49: {
            DistanceToClosestCrosswalkM = input.ReadDouble();
            break;
          }
          case 57: {
            EgoCarDistanceToTargetRl = input.ReadDouble();
            break;
          }
          case 64: {
            IsEgoCarWithinEgo = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BehaviorDebugMsg : pb::IMessage<BehaviorDebugMsg> {
    private static readonly pb::MessageParser<BehaviorDebugMsg> _parser = new pb::MessageParser<BehaviorDebugMsg>(() => new BehaviorDebugMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BehaviorDebugMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.BehaviorDebugReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BehaviorDebugMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BehaviorDebugMsg(BehaviorDebugMsg other) : this() {
      planningTimeConsumption_ = other.planningTimeConsumption_ != null ? other.planningTimeConsumption_.Clone() : null;
      trafficLightInfo_ = other.trafficLightInfo_ != null ? other.trafficLightInfo_.Clone() : null;
      recommendSpeedMps_ = other.recommendSpeedMps_ != null ? other.recommendSpeedMps_.Clone() : null;
      egoRelativePosition_ = other.egoRelativePosition_ != null ? other.egoRelativePosition_.Clone() : null;
      egoRlInfo_ = other.egoRlInfo_ != null ? other.egoRlInfo_.Clone() : null;
      targetRlInfo_ = other.targetRlInfo_ != null ? other.targetRlInfo_.Clone() : null;
      leftRlInfo_ = other.leftRlInfo_ != null ? other.leftRlInfo_.Clone() : null;
      rightRlInfo_ = other.rightRlInfo_ != null ? other.rightRlInfo_.Clone() : null;
      fsmLaneChangeInfo_ = other.fsmLaneChangeInfo_ != null ? other.fsmLaneChangeInfo_.Clone() : null;
      assignedDynamicObjectsInfo_ = other.assignedDynamicObjectsInfo_;
      lcDebugInfo_ = other.lcDebugInfo_;
      nudgeDebugInfo_ = other.nudgeDebugInfo_;
      gapDebugInfo_ = other.gapDebugInfo_;
      actionCancelReason_ = other.actionCancelReason_;
      laneChangeGeneralInfo_ = other.laneChangeGeneralInfo_;
      fsmNudgeInfo_ = other.fsmNudgeInfo_ != null ? other.fsmNudgeInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BehaviorDebugMsg Clone() {
      return new BehaviorDebugMsg(this);
    }

    /// <summary>Field number for the "planning_time_consumption" field.</summary>
    public const int PlanningTimeConsumptionFieldNumber = 1;
    private global::Xviewer.TimeConsumption planningTimeConsumption_;
    /// <summary>
    /// time_cost
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.TimeConsumption PlanningTimeConsumption {
      get { return planningTimeConsumption_; }
      set {
        planningTimeConsumption_ = value;
      }
    }

    /// <summary>Field number for the "traffic_light_info" field.</summary>
    public const int TrafficLightInfoFieldNumber = 2;
    private global::Xviewer.TrafficLightDebugInfo trafficLightInfo_;
    /// <summary>
    /// TFL
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.TrafficLightDebugInfo TrafficLightInfo {
      get { return trafficLightInfo_; }
      set {
        trafficLightInfo_ = value;
      }
    }

    /// <summary>Field number for the "recommend_speed_mps" field.</summary>
    public const int RecommendSpeedMpsFieldNumber = 3;
    private global::Xviewer.SpeedLimitInfo recommendSpeedMps_;
    /// <summary>
    /// rcmd_speed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.SpeedLimitInfo RecommendSpeedMps {
      get { return recommendSpeedMps_; }
      set {
        recommendSpeedMps_ = value;
      }
    }

    /// <summary>Field number for the "ego_relative_position" field.</summary>
    public const int EgoRelativePositionFieldNumber = 4;
    private global::Xviewer.EgoRelativePosition egoRelativePosition_;
    /// <summary>
    /// dist
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.EgoRelativePosition EgoRelativePosition {
      get { return egoRelativePosition_; }
      set {
        egoRelativePosition_ = value;
      }
    }

    /// <summary>Field number for the "ego_rl_info" field.</summary>
    public const int EgoRlInfoFieldNumber = 5;
    private global::Xviewer.RlDebugInfo egoRlInfo_;
    /// <summary>
    /// RL-ego data type mod
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.RlDebugInfo EgoRlInfo {
      get { return egoRlInfo_; }
      set {
        egoRlInfo_ = value;
      }
    }

    /// <summary>Field number for the "target_rl_info" field.</summary>
    public const int TargetRlInfoFieldNumber = 6;
    private global::Xviewer.RlDebugInfo targetRlInfo_;
    /// <summary>
    /// RL-target
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.RlDebugInfo TargetRlInfo {
      get { return targetRlInfo_; }
      set {
        targetRlInfo_ = value;
      }
    }

    /// <summary>Field number for the "left_rl_info" field.</summary>
    public const int LeftRlInfoFieldNumber = 7;
    private global::Xviewer.RlDebugInfo leftRlInfo_;
    /// <summary>
    /// RL-left
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.RlDebugInfo LeftRlInfo {
      get { return leftRlInfo_; }
      set {
        leftRlInfo_ = value;
      }
    }

    /// <summary>Field number for the "right_rl_info" field.</summary>
    public const int RightRlInfoFieldNumber = 8;
    private global::Xviewer.RlDebugInfo rightRlInfo_;
    /// <summary>
    /// RL-right
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.RlDebugInfo RightRlInfo {
      get { return rightRlInfo_; }
      set {
        rightRlInfo_ = value;
      }
    }

    /// <summary>Field number for the "fsm_lane_change_info" field.</summary>
    public const int FsmLaneChangeInfoFieldNumber = 9;
    private global::Xviewer.FsmLaneChangeInfo fsmLaneChangeInfo_;
    /// <summary>
    ///FSM-LC,data type mod
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.FsmLaneChangeInfo FsmLaneChangeInfo {
      get { return fsmLaneChangeInfo_; }
      set {
        fsmLaneChangeInfo_ = value;
      }
    }

    /// <summary>Field number for the "assigned_dynamic_objects_info" field.</summary>
    public const int AssignedDynamicObjectsInfoFieldNumber = 10;
    private readonly static string AssignedDynamicObjectsInfoDefaultValue = "";

    private string assignedDynamicObjectsInfo_;
    /// <summary>
    /// former:assigned current: Virtual Wall Building
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssignedDynamicObjectsInfo {
      get { return assignedDynamicObjectsInfo_ ?? AssignedDynamicObjectsInfoDefaultValue; }
      set {
        assignedDynamicObjectsInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "assigned_dynamic_objects_info" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAssignedDynamicObjectsInfo {
      get { return assignedDynamicObjectsInfo_ != null; }
    }
    /// <summary>Clears the value of the "assigned_dynamic_objects_info" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAssignedDynamicObjectsInfo() {
      assignedDynamicObjectsInfo_ = null;
    }

    /// <summary>Field number for the "lc_debug_info" field.</summary>
    public const int LcDebugInfoFieldNumber = 11;
    private readonly static string LcDebugInfoDefaultValue = "";

    private string lcDebugInfo_;
    /// <summary>
    /// former: plc current: lc debug
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LcDebugInfo {
      get { return lcDebugInfo_ ?? LcDebugInfoDefaultValue; }
      set {
        lcDebugInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "lc_debug_info" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLcDebugInfo {
      get { return lcDebugInfo_ != null; }
    }
    /// <summary>Clears the value of the "lc_debug_info" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLcDebugInfo() {
      lcDebugInfo_ = null;
    }

    /// <summary>Field number for the "nudge_debug_info" field.</summary>
    public const int NudgeDebugInfoFieldNumber = 12;
    private readonly static string NudgeDebugInfoDefaultValue = "";

    private string nudgeDebugInfo_;
    /// <summary>
    /// former:nlc current: nudge
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NudgeDebugInfo {
      get { return nudgeDebugInfo_ ?? NudgeDebugInfoDefaultValue; }
      set {
        nudgeDebugInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "nudge_debug_info" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNudgeDebugInfo {
      get { return nudgeDebugInfo_ != null; }
    }
    /// <summary>Clears the value of the "nudge_debug_info" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNudgeDebugInfo() {
      nudgeDebugInfo_ = null;
    }

    /// <summary>Field number for the "gap_debug_info" field.</summary>
    public const int GapDebugInfoFieldNumber = 13;
    private readonly static string GapDebugInfoDefaultValue = "";

    private string gapDebugInfo_;
    /// <summary>
    /// remained
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GapDebugInfo {
      get { return gapDebugInfo_ ?? GapDebugInfoDefaultValue; }
      set {
        gapDebugInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "gap_debug_info" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGapDebugInfo {
      get { return gapDebugInfo_ != null; }
    }
    /// <summary>Clears the value of the "gap_debug_info" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGapDebugInfo() {
      gapDebugInfo_ = null;
    }

    /// <summary>Field number for the "action_cancel_reason" field.</summary>
    public const int ActionCancelReasonFieldNumber = 14;
    private readonly static string ActionCancelReasonDefaultValue = "";

    private string actionCancelReason_;
    /// <summary>
    /// former: cancel reason current: ego rl decision
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActionCancelReason {
      get { return actionCancelReason_ ?? ActionCancelReasonDefaultValue; }
      set {
        actionCancelReason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "action_cancel_reason" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasActionCancelReason {
      get { return actionCancelReason_ != null; }
    }
    /// <summary>Clears the value of the "action_cancel_reason" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearActionCancelReason() {
      actionCancelReason_ = null;
    }

    /// <summary>Field number for the "lane_change_general_info" field.</summary>
    public const int LaneChangeGeneralInfoFieldNumber = 15;
    private readonly static string LaneChangeGeneralInfoDefaultValue = "";

    private string laneChangeGeneralInfo_;
    /// <summary>
    /// former: lane change info current: key object info
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LaneChangeGeneralInfo {
      get { return laneChangeGeneralInfo_ ?? LaneChangeGeneralInfoDefaultValue; }
      set {
        laneChangeGeneralInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "lane_change_general_info" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLaneChangeGeneralInfo {
      get { return laneChangeGeneralInfo_ != null; }
    }
    /// <summary>Clears the value of the "lane_change_general_info" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLaneChangeGeneralInfo() {
      laneChangeGeneralInfo_ = null;
    }

    /// <summary>Field number for the "fsm_nudge_info" field.</summary>
    public const int FsmNudgeInfoFieldNumber = 16;
    private global::Xviewer.FsmNudgeInfo fsmNudgeInfo_;
    /// <summary>
    /// not set
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.FsmNudgeInfo FsmNudgeInfo {
      get { return fsmNudgeInfo_; }
      set {
        fsmNudgeInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BehaviorDebugMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BehaviorDebugMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlanningTimeConsumption, other.PlanningTimeConsumption)) return false;
      if (!object.Equals(TrafficLightInfo, other.TrafficLightInfo)) return false;
      if (!object.Equals(RecommendSpeedMps, other.RecommendSpeedMps)) return false;
      if (!object.Equals(EgoRelativePosition, other.EgoRelativePosition)) return false;
      if (!object.Equals(EgoRlInfo, other.EgoRlInfo)) return false;
      if (!object.Equals(TargetRlInfo, other.TargetRlInfo)) return false;
      if (!object.Equals(LeftRlInfo, other.LeftRlInfo)) return false;
      if (!object.Equals(RightRlInfo, other.RightRlInfo)) return false;
      if (!object.Equals(FsmLaneChangeInfo, other.FsmLaneChangeInfo)) return false;
      if (AssignedDynamicObjectsInfo != other.AssignedDynamicObjectsInfo) return false;
      if (LcDebugInfo != other.LcDebugInfo) return false;
      if (NudgeDebugInfo != other.NudgeDebugInfo) return false;
      if (GapDebugInfo != other.GapDebugInfo) return false;
      if (ActionCancelReason != other.ActionCancelReason) return false;
      if (LaneChangeGeneralInfo != other.LaneChangeGeneralInfo) return false;
      if (!object.Equals(FsmNudgeInfo, other.FsmNudgeInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (planningTimeConsumption_ != null) hash ^= PlanningTimeConsumption.GetHashCode();
      if (trafficLightInfo_ != null) hash ^= TrafficLightInfo.GetHashCode();
      if (recommendSpeedMps_ != null) hash ^= RecommendSpeedMps.GetHashCode();
      if (egoRelativePosition_ != null) hash ^= EgoRelativePosition.GetHashCode();
      if (egoRlInfo_ != null) hash ^= EgoRlInfo.GetHashCode();
      if (targetRlInfo_ != null) hash ^= TargetRlInfo.GetHashCode();
      if (leftRlInfo_ != null) hash ^= LeftRlInfo.GetHashCode();
      if (rightRlInfo_ != null) hash ^= RightRlInfo.GetHashCode();
      if (fsmLaneChangeInfo_ != null) hash ^= FsmLaneChangeInfo.GetHashCode();
      if (HasAssignedDynamicObjectsInfo) hash ^= AssignedDynamicObjectsInfo.GetHashCode();
      if (HasLcDebugInfo) hash ^= LcDebugInfo.GetHashCode();
      if (HasNudgeDebugInfo) hash ^= NudgeDebugInfo.GetHashCode();
      if (HasGapDebugInfo) hash ^= GapDebugInfo.GetHashCode();
      if (HasActionCancelReason) hash ^= ActionCancelReason.GetHashCode();
      if (HasLaneChangeGeneralInfo) hash ^= LaneChangeGeneralInfo.GetHashCode();
      if (fsmNudgeInfo_ != null) hash ^= FsmNudgeInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (planningTimeConsumption_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlanningTimeConsumption);
      }
      if (trafficLightInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TrafficLightInfo);
      }
      if (recommendSpeedMps_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RecommendSpeedMps);
      }
      if (egoRelativePosition_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(EgoRelativePosition);
      }
      if (egoRlInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(EgoRlInfo);
      }
      if (targetRlInfo_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TargetRlInfo);
      }
      if (leftRlInfo_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(LeftRlInfo);
      }
      if (rightRlInfo_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(RightRlInfo);
      }
      if (fsmLaneChangeInfo_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(FsmLaneChangeInfo);
      }
      if (HasAssignedDynamicObjectsInfo) {
        output.WriteRawTag(82);
        output.WriteString(AssignedDynamicObjectsInfo);
      }
      if (HasLcDebugInfo) {
        output.WriteRawTag(90);
        output.WriteString(LcDebugInfo);
      }
      if (HasNudgeDebugInfo) {
        output.WriteRawTag(98);
        output.WriteString(NudgeDebugInfo);
      }
      if (HasGapDebugInfo) {
        output.WriteRawTag(106);
        output.WriteString(GapDebugInfo);
      }
      if (HasActionCancelReason) {
        output.WriteRawTag(114);
        output.WriteString(ActionCancelReason);
      }
      if (HasLaneChangeGeneralInfo) {
        output.WriteRawTag(122);
        output.WriteString(LaneChangeGeneralInfo);
      }
      if (fsmNudgeInfo_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(FsmNudgeInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (planningTimeConsumption_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlanningTimeConsumption);
      }
      if (trafficLightInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrafficLightInfo);
      }
      if (recommendSpeedMps_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RecommendSpeedMps);
      }
      if (egoRelativePosition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EgoRelativePosition);
      }
      if (egoRlInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EgoRlInfo);
      }
      if (targetRlInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetRlInfo);
      }
      if (leftRlInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeftRlInfo);
      }
      if (rightRlInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RightRlInfo);
      }
      if (fsmLaneChangeInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FsmLaneChangeInfo);
      }
      if (HasAssignedDynamicObjectsInfo) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssignedDynamicObjectsInfo);
      }
      if (HasLcDebugInfo) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LcDebugInfo);
      }
      if (HasNudgeDebugInfo) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NudgeDebugInfo);
      }
      if (HasGapDebugInfo) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GapDebugInfo);
      }
      if (HasActionCancelReason) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActionCancelReason);
      }
      if (HasLaneChangeGeneralInfo) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LaneChangeGeneralInfo);
      }
      if (fsmNudgeInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FsmNudgeInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BehaviorDebugMsg other) {
      if (other == null) {
        return;
      }
      if (other.planningTimeConsumption_ != null) {
        if (planningTimeConsumption_ == null) {
          PlanningTimeConsumption = new global::Xviewer.TimeConsumption();
        }
        PlanningTimeConsumption.MergeFrom(other.PlanningTimeConsumption);
      }
      if (other.trafficLightInfo_ != null) {
        if (trafficLightInfo_ == null) {
          TrafficLightInfo = new global::Xviewer.TrafficLightDebugInfo();
        }
        TrafficLightInfo.MergeFrom(other.TrafficLightInfo);
      }
      if (other.recommendSpeedMps_ != null) {
        if (recommendSpeedMps_ == null) {
          RecommendSpeedMps = new global::Xviewer.SpeedLimitInfo();
        }
        RecommendSpeedMps.MergeFrom(other.RecommendSpeedMps);
      }
      if (other.egoRelativePosition_ != null) {
        if (egoRelativePosition_ == null) {
          EgoRelativePosition = new global::Xviewer.EgoRelativePosition();
        }
        EgoRelativePosition.MergeFrom(other.EgoRelativePosition);
      }
      if (other.egoRlInfo_ != null) {
        if (egoRlInfo_ == null) {
          EgoRlInfo = new global::Xviewer.RlDebugInfo();
        }
        EgoRlInfo.MergeFrom(other.EgoRlInfo);
      }
      if (other.targetRlInfo_ != null) {
        if (targetRlInfo_ == null) {
          TargetRlInfo = new global::Xviewer.RlDebugInfo();
        }
        TargetRlInfo.MergeFrom(other.TargetRlInfo);
      }
      if (other.leftRlInfo_ != null) {
        if (leftRlInfo_ == null) {
          LeftRlInfo = new global::Xviewer.RlDebugInfo();
        }
        LeftRlInfo.MergeFrom(other.LeftRlInfo);
      }
      if (other.rightRlInfo_ != null) {
        if (rightRlInfo_ == null) {
          RightRlInfo = new global::Xviewer.RlDebugInfo();
        }
        RightRlInfo.MergeFrom(other.RightRlInfo);
      }
      if (other.fsmLaneChangeInfo_ != null) {
        if (fsmLaneChangeInfo_ == null) {
          FsmLaneChangeInfo = new global::Xviewer.FsmLaneChangeInfo();
        }
        FsmLaneChangeInfo.MergeFrom(other.FsmLaneChangeInfo);
      }
      if (other.HasAssignedDynamicObjectsInfo) {
        AssignedDynamicObjectsInfo = other.AssignedDynamicObjectsInfo;
      }
      if (other.HasLcDebugInfo) {
        LcDebugInfo = other.LcDebugInfo;
      }
      if (other.HasNudgeDebugInfo) {
        NudgeDebugInfo = other.NudgeDebugInfo;
      }
      if (other.HasGapDebugInfo) {
        GapDebugInfo = other.GapDebugInfo;
      }
      if (other.HasActionCancelReason) {
        ActionCancelReason = other.ActionCancelReason;
      }
      if (other.HasLaneChangeGeneralInfo) {
        LaneChangeGeneralInfo = other.LaneChangeGeneralInfo;
      }
      if (other.fsmNudgeInfo_ != null) {
        if (fsmNudgeInfo_ == null) {
          FsmNudgeInfo = new global::Xviewer.FsmNudgeInfo();
        }
        FsmNudgeInfo.MergeFrom(other.FsmNudgeInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (planningTimeConsumption_ == null) {
              PlanningTimeConsumption = new global::Xviewer.TimeConsumption();
            }
            input.ReadMessage(PlanningTimeConsumption);
            break;
          }
          case 18: {
            if (trafficLightInfo_ == null) {
              TrafficLightInfo = new global::Xviewer.TrafficLightDebugInfo();
            }
            input.ReadMessage(TrafficLightInfo);
            break;
          }
          case 26: {
            if (recommendSpeedMps_ == null) {
              RecommendSpeedMps = new global::Xviewer.SpeedLimitInfo();
            }
            input.ReadMessage(RecommendSpeedMps);
            break;
          }
          case 34: {
            if (egoRelativePosition_ == null) {
              EgoRelativePosition = new global::Xviewer.EgoRelativePosition();
            }
            input.ReadMessage(EgoRelativePosition);
            break;
          }
          case 42: {
            if (egoRlInfo_ == null) {
              EgoRlInfo = new global::Xviewer.RlDebugInfo();
            }
            input.ReadMessage(EgoRlInfo);
            break;
          }
          case 50: {
            if (targetRlInfo_ == null) {
              TargetRlInfo = new global::Xviewer.RlDebugInfo();
            }
            input.ReadMessage(TargetRlInfo);
            break;
          }
          case 58: {
            if (leftRlInfo_ == null) {
              LeftRlInfo = new global::Xviewer.RlDebugInfo();
            }
            input.ReadMessage(LeftRlInfo);
            break;
          }
          case 66: {
            if (rightRlInfo_ == null) {
              RightRlInfo = new global::Xviewer.RlDebugInfo();
            }
            input.ReadMessage(RightRlInfo);
            break;
          }
          case 74: {
            if (fsmLaneChangeInfo_ == null) {
              FsmLaneChangeInfo = new global::Xviewer.FsmLaneChangeInfo();
            }
            input.ReadMessage(FsmLaneChangeInfo);
            break;
          }
          case 82: {
            AssignedDynamicObjectsInfo = input.ReadString();
            break;
          }
          case 90: {
            LcDebugInfo = input.ReadString();
            break;
          }
          case 98: {
            NudgeDebugInfo = input.ReadString();
            break;
          }
          case 106: {
            GapDebugInfo = input.ReadString();
            break;
          }
          case 114: {
            ActionCancelReason = input.ReadString();
            break;
          }
          case 122: {
            LaneChangeGeneralInfo = input.ReadString();
            break;
          }
          case 130: {
            if (fsmNudgeInfo_ == null) {
              FsmNudgeInfo = new global::Xviewer.FsmNudgeInfo();
            }
            input.ReadMessage(FsmNudgeInfo);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
