// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: localization.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Xviewer {

  /// <summary>Holder for reflection information generated from localization.proto</summary>
  public static partial class LocalizationReflection {

    #region Descriptor
    /// <summary>File descriptor for localization.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LocalizationReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJsb2NhbGl6YXRpb24ucHJvdG8SB3h2aWV3ZXIaDGJhc2ljcy5wcm90byJS",
            "CgRQb3NlEiAKCHBvc2l0aW9uGAEgASgLMg4ueHZpZXdlci5Qb2ludBIoCgtv",
            "cmllbnRhdGlvbhgCIAEoCzITLnh2aWV3ZXIuUXVhdGVybmlvbiJNCgpUd2lz",
            "dEFjY2VsEh4KBmxpbmVhchgBIAEoCzIOLnh2aWV3ZXIuUG9pbnQSHwoHYW5n",
            "dWxhchgCIAEoCzIOLnh2aWV3ZXIuUG9pbnQitwEKDExvY2FsaXphdGlvbhIg",
            "CgR0aW1lGAEgASgLMhIueHZpZXdlci5UaW1lV29ybGQSFgoOY2hpbGRfZnJh",
            "bWVfaWQYAiABKAkSGwoEcG9zZRgDIAEoCzINLnh2aWV3ZXIuUG9zZRIlCgh2",
            "ZWxvY2l0eRgEIAEoCzITLnh2aWV3ZXIuVHdpc3RBY2NlbBIpCgxhY2NlbGVy",
            "YXRpb24YBSABKAsyEy54dmlld2VyLlR3aXN0QWNjZWwinAEKDkdsb2JhbFBv",
            "c2VJbmZvEiAKBHRpbWUYASABKAsyEi54dmlld2VyLlRpbWVXb3JsZBIbCgNi",
            "bGgYAiABKAsyDi54dmlld2VyLlBvaW50Eh8KB3V0bV9wb3MYAyABKAsyDi54",
            "dmlld2VyLlBvaW50EioKDWNvcnJfdXRtX3F1YXQYBCABKAsyEy54dmlld2Vy",
            "LlF1YXRlcm5pb24iqQUKDUxvY2FsUG9zZUluZm8SIAoEdGltZRgBIAEoCzIS",
            "Lnh2aWV3ZXIuVGltZVdvcmxkEiMKDHJpZ190b19sb2NhbBgCIAEoCzINLnh2",
            "aWV3ZXIuUG9zZRIfCgdyaWdfYXR0GAMgASgLMg4ueHZpZXdlci5Qb2ludBIi",
            "Cgp2ZWxfaW5fcmlnGAQgASgLMg4ueHZpZXdlci5Qb2ludBIbCgNhY2MYBSAB",
            "KAsyDi54dmlld2VyLlBvaW50EhwKBGd5cm8YBiABKAsyDi54dmlld2VyLlBv",
            "aW50EisKFGFuY2hvcl9sb2NhbF9pbl9lY2VmGAcgASgLMg0ueHZpZXdlci5Q",
            "b3NlEjAKGWN1cl9hbmNob3JfdG9fcHJldl9hbmNob3IYCCABKAsyDS54dmll",
            "d2VyLlBvc2USHwoHbGxhX3N0ZBgJIAEoCzIOLnh2aWV3ZXIuUG9pbnQSHwoH",
            "cm90X3N0ZBgKIAEoCzIOLnh2aWV3ZXIuUG9pbnQSHwoHdmVsX3N0ZBgLIAEo",
            "CzIOLnh2aWV3ZXIuUG9pbnQSJAoMYWNjX2JpYXNfc3RkGAwgASgLMg4ueHZp",
            "ZXdlci5Qb2ludBIlCg1neXJvX2JpYXNfc3RkGA0gASgLMg4ueHZpZXdlci5Q",
            "b2ludBIVCg1mdXNpb25fc3RhdHVzGA4gASgFEhIKCmdwc19zdGF0dXMYDyAB",
            "KAUSFAoMYWxpZ25fc3RhdHVzGBAgASgFEhkKEWxvY19hY2N1cmFjeV9mbGFn",
            "GBEgASgFEhQKDG1lYXN1cmVfZmxhZxgSIAEoBRISCgpmX3Jlc2VydmVkGBMg",
            "AygCEhIKCmNfcmVzZXJ2ZWQYFCADKAUSEwoLc190aW1lc3RhbXAYFSABKAES",
            "EwoLZV90aW1lc3RhbXAYFiABKAEipQEKDExvY0ZhdWx0SW5mbxIgCgR0aW1l",
            "GAEgASgLMhIueHZpZXdlci5UaW1lV29ybGQSGwoTaGFyZHdhcmVfZmF1bHRf",
            "aW5mbxgCIAEoBRIeChZpbnB1dF9wYXJhbV9mYXVsdF9pbmZvGAMgASgFEhgK",
            "EGFsaWduX2ZhdWx0X2luZm8YBCABKAUSHAoUc2Vuc29yX291dF9sb3N0X2lu",
            "Zm8YBSABKAUijQIKEkxvY0NhbGlicmF0aW9uSW5mbxIgCgR0aW1lGAEgASgL",
            "MhIueHZpZXdlci5UaW1lV29ybGQSEQoJdGltZXN0YW1wGAIgASgBEhkKEXdo",
            "ZWVsX3NwZWVkX3NjYWxlGAMgASgBEigKEGltdV90b19yaWdfYW5nbGUYBCAB",
            "KAsyDi54dmlld2VyLlBvaW50EiQKDWltdV90b19jYW1lcmEYBSABKAsyDS54",
            "dmlld2VyLlBvc2USIAoIYWNjX2JpYXMYBiABKAsyDi54dmlld2VyLlBvaW50",
            "EiEKCWd5cm9fYmlhcxgHIAEoCzIOLnh2aWV3ZXIuUG9pbnQSEgoKZl9yZXNl",
            "cnZlZBgIIAMoASL+AQoMR2xvYmFsTG9jTXNnEiAKBHRpbWUYASABKAsyEi54",
            "dmlld2VyLlRpbWVXb3JsZBIxChBnbG9iYWxfcG9zZV9pbmZvGAIgASgLMhcu",
            "eHZpZXdlci5HbG9iYWxQb3NlSW5mbxIvCg9sb2NhbF9wb3NlX2luZm8YAyAB",
            "KAsyFi54dmlld2VyLkxvY2FsUG9zZUluZm8SLQoObG9jX2ZhdWx0X2luZm8Y",
            "BCABKAsyFS54dmlld2VyLkxvY0ZhdWx0SW5mbxI5ChRsb2NfY2FsaWJyYXRp",
            "b25faW5mbxgFIAEoCzIbLnh2aWV3ZXIuTG9jQ2FsaWJyYXRpb25JbmZvIrUE",
            "CgxPZG9tUG9zZUluZm8SIAoEdGltZRgBIAEoCzISLnh2aWV3ZXIuVGltZVdv",
            "cmxkEiMKDHJpZ190b19sb2NhbBgCIAEoCzINLnh2aWV3ZXIuUG9zZRIfCgdy",
            "aWdfYXR0GAMgASgLMg4ueHZpZXdlci5Qb2ludBIiCgp2ZWxfaW5fcmlnGAQg",
            "ASgLMg4ueHZpZXdlci5Qb2ludBIbCgNhY2MYBSABKAsyDi54dmlld2VyLlBv",
            "aW50EhwKBGd5cm8YBiABKAsyDi54dmlld2VyLlBvaW50Eh8KB3Bvc19zdGQY",
            "ByABKAsyDi54dmlld2VyLlBvaW50Eh8KB3JvdF9zdGQYCCABKAsyDi54dmll",
            "d2VyLlBvaW50Eh8KB3ZlbF9zdGQYCSABKAsyDi54dmlld2VyLlBvaW50EiQK",
            "DGFjY19iaWFzX3N0ZBgKIAEoCzIOLnh2aWV3ZXIuUG9pbnQSJQoNZ3lyb19i",
            "aWFzX3N0ZBgLIAEoCzIOLnh2aWV3ZXIuUG9pbnQSFQoNZnVzaW9uX3N0YXR1",
            "cxgMIAEoBRIUCgxhbGlnbl9zdGF0dXMYDSABKAUSGQoRbG9jX2FjY3VyYWN5",
            "X2ZsYWcYDiABKAUSFAoMbWVhc3VyZV9mbGFnGA8gASgFEhIKCmZfcmVzZXJ2",
            "ZWQYECADKAISEgoKY19yZXNlcnZlZBgRIAMoBRITCgtzX3RpbWVzdGFtcBgS",
            "IAEoARITCgtlX3RpbWVzdGFtcBgTIAEoASI8CgtPZG9tZXRyeU1zZxItCg5v",
            "ZG9tX3Bvc2VfaW5mbxgBIAEoCzIVLnh2aWV3ZXIuT2RvbVBvc2VJbmZvInwK",
            "EkZ1c2lvbkxvY2FsaXphdGlvbhIjCgRtc2ZsGAEgASgLMhUueHZpZXdlci5H",
            "bG9iYWxMb2NNc2cSJgoIb2RvbWV0cnkYAiABKAsyFC54dmlld2VyLk9kb21l",
            "dHJ5TXNnEhkKEWxvY2FsaXphdGlvbl9mbGFnGAMgASgF"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Xviewer.BasicsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.Pose), global::Xviewer.Pose.Parser, new[]{ "Position", "Orientation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.TwistAccel), global::Xviewer.TwistAccel.Parser, new[]{ "Linear", "Angular" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.Localization), global::Xviewer.Localization.Parser, new[]{ "Time", "ChildFrameId", "Pose", "Velocity", "Acceleration" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.GlobalPoseInfo), global::Xviewer.GlobalPoseInfo.Parser, new[]{ "Time", "Blh", "UtmPos", "CorrUtmQuat" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.LocalPoseInfo), global::Xviewer.LocalPoseInfo.Parser, new[]{ "Time", "RigToLocal", "RigAtt", "VelInRig", "Acc", "Gyro", "AnchorLocalInEcef", "CurAnchorToPrevAnchor", "LlaStd", "RotStd", "VelStd", "AccBiasStd", "GyroBiasStd", "FusionStatus", "GpsStatus", "AlignStatus", "LocAccuracyFlag", "MeasureFlag", "FReserved", "CReserved", "STimestamp", "ETimestamp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.LocFaultInfo), global::Xviewer.LocFaultInfo.Parser, new[]{ "Time", "HardwareFaultInfo", "InputParamFaultInfo", "AlignFaultInfo", "SensorOutLostInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.LocCalibrationInfo), global::Xviewer.LocCalibrationInfo.Parser, new[]{ "Time", "Timestamp", "WheelSpeedScale", "ImuToRigAngle", "ImuToCamera", "AccBias", "GyroBias", "FReserved" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.GlobalLocMsg), global::Xviewer.GlobalLocMsg.Parser, new[]{ "Time", "GlobalPoseInfo", "LocalPoseInfo", "LocFaultInfo", "LocCalibrationInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.OdomPoseInfo), global::Xviewer.OdomPoseInfo.Parser, new[]{ "Time", "RigToLocal", "RigAtt", "VelInRig", "Acc", "Gyro", "PosStd", "RotStd", "VelStd", "AccBiasStd", "GyroBiasStd", "FusionStatus", "AlignStatus", "LocAccuracyFlag", "MeasureFlag", "FReserved", "CReserved", "STimestamp", "ETimestamp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.OdometryMsg), global::Xviewer.OdometryMsg.Parser, new[]{ "OdomPoseInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.FusionLocalization), global::Xviewer.FusionLocalization.Parser, new[]{ "Msfl", "Odometry", "LocalizationFlag" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// ----------------  融合定位消息结构 --------------------//
  /// </summary>
  public sealed partial class Pose : pb::IMessage<Pose> {
    private static readonly pb::MessageParser<Pose> _parser = new pb::MessageParser<Pose>(() => new Pose());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pose> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.LocalizationReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pose() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pose(Pose other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      orientation_ = other.orientation_ != null ? other.orientation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pose Clone() {
      return new Pose(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::Xviewer.Point position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Point Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "orientation" field.</summary>
    public const int OrientationFieldNumber = 2;
    private global::Xviewer.Quaternion orientation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Quaternion Orientation {
      get { return orientation_; }
      set {
        orientation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pose);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pose other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Orientation, other.Orientation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (orientation_ != null) hash ^= Orientation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (orientation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Orientation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (orientation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Orientation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pose other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Xviewer.Point();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.orientation_ != null) {
        if (orientation_ == null) {
          Orientation = new global::Xviewer.Quaternion();
        }
        Orientation.MergeFrom(other.Orientation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::Xviewer.Point();
            }
            input.ReadMessage(Position);
            break;
          }
          case 18: {
            if (orientation_ == null) {
              Orientation = new global::Xviewer.Quaternion();
            }
            input.ReadMessage(Orientation);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TwistAccel : pb::IMessage<TwistAccel> {
    private static readonly pb::MessageParser<TwistAccel> _parser = new pb::MessageParser<TwistAccel>(() => new TwistAccel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TwistAccel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.LocalizationReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TwistAccel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TwistAccel(TwistAccel other) : this() {
      linear_ = other.linear_ != null ? other.linear_.Clone() : null;
      angular_ = other.angular_ != null ? other.angular_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TwistAccel Clone() {
      return new TwistAccel(this);
    }

    /// <summary>Field number for the "linear" field.</summary>
    public const int LinearFieldNumber = 1;
    private global::Xviewer.Point linear_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Point Linear {
      get { return linear_; }
      set {
        linear_ = value;
      }
    }

    /// <summary>Field number for the "angular" field.</summary>
    public const int AngularFieldNumber = 2;
    private global::Xviewer.Point angular_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Point Angular {
      get { return angular_; }
      set {
        angular_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TwistAccel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TwistAccel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Linear, other.Linear)) return false;
      if (!object.Equals(Angular, other.Angular)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (linear_ != null) hash ^= Linear.GetHashCode();
      if (angular_ != null) hash ^= Angular.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (linear_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Linear);
      }
      if (angular_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Angular);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (linear_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Linear);
      }
      if (angular_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Angular);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TwistAccel other) {
      if (other == null) {
        return;
      }
      if (other.linear_ != null) {
        if (linear_ == null) {
          Linear = new global::Xviewer.Point();
        }
        Linear.MergeFrom(other.Linear);
      }
      if (other.angular_ != null) {
        if (angular_ == null) {
          Angular = new global::Xviewer.Point();
        }
        Angular.MergeFrom(other.Angular);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (linear_ == null) {
              Linear = new global::Xviewer.Point();
            }
            input.ReadMessage(Linear);
            break;
          }
          case 18: {
            if (angular_ == null) {
              Angular = new global::Xviewer.Point();
            }
            input.ReadMessage(Angular);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Localization : pb::IMessage<Localization> {
    private static readonly pb::MessageParser<Localization> _parser = new pb::MessageParser<Localization>(() => new Localization());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Localization> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.LocalizationReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Localization() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Localization(Localization other) : this() {
      time_ = other.time_ != null ? other.time_.Clone() : null;
      childFrameId_ = other.childFrameId_;
      pose_ = other.pose_ != null ? other.pose_.Clone() : null;
      velocity_ = other.velocity_ != null ? other.velocity_.Clone() : null;
      acceleration_ = other.acceleration_ != null ? other.acceleration_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Localization Clone() {
      return new Localization(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private global::Xviewer.TimeWorld time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.TimeWorld Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "child_frame_id" field.</summary>
    public const int ChildFrameIdFieldNumber = 2;
    private readonly static string ChildFrameIdDefaultValue = "";

    private string childFrameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChildFrameId {
      get { return childFrameId_ ?? ChildFrameIdDefaultValue; }
      set {
        childFrameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "child_frame_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChildFrameId {
      get { return childFrameId_ != null; }
    }
    /// <summary>Clears the value of the "child_frame_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChildFrameId() {
      childFrameId_ = null;
    }

    /// <summary>Field number for the "pose" field.</summary>
    public const int PoseFieldNumber = 3;
    private global::Xviewer.Pose pose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Pose Pose {
      get { return pose_; }
      set {
        pose_ = value;
      }
    }

    /// <summary>Field number for the "velocity" field.</summary>
    public const int VelocityFieldNumber = 4;
    private global::Xviewer.TwistAccel velocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.TwistAccel Velocity {
      get { return velocity_; }
      set {
        velocity_ = value;
      }
    }

    /// <summary>Field number for the "acceleration" field.</summary>
    public const int AccelerationFieldNumber = 5;
    private global::Xviewer.TwistAccel acceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.TwistAccel Acceleration {
      get { return acceleration_; }
      set {
        acceleration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Localization);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Localization other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Time, other.Time)) return false;
      if (ChildFrameId != other.ChildFrameId) return false;
      if (!object.Equals(Pose, other.Pose)) return false;
      if (!object.Equals(Velocity, other.Velocity)) return false;
      if (!object.Equals(Acceleration, other.Acceleration)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (time_ != null) hash ^= Time.GetHashCode();
      if (HasChildFrameId) hash ^= ChildFrameId.GetHashCode();
      if (pose_ != null) hash ^= Pose.GetHashCode();
      if (velocity_ != null) hash ^= Velocity.GetHashCode();
      if (acceleration_ != null) hash ^= Acceleration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (time_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Time);
      }
      if (HasChildFrameId) {
        output.WriteRawTag(18);
        output.WriteString(ChildFrameId);
      }
      if (pose_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pose);
      }
      if (velocity_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Velocity);
      }
      if (acceleration_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Acceleration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (time_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Time);
      }
      if (HasChildFrameId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChildFrameId);
      }
      if (pose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pose);
      }
      if (velocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Velocity);
      }
      if (acceleration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Acceleration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Localization other) {
      if (other == null) {
        return;
      }
      if (other.time_ != null) {
        if (time_ == null) {
          Time = new global::Xviewer.TimeWorld();
        }
        Time.MergeFrom(other.Time);
      }
      if (other.HasChildFrameId) {
        ChildFrameId = other.ChildFrameId;
      }
      if (other.pose_ != null) {
        if (pose_ == null) {
          Pose = new global::Xviewer.Pose();
        }
        Pose.MergeFrom(other.Pose);
      }
      if (other.velocity_ != null) {
        if (velocity_ == null) {
          Velocity = new global::Xviewer.TwistAccel();
        }
        Velocity.MergeFrom(other.Velocity);
      }
      if (other.acceleration_ != null) {
        if (acceleration_ == null) {
          Acceleration = new global::Xviewer.TwistAccel();
        }
        Acceleration.MergeFrom(other.Acceleration);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (time_ == null) {
              Time = new global::Xviewer.TimeWorld();
            }
            input.ReadMessage(Time);
            break;
          }
          case 18: {
            ChildFrameId = input.ReadString();
            break;
          }
          case 26: {
            if (pose_ == null) {
              Pose = new global::Xviewer.Pose();
            }
            input.ReadMessage(Pose);
            break;
          }
          case 34: {
            if (velocity_ == null) {
              Velocity = new global::Xviewer.TwistAccel();
            }
            input.ReadMessage(Velocity);
            break;
          }
          case 42: {
            if (acceleration_ == null) {
              Acceleration = new global::Xviewer.TwistAccel();
            }
            input.ReadMessage(Acceleration);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GlobalPoseInfo : pb::IMessage<GlobalPoseInfo> {
    private static readonly pb::MessageParser<GlobalPoseInfo> _parser = new pb::MessageParser<GlobalPoseInfo>(() => new GlobalPoseInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GlobalPoseInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.LocalizationReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalPoseInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalPoseInfo(GlobalPoseInfo other) : this() {
      time_ = other.time_ != null ? other.time_.Clone() : null;
      blh_ = other.blh_ != null ? other.blh_.Clone() : null;
      utmPos_ = other.utmPos_ != null ? other.utmPos_.Clone() : null;
      corrUtmQuat_ = other.corrUtmQuat_ != null ? other.corrUtmQuat_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalPoseInfo Clone() {
      return new GlobalPoseInfo(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private global::Xviewer.TimeWorld time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.TimeWorld Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "blh" field.</summary>
    public const int BlhFieldNumber = 2;
    private global::Xviewer.Point blh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Point Blh {
      get { return blh_; }
      set {
        blh_ = value;
      }
    }

    /// <summary>Field number for the "utm_pos" field.</summary>
    public const int UtmPosFieldNumber = 3;
    private global::Xviewer.Point utmPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Point UtmPos {
      get { return utmPos_; }
      set {
        utmPos_ = value;
      }
    }

    /// <summary>Field number for the "corr_utm_quat" field.</summary>
    public const int CorrUtmQuatFieldNumber = 4;
    private global::Xviewer.Quaternion corrUtmQuat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Quaternion CorrUtmQuat {
      get { return corrUtmQuat_; }
      set {
        corrUtmQuat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GlobalPoseInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GlobalPoseInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Time, other.Time)) return false;
      if (!object.Equals(Blh, other.Blh)) return false;
      if (!object.Equals(UtmPos, other.UtmPos)) return false;
      if (!object.Equals(CorrUtmQuat, other.CorrUtmQuat)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (time_ != null) hash ^= Time.GetHashCode();
      if (blh_ != null) hash ^= Blh.GetHashCode();
      if (utmPos_ != null) hash ^= UtmPos.GetHashCode();
      if (corrUtmQuat_ != null) hash ^= CorrUtmQuat.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (time_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Time);
      }
      if (blh_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Blh);
      }
      if (utmPos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UtmPos);
      }
      if (corrUtmQuat_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CorrUtmQuat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (time_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Time);
      }
      if (blh_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Blh);
      }
      if (utmPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UtmPos);
      }
      if (corrUtmQuat_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CorrUtmQuat);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GlobalPoseInfo other) {
      if (other == null) {
        return;
      }
      if (other.time_ != null) {
        if (time_ == null) {
          Time = new global::Xviewer.TimeWorld();
        }
        Time.MergeFrom(other.Time);
      }
      if (other.blh_ != null) {
        if (blh_ == null) {
          Blh = new global::Xviewer.Point();
        }
        Blh.MergeFrom(other.Blh);
      }
      if (other.utmPos_ != null) {
        if (utmPos_ == null) {
          UtmPos = new global::Xviewer.Point();
        }
        UtmPos.MergeFrom(other.UtmPos);
      }
      if (other.corrUtmQuat_ != null) {
        if (corrUtmQuat_ == null) {
          CorrUtmQuat = new global::Xviewer.Quaternion();
        }
        CorrUtmQuat.MergeFrom(other.CorrUtmQuat);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (time_ == null) {
              Time = new global::Xviewer.TimeWorld();
            }
            input.ReadMessage(Time);
            break;
          }
          case 18: {
            if (blh_ == null) {
              Blh = new global::Xviewer.Point();
            }
            input.ReadMessage(Blh);
            break;
          }
          case 26: {
            if (utmPos_ == null) {
              UtmPos = new global::Xviewer.Point();
            }
            input.ReadMessage(UtmPos);
            break;
          }
          case 34: {
            if (corrUtmQuat_ == null) {
              CorrUtmQuat = new global::Xviewer.Quaternion();
            }
            input.ReadMessage(CorrUtmQuat);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LocalPoseInfo : pb::IMessage<LocalPoseInfo> {
    private static readonly pb::MessageParser<LocalPoseInfo> _parser = new pb::MessageParser<LocalPoseInfo>(() => new LocalPoseInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LocalPoseInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.LocalizationReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalPoseInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalPoseInfo(LocalPoseInfo other) : this() {
      _hasBits0 = other._hasBits0;
      time_ = other.time_ != null ? other.time_.Clone() : null;
      rigToLocal_ = other.rigToLocal_ != null ? other.rigToLocal_.Clone() : null;
      rigAtt_ = other.rigAtt_ != null ? other.rigAtt_.Clone() : null;
      velInRig_ = other.velInRig_ != null ? other.velInRig_.Clone() : null;
      acc_ = other.acc_ != null ? other.acc_.Clone() : null;
      gyro_ = other.gyro_ != null ? other.gyro_.Clone() : null;
      anchorLocalInEcef_ = other.anchorLocalInEcef_ != null ? other.anchorLocalInEcef_.Clone() : null;
      curAnchorToPrevAnchor_ = other.curAnchorToPrevAnchor_ != null ? other.curAnchorToPrevAnchor_.Clone() : null;
      llaStd_ = other.llaStd_ != null ? other.llaStd_.Clone() : null;
      rotStd_ = other.rotStd_ != null ? other.rotStd_.Clone() : null;
      velStd_ = other.velStd_ != null ? other.velStd_.Clone() : null;
      accBiasStd_ = other.accBiasStd_ != null ? other.accBiasStd_.Clone() : null;
      gyroBiasStd_ = other.gyroBiasStd_ != null ? other.gyroBiasStd_.Clone() : null;
      fusionStatus_ = other.fusionStatus_;
      gpsStatus_ = other.gpsStatus_;
      alignStatus_ = other.alignStatus_;
      locAccuracyFlag_ = other.locAccuracyFlag_;
      measureFlag_ = other.measureFlag_;
      fReserved_ = other.fReserved_.Clone();
      cReserved_ = other.cReserved_.Clone();
      sTimestamp_ = other.sTimestamp_;
      eTimestamp_ = other.eTimestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalPoseInfo Clone() {
      return new LocalPoseInfo(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private global::Xviewer.TimeWorld time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.TimeWorld Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "rig_to_local" field.</summary>
    public const int RigToLocalFieldNumber = 2;
    private global::Xviewer.Pose rigToLocal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Pose RigToLocal {
      get { return rigToLocal_; }
      set {
        rigToLocal_ = value;
      }
    }

    /// <summary>Field number for the "rig_att" field.</summary>
    public const int RigAttFieldNumber = 3;
    private global::Xviewer.Point rigAtt_;
    /// <summary>
    /// euler angle: roll, pitch, yaw
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Point RigAtt {
      get { return rigAtt_; }
      set {
        rigAtt_ = value;
      }
    }

    /// <summary>Field number for the "vel_in_rig" field.</summary>
    public const int VelInRigFieldNumber = 4;
    private global::Xviewer.Point velInRig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Point VelInRig {
      get { return velInRig_; }
      set {
        velInRig_ = value;
      }
    }

    /// <summary>Field number for the "acc" field.</summary>
    public const int AccFieldNumber = 5;
    private global::Xviewer.Point acc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Point Acc {
      get { return acc_; }
      set {
        acc_ = value;
      }
    }

    /// <summary>Field number for the "gyro" field.</summary>
    public const int GyroFieldNumber = 6;
    private global::Xviewer.Point gyro_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Point Gyro {
      get { return gyro_; }
      set {
        gyro_ = value;
      }
    }

    /// <summary>Field number for the "anchor_local_in_ecef" field.</summary>
    public const int AnchorLocalInEcefFieldNumber = 7;
    private global::Xviewer.Pose anchorLocalInEcef_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Pose AnchorLocalInEcef {
      get { return anchorLocalInEcef_; }
      set {
        anchorLocalInEcef_ = value;
      }
    }

    /// <summary>Field number for the "cur_anchor_to_prev_anchor" field.</summary>
    public const int CurAnchorToPrevAnchorFieldNumber = 8;
    private global::Xviewer.Pose curAnchorToPrevAnchor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Pose CurAnchorToPrevAnchor {
      get { return curAnchorToPrevAnchor_; }
      set {
        curAnchorToPrevAnchor_ = value;
      }
    }

    /// <summary>Field number for the "lla_std" field.</summary>
    public const int LlaStdFieldNumber = 9;
    private global::Xviewer.Point llaStd_;
    /// <summary>
    /// lat, lon, alt
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Point LlaStd {
      get { return llaStd_; }
      set {
        llaStd_ = value;
      }
    }

    /// <summary>Field number for the "rot_std" field.</summary>
    public const int RotStdFieldNumber = 10;
    private global::Xviewer.Point rotStd_;
    /// <summary>
    /// roll, pitch, yaw
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Point RotStd {
      get { return rotStd_; }
      set {
        rotStd_ = value;
      }
    }

    /// <summary>Field number for the "vel_std" field.</summary>
    public const int VelStdFieldNumber = 11;
    private global::Xviewer.Point velStd_;
    /// <summary>
    /// east, north, up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Point VelStd {
      get { return velStd_; }
      set {
        velStd_ = value;
      }
    }

    /// <summary>Field number for the "acc_bias_std" field.</summary>
    public const int AccBiasStdFieldNumber = 12;
    private global::Xviewer.Point accBiasStd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Point AccBiasStd {
      get { return accBiasStd_; }
      set {
        accBiasStd_ = value;
      }
    }

    /// <summary>Field number for the "gyro_bias_std" field.</summary>
    public const int GyroBiasStdFieldNumber = 13;
    private global::Xviewer.Point gyroBiasStd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Point GyroBiasStd {
      get { return gyroBiasStd_; }
      set {
        gyroBiasStd_ = value;
      }
    }

    /// <summary>Field number for the "fusion_status" field.</summary>
    public const int FusionStatusFieldNumber = 14;
    private readonly static int FusionStatusDefaultValue = 0;

    private int fusionStatus_;
    /// <summary>
    /// 融合状态 0: 初始化; bit0 = 1: INS;  bit1 = 1 : GPS; bit2 = 1 : MC; bit3 = 1 : WIO;  bit4 = 1 : VIO; bit5: ZUPT; bit6: ZARU
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FusionStatus {
      get { if ((_hasBits0 & 1) != 0) { return fusionStatus_; } else { return FusionStatusDefaultValue; } }
      set {
        _hasBits0 |= 1;
        fusionStatus_ = value;
      }
    }
    /// <summary>Gets whether the "fusion_status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFusionStatus {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "fusion_status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFusionStatus() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "gps_status" field.</summary>
    public const int GpsStatusFieldNumber = 15;
    private readonly static int GpsStatusDefaultValue = 0;

    private int gpsStatus_;
    /// <summary>
    /// GPS状态 0: SINGLE_POINT；1： DGPS；2： SBAS；3：PPP； 4： RTK_float；5: RTK_FIX; 6: OTHER;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GpsStatus {
      get { if ((_hasBits0 & 2) != 0) { return gpsStatus_; } else { return GpsStatusDefaultValue; } }
      set {
        _hasBits0 |= 2;
        gpsStatus_ = value;
      }
    }
    /// <summary>Gets whether the "gps_status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGpsStatus {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "gps_status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGpsStatus() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "align_status" field.</summary>
    public const int AlignStatusFieldNumber = 16;
    private readonly static int AlignStatusDefaultValue = 0;

    private int alignStatus_;
    /// <summary>
    /// 静止对准，动态对准，粗对准，精确对准
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AlignStatus {
      get { if ((_hasBits0 & 4) != 0) { return alignStatus_; } else { return AlignStatusDefaultValue; } }
      set {
        _hasBits0 |= 4;
        alignStatus_ = value;
      }
    }
    /// <summary>Gets whether the "align_status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAlignStatus {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "align_status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAlignStatus() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "loc_accuracy_flag" field.</summary>
    public const int LocAccuracyFlagFieldNumber = 17;
    private readonly static int LocAccuracyFlagDefaultValue = 0;

    private int locAccuracyFlag_;
    /// <summary>
    /// 0: 不可用；1：精度下降；2：高精度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LocAccuracyFlag {
      get { if ((_hasBits0 & 8) != 0) { return locAccuracyFlag_; } else { return LocAccuracyFlagDefaultValue; } }
      set {
        _hasBits0 |= 8;
        locAccuracyFlag_ = value;
      }
    }
    /// <summary>Gets whether the "loc_accuracy_flag" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLocAccuracyFlag {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "loc_accuracy_flag" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLocAccuracyFlag() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "measure_flag" field.</summary>
    public const int MeasureFlagFieldNumber = 18;
    private readonly static int MeasureFlagDefaultValue = 0;

    private int measureFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MeasureFlag {
      get { if ((_hasBits0 & 16) != 0) { return measureFlag_; } else { return MeasureFlagDefaultValue; } }
      set {
        _hasBits0 |= 16;
        measureFlag_ = value;
      }
    }
    /// <summary>Gets whether the "measure_flag" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMeasureFlag {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "measure_flag" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMeasureFlag() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "f_reserved" field.</summary>
    public const int FReservedFieldNumber = 19;
    private static readonly pb::FieldCodec<float> _repeated_fReserved_codec
        = pb::FieldCodec.ForFloat(157);
    private readonly pbc::RepeatedField<float> fReserved_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// TBD
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> FReserved {
      get { return fReserved_; }
    }

    /// <summary>Field number for the "c_reserved" field.</summary>
    public const int CReservedFieldNumber = 20;
    private static readonly pb::FieldCodec<int> _repeated_cReserved_codec
        = pb::FieldCodec.ForInt32(160);
    private readonly pbc::RepeatedField<int> cReserved_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// TBD
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CReserved {
      get { return cReserved_; }
    }

    /// <summary>Field number for the "s_timestamp" field.</summary>
    public const int STimestampFieldNumber = 21;
    private readonly static double STimestampDefaultValue = 0D;

    private double sTimestamp_;
    /// <summary>
    /// imu gps time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double STimestamp {
      get { if ((_hasBits0 & 32) != 0) { return sTimestamp_; } else { return STimestampDefaultValue; } }
      set {
        _hasBits0 |= 32;
        sTimestamp_ = value;
      }
    }
    /// <summary>Gets whether the "s_timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSTimestamp {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "s_timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSTimestamp() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "e_timestamp" field.</summary>
    public const int ETimestampFieldNumber = 22;
    private readonly static double ETimestampDefaultValue = 0D;

    private double eTimestamp_;
    /// <summary>
    /// alg rev ros time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ETimestamp {
      get { if ((_hasBits0 & 64) != 0) { return eTimestamp_; } else { return ETimestampDefaultValue; } }
      set {
        _hasBits0 |= 64;
        eTimestamp_ = value;
      }
    }
    /// <summary>Gets whether the "e_timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasETimestamp {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "e_timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearETimestamp() {
      _hasBits0 &= ~64;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LocalPoseInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LocalPoseInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Time, other.Time)) return false;
      if (!object.Equals(RigToLocal, other.RigToLocal)) return false;
      if (!object.Equals(RigAtt, other.RigAtt)) return false;
      if (!object.Equals(VelInRig, other.VelInRig)) return false;
      if (!object.Equals(Acc, other.Acc)) return false;
      if (!object.Equals(Gyro, other.Gyro)) return false;
      if (!object.Equals(AnchorLocalInEcef, other.AnchorLocalInEcef)) return false;
      if (!object.Equals(CurAnchorToPrevAnchor, other.CurAnchorToPrevAnchor)) return false;
      if (!object.Equals(LlaStd, other.LlaStd)) return false;
      if (!object.Equals(RotStd, other.RotStd)) return false;
      if (!object.Equals(VelStd, other.VelStd)) return false;
      if (!object.Equals(AccBiasStd, other.AccBiasStd)) return false;
      if (!object.Equals(GyroBiasStd, other.GyroBiasStd)) return false;
      if (FusionStatus != other.FusionStatus) return false;
      if (GpsStatus != other.GpsStatus) return false;
      if (AlignStatus != other.AlignStatus) return false;
      if (LocAccuracyFlag != other.LocAccuracyFlag) return false;
      if (MeasureFlag != other.MeasureFlag) return false;
      if(!fReserved_.Equals(other.fReserved_)) return false;
      if(!cReserved_.Equals(other.cReserved_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(STimestamp, other.STimestamp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ETimestamp, other.ETimestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (time_ != null) hash ^= Time.GetHashCode();
      if (rigToLocal_ != null) hash ^= RigToLocal.GetHashCode();
      if (rigAtt_ != null) hash ^= RigAtt.GetHashCode();
      if (velInRig_ != null) hash ^= VelInRig.GetHashCode();
      if (acc_ != null) hash ^= Acc.GetHashCode();
      if (gyro_ != null) hash ^= Gyro.GetHashCode();
      if (anchorLocalInEcef_ != null) hash ^= AnchorLocalInEcef.GetHashCode();
      if (curAnchorToPrevAnchor_ != null) hash ^= CurAnchorToPrevAnchor.GetHashCode();
      if (llaStd_ != null) hash ^= LlaStd.GetHashCode();
      if (rotStd_ != null) hash ^= RotStd.GetHashCode();
      if (velStd_ != null) hash ^= VelStd.GetHashCode();
      if (accBiasStd_ != null) hash ^= AccBiasStd.GetHashCode();
      if (gyroBiasStd_ != null) hash ^= GyroBiasStd.GetHashCode();
      if (HasFusionStatus) hash ^= FusionStatus.GetHashCode();
      if (HasGpsStatus) hash ^= GpsStatus.GetHashCode();
      if (HasAlignStatus) hash ^= AlignStatus.GetHashCode();
      if (HasLocAccuracyFlag) hash ^= LocAccuracyFlag.GetHashCode();
      if (HasMeasureFlag) hash ^= MeasureFlag.GetHashCode();
      hash ^= fReserved_.GetHashCode();
      hash ^= cReserved_.GetHashCode();
      if (HasSTimestamp) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(STimestamp);
      if (HasETimestamp) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ETimestamp);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (time_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Time);
      }
      if (rigToLocal_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RigToLocal);
      }
      if (rigAtt_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RigAtt);
      }
      if (velInRig_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(VelInRig);
      }
      if (acc_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Acc);
      }
      if (gyro_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Gyro);
      }
      if (anchorLocalInEcef_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(AnchorLocalInEcef);
      }
      if (curAnchorToPrevAnchor_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(CurAnchorToPrevAnchor);
      }
      if (llaStd_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(LlaStd);
      }
      if (rotStd_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(RotStd);
      }
      if (velStd_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(VelStd);
      }
      if (accBiasStd_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(AccBiasStd);
      }
      if (gyroBiasStd_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(GyroBiasStd);
      }
      if (HasFusionStatus) {
        output.WriteRawTag(112);
        output.WriteInt32(FusionStatus);
      }
      if (HasGpsStatus) {
        output.WriteRawTag(120);
        output.WriteInt32(GpsStatus);
      }
      if (HasAlignStatus) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(AlignStatus);
      }
      if (HasLocAccuracyFlag) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(LocAccuracyFlag);
      }
      if (HasMeasureFlag) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(MeasureFlag);
      }
      fReserved_.WriteTo(output, _repeated_fReserved_codec);
      cReserved_.WriteTo(output, _repeated_cReserved_codec);
      if (HasSTimestamp) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(STimestamp);
      }
      if (HasETimestamp) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(ETimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (time_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Time);
      }
      if (rigToLocal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RigToLocal);
      }
      if (rigAtt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RigAtt);
      }
      if (velInRig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VelInRig);
      }
      if (acc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Acc);
      }
      if (gyro_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gyro);
      }
      if (anchorLocalInEcef_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AnchorLocalInEcef);
      }
      if (curAnchorToPrevAnchor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurAnchorToPrevAnchor);
      }
      if (llaStd_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LlaStd);
      }
      if (rotStd_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RotStd);
      }
      if (velStd_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VelStd);
      }
      if (accBiasStd_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AccBiasStd);
      }
      if (gyroBiasStd_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GyroBiasStd);
      }
      if (HasFusionStatus) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FusionStatus);
      }
      if (HasGpsStatus) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GpsStatus);
      }
      if (HasAlignStatus) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AlignStatus);
      }
      if (HasLocAccuracyFlag) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LocAccuracyFlag);
      }
      if (HasMeasureFlag) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MeasureFlag);
      }
      size += fReserved_.CalculateSize(_repeated_fReserved_codec);
      size += cReserved_.CalculateSize(_repeated_cReserved_codec);
      if (HasSTimestamp) {
        size += 2 + 8;
      }
      if (HasETimestamp) {
        size += 2 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LocalPoseInfo other) {
      if (other == null) {
        return;
      }
      if (other.time_ != null) {
        if (time_ == null) {
          Time = new global::Xviewer.TimeWorld();
        }
        Time.MergeFrom(other.Time);
      }
      if (other.rigToLocal_ != null) {
        if (rigToLocal_ == null) {
          RigToLocal = new global::Xviewer.Pose();
        }
        RigToLocal.MergeFrom(other.RigToLocal);
      }
      if (other.rigAtt_ != null) {
        if (rigAtt_ == null) {
          RigAtt = new global::Xviewer.Point();
        }
        RigAtt.MergeFrom(other.RigAtt);
      }
      if (other.velInRig_ != null) {
        if (velInRig_ == null) {
          VelInRig = new global::Xviewer.Point();
        }
        VelInRig.MergeFrom(other.VelInRig);
      }
      if (other.acc_ != null) {
        if (acc_ == null) {
          Acc = new global::Xviewer.Point();
        }
        Acc.MergeFrom(other.Acc);
      }
      if (other.gyro_ != null) {
        if (gyro_ == null) {
          Gyro = new global::Xviewer.Point();
        }
        Gyro.MergeFrom(other.Gyro);
      }
      if (other.anchorLocalInEcef_ != null) {
        if (anchorLocalInEcef_ == null) {
          AnchorLocalInEcef = new global::Xviewer.Pose();
        }
        AnchorLocalInEcef.MergeFrom(other.AnchorLocalInEcef);
      }
      if (other.curAnchorToPrevAnchor_ != null) {
        if (curAnchorToPrevAnchor_ == null) {
          CurAnchorToPrevAnchor = new global::Xviewer.Pose();
        }
        CurAnchorToPrevAnchor.MergeFrom(other.CurAnchorToPrevAnchor);
      }
      if (other.llaStd_ != null) {
        if (llaStd_ == null) {
          LlaStd = new global::Xviewer.Point();
        }
        LlaStd.MergeFrom(other.LlaStd);
      }
      if (other.rotStd_ != null) {
        if (rotStd_ == null) {
          RotStd = new global::Xviewer.Point();
        }
        RotStd.MergeFrom(other.RotStd);
      }
      if (other.velStd_ != null) {
        if (velStd_ == null) {
          VelStd = new global::Xviewer.Point();
        }
        VelStd.MergeFrom(other.VelStd);
      }
      if (other.accBiasStd_ != null) {
        if (accBiasStd_ == null) {
          AccBiasStd = new global::Xviewer.Point();
        }
        AccBiasStd.MergeFrom(other.AccBiasStd);
      }
      if (other.gyroBiasStd_ != null) {
        if (gyroBiasStd_ == null) {
          GyroBiasStd = new global::Xviewer.Point();
        }
        GyroBiasStd.MergeFrom(other.GyroBiasStd);
      }
      if (other.HasFusionStatus) {
        FusionStatus = other.FusionStatus;
      }
      if (other.HasGpsStatus) {
        GpsStatus = other.GpsStatus;
      }
      if (other.HasAlignStatus) {
        AlignStatus = other.AlignStatus;
      }
      if (other.HasLocAccuracyFlag) {
        LocAccuracyFlag = other.LocAccuracyFlag;
      }
      if (other.HasMeasureFlag) {
        MeasureFlag = other.MeasureFlag;
      }
      fReserved_.Add(other.fReserved_);
      cReserved_.Add(other.cReserved_);
      if (other.HasSTimestamp) {
        STimestamp = other.STimestamp;
      }
      if (other.HasETimestamp) {
        ETimestamp = other.ETimestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (time_ == null) {
              Time = new global::Xviewer.TimeWorld();
            }
            input.ReadMessage(Time);
            break;
          }
          case 18: {
            if (rigToLocal_ == null) {
              RigToLocal = new global::Xviewer.Pose();
            }
            input.ReadMessage(RigToLocal);
            break;
          }
          case 26: {
            if (rigAtt_ == null) {
              RigAtt = new global::Xviewer.Point();
            }
            input.ReadMessage(RigAtt);
            break;
          }
          case 34: {
            if (velInRig_ == null) {
              VelInRig = new global::Xviewer.Point();
            }
            input.ReadMessage(VelInRig);
            break;
          }
          case 42: {
            if (acc_ == null) {
              Acc = new global::Xviewer.Point();
            }
            input.ReadMessage(Acc);
            break;
          }
          case 50: {
            if (gyro_ == null) {
              Gyro = new global::Xviewer.Point();
            }
            input.ReadMessage(Gyro);
            break;
          }
          case 58: {
            if (anchorLocalInEcef_ == null) {
              AnchorLocalInEcef = new global::Xviewer.Pose();
            }
            input.ReadMessage(AnchorLocalInEcef);
            break;
          }
          case 66: {
            if (curAnchorToPrevAnchor_ == null) {
              CurAnchorToPrevAnchor = new global::Xviewer.Pose();
            }
            input.ReadMessage(CurAnchorToPrevAnchor);
            break;
          }
          case 74: {
            if (llaStd_ == null) {
              LlaStd = new global::Xviewer.Point();
            }
            input.ReadMessage(LlaStd);
            break;
          }
          case 82: {
            if (rotStd_ == null) {
              RotStd = new global::Xviewer.Point();
            }
            input.ReadMessage(RotStd);
            break;
          }
          case 90: {
            if (velStd_ == null) {
              VelStd = new global::Xviewer.Point();
            }
            input.ReadMessage(VelStd);
            break;
          }
          case 98: {
            if (accBiasStd_ == null) {
              AccBiasStd = new global::Xviewer.Point();
            }
            input.ReadMessage(AccBiasStd);
            break;
          }
          case 106: {
            if (gyroBiasStd_ == null) {
              GyroBiasStd = new global::Xviewer.Point();
            }
            input.ReadMessage(GyroBiasStd);
            break;
          }
          case 112: {
            FusionStatus = input.ReadInt32();
            break;
          }
          case 120: {
            GpsStatus = input.ReadInt32();
            break;
          }
          case 128: {
            AlignStatus = input.ReadInt32();
            break;
          }
          case 136: {
            LocAccuracyFlag = input.ReadInt32();
            break;
          }
          case 144: {
            MeasureFlag = input.ReadInt32();
            break;
          }
          case 154:
          case 157: {
            fReserved_.AddEntriesFrom(input, _repeated_fReserved_codec);
            break;
          }
          case 162:
          case 160: {
            cReserved_.AddEntriesFrom(input, _repeated_cReserved_codec);
            break;
          }
          case 169: {
            STimestamp = input.ReadDouble();
            break;
          }
          case 177: {
            ETimestamp = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LocFaultInfo : pb::IMessage<LocFaultInfo> {
    private static readonly pb::MessageParser<LocFaultInfo> _parser = new pb::MessageParser<LocFaultInfo>(() => new LocFaultInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LocFaultInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.LocalizationReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocFaultInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocFaultInfo(LocFaultInfo other) : this() {
      _hasBits0 = other._hasBits0;
      time_ = other.time_ != null ? other.time_.Clone() : null;
      hardwareFaultInfo_ = other.hardwareFaultInfo_;
      inputParamFaultInfo_ = other.inputParamFaultInfo_;
      alignFaultInfo_ = other.alignFaultInfo_;
      sensorOutLostInfo_ = other.sensorOutLostInfo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocFaultInfo Clone() {
      return new LocFaultInfo(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private global::Xviewer.TimeWorld time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.TimeWorld Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "hardware_fault_info" field.</summary>
    public const int HardwareFaultInfoFieldNumber = 2;
    private readonly static int HardwareFaultInfoDefaultValue = 0;

    private int hardwareFaultInfo_;
    /// <summary>
    /// bit0 = 1 : gyro fault; bit1= 1 : acc fault; bit2 = 1 : gnss recv fault;  bit4 = 1 : power too low; bit5 = 1 : power too high; bit6 = 1 : temperature out of operation range
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HardwareFaultInfo {
      get { if ((_hasBits0 & 1) != 0) { return hardwareFaultInfo_; } else { return HardwareFaultInfoDefaultValue; } }
      set {
        _hasBits0 |= 1;
        hardwareFaultInfo_ = value;
      }
    }
    /// <summary>Gets whether the "hardware_fault_info" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHardwareFaultInfo {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "hardware_fault_info" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHardwareFaultInfo() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "input_param_fault_info" field.</summary>
    public const int InputParamFaultInfoFieldNumber = 3;
    private readonly static int InputParamFaultInfoDefaultValue = 0;

    private int inputParamFaultInfo_;
    /// <summary>
    /// bit0 = 1 : msfl config param invalid;    bit1 = 1: gyro invalid;   bit2 = 1: acc invalid;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InputParamFaultInfo {
      get { if ((_hasBits0 & 2) != 0) { return inputParamFaultInfo_; } else { return InputParamFaultInfoDefaultValue; } }
      set {
        _hasBits0 |= 2;
        inputParamFaultInfo_ = value;
      }
    }
    /// <summary>Gets whether the "input_param_fault_info" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInputParamFaultInfo {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "input_param_fault_info" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInputParamFaultInfo() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "align_fault_info" field.</summary>
    public const int AlignFaultInfoFieldNumber = 4;
    private readonly static int AlignFaultInfoDefaultValue = 0;

    private int alignFaultInfo_;
    /// <summary>
    /// 4G, qianxun, poor gnss environment
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AlignFaultInfo {
      get { if ((_hasBits0 & 4) != 0) { return alignFaultInfo_; } else { return AlignFaultInfoDefaultValue; } }
      set {
        _hasBits0 |= 4;
        alignFaultInfo_ = value;
      }
    }
    /// <summary>Gets whether the "align_fault_info" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAlignFaultInfo {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "align_fault_info" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAlignFaultInfo() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "sensor_out_lost_info" field.</summary>
    public const int SensorOutLostInfoFieldNumber = 5;
    private readonly static int SensorOutLostInfoDefaultValue = 0;

    private int sensorOutLostInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SensorOutLostInfo {
      get { if ((_hasBits0 & 8) != 0) { return sensorOutLostInfo_; } else { return SensorOutLostInfoDefaultValue; } }
      set {
        _hasBits0 |= 8;
        sensorOutLostInfo_ = value;
      }
    }
    /// <summary>Gets whether the "sensor_out_lost_info" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSensorOutLostInfo {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "sensor_out_lost_info" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSensorOutLostInfo() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LocFaultInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LocFaultInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Time, other.Time)) return false;
      if (HardwareFaultInfo != other.HardwareFaultInfo) return false;
      if (InputParamFaultInfo != other.InputParamFaultInfo) return false;
      if (AlignFaultInfo != other.AlignFaultInfo) return false;
      if (SensorOutLostInfo != other.SensorOutLostInfo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (time_ != null) hash ^= Time.GetHashCode();
      if (HasHardwareFaultInfo) hash ^= HardwareFaultInfo.GetHashCode();
      if (HasInputParamFaultInfo) hash ^= InputParamFaultInfo.GetHashCode();
      if (HasAlignFaultInfo) hash ^= AlignFaultInfo.GetHashCode();
      if (HasSensorOutLostInfo) hash ^= SensorOutLostInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (time_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Time);
      }
      if (HasHardwareFaultInfo) {
        output.WriteRawTag(16);
        output.WriteInt32(HardwareFaultInfo);
      }
      if (HasInputParamFaultInfo) {
        output.WriteRawTag(24);
        output.WriteInt32(InputParamFaultInfo);
      }
      if (HasAlignFaultInfo) {
        output.WriteRawTag(32);
        output.WriteInt32(AlignFaultInfo);
      }
      if (HasSensorOutLostInfo) {
        output.WriteRawTag(40);
        output.WriteInt32(SensorOutLostInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (time_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Time);
      }
      if (HasHardwareFaultInfo) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HardwareFaultInfo);
      }
      if (HasInputParamFaultInfo) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InputParamFaultInfo);
      }
      if (HasAlignFaultInfo) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AlignFaultInfo);
      }
      if (HasSensorOutLostInfo) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SensorOutLostInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LocFaultInfo other) {
      if (other == null) {
        return;
      }
      if (other.time_ != null) {
        if (time_ == null) {
          Time = new global::Xviewer.TimeWorld();
        }
        Time.MergeFrom(other.Time);
      }
      if (other.HasHardwareFaultInfo) {
        HardwareFaultInfo = other.HardwareFaultInfo;
      }
      if (other.HasInputParamFaultInfo) {
        InputParamFaultInfo = other.InputParamFaultInfo;
      }
      if (other.HasAlignFaultInfo) {
        AlignFaultInfo = other.AlignFaultInfo;
      }
      if (other.HasSensorOutLostInfo) {
        SensorOutLostInfo = other.SensorOutLostInfo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (time_ == null) {
              Time = new global::Xviewer.TimeWorld();
            }
            input.ReadMessage(Time);
            break;
          }
          case 16: {
            HardwareFaultInfo = input.ReadInt32();
            break;
          }
          case 24: {
            InputParamFaultInfo = input.ReadInt32();
            break;
          }
          case 32: {
            AlignFaultInfo = input.ReadInt32();
            break;
          }
          case 40: {
            SensorOutLostInfo = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LocCalibrationInfo : pb::IMessage<LocCalibrationInfo> {
    private static readonly pb::MessageParser<LocCalibrationInfo> _parser = new pb::MessageParser<LocCalibrationInfo>(() => new LocCalibrationInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LocCalibrationInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.LocalizationReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocCalibrationInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocCalibrationInfo(LocCalibrationInfo other) : this() {
      _hasBits0 = other._hasBits0;
      time_ = other.time_ != null ? other.time_.Clone() : null;
      timestamp_ = other.timestamp_;
      wheelSpeedScale_ = other.wheelSpeedScale_;
      imuToRigAngle_ = other.imuToRigAngle_ != null ? other.imuToRigAngle_.Clone() : null;
      imuToCamera_ = other.imuToCamera_ != null ? other.imuToCamera_.Clone() : null;
      accBias_ = other.accBias_ != null ? other.accBias_.Clone() : null;
      gyroBias_ = other.gyroBias_ != null ? other.gyroBias_.Clone() : null;
      fReserved_ = other.fReserved_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocCalibrationInfo Clone() {
      return new LocCalibrationInfo(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private global::Xviewer.TimeWorld time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.TimeWorld Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private readonly static double TimestampDefaultValue = 0D;

    private double timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Timestamp {
      get { if ((_hasBits0 & 1) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 1;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimestamp {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestamp() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "wheel_speed_scale" field.</summary>
    public const int WheelSpeedScaleFieldNumber = 3;
    private readonly static double WheelSpeedScaleDefaultValue = 0D;

    private double wheelSpeedScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WheelSpeedScale {
      get { if ((_hasBits0 & 2) != 0) { return wheelSpeedScale_; } else { return WheelSpeedScaleDefaultValue; } }
      set {
        _hasBits0 |= 2;
        wheelSpeedScale_ = value;
      }
    }
    /// <summary>Gets whether the "wheel_speed_scale" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWheelSpeedScale {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "wheel_speed_scale" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWheelSpeedScale() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "imu_to_rig_angle" field.</summary>
    public const int ImuToRigAngleFieldNumber = 4;
    private global::Xviewer.Point imuToRigAngle_;
    /// <summary>
    /// degree
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Point ImuToRigAngle {
      get { return imuToRigAngle_; }
      set {
        imuToRigAngle_ = value;
      }
    }

    /// <summary>Field number for the "imu_to_camera" field.</summary>
    public const int ImuToCameraFieldNumber = 5;
    private global::Xviewer.Pose imuToCamera_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Pose ImuToCamera {
      get { return imuToCamera_; }
      set {
        imuToCamera_ = value;
      }
    }

    /// <summary>Field number for the "acc_bias" field.</summary>
    public const int AccBiasFieldNumber = 6;
    private global::Xviewer.Point accBias_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Point AccBias {
      get { return accBias_; }
      set {
        accBias_ = value;
      }
    }

    /// <summary>Field number for the "gyro_bias" field.</summary>
    public const int GyroBiasFieldNumber = 7;
    private global::Xviewer.Point gyroBias_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Point GyroBias {
      get { return gyroBias_; }
      set {
        gyroBias_ = value;
      }
    }

    /// <summary>Field number for the "f_reserved" field.</summary>
    public const int FReservedFieldNumber = 8;
    private static readonly pb::FieldCodec<double> _repeated_fReserved_codec
        = pb::FieldCodec.ForDouble(65);
    private readonly pbc::RepeatedField<double> fReserved_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// TBD
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> FReserved {
      get { return fReserved_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LocCalibrationInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LocCalibrationInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Time, other.Time)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Timestamp, other.Timestamp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(WheelSpeedScale, other.WheelSpeedScale)) return false;
      if (!object.Equals(ImuToRigAngle, other.ImuToRigAngle)) return false;
      if (!object.Equals(ImuToCamera, other.ImuToCamera)) return false;
      if (!object.Equals(AccBias, other.AccBias)) return false;
      if (!object.Equals(GyroBias, other.GyroBias)) return false;
      if(!fReserved_.Equals(other.fReserved_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (time_ != null) hash ^= Time.GetHashCode();
      if (HasTimestamp) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Timestamp);
      if (HasWheelSpeedScale) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(WheelSpeedScale);
      if (imuToRigAngle_ != null) hash ^= ImuToRigAngle.GetHashCode();
      if (imuToCamera_ != null) hash ^= ImuToCamera.GetHashCode();
      if (accBias_ != null) hash ^= AccBias.GetHashCode();
      if (gyroBias_ != null) hash ^= GyroBias.GetHashCode();
      hash ^= fReserved_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (time_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Time);
      }
      if (HasTimestamp) {
        output.WriteRawTag(17);
        output.WriteDouble(Timestamp);
      }
      if (HasWheelSpeedScale) {
        output.WriteRawTag(25);
        output.WriteDouble(WheelSpeedScale);
      }
      if (imuToRigAngle_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ImuToRigAngle);
      }
      if (imuToCamera_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ImuToCamera);
      }
      if (accBias_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(AccBias);
      }
      if (gyroBias_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(GyroBias);
      }
      fReserved_.WriteTo(output, _repeated_fReserved_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (time_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Time);
      }
      if (HasTimestamp) {
        size += 1 + 8;
      }
      if (HasWheelSpeedScale) {
        size += 1 + 8;
      }
      if (imuToRigAngle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ImuToRigAngle);
      }
      if (imuToCamera_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ImuToCamera);
      }
      if (accBias_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AccBias);
      }
      if (gyroBias_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GyroBias);
      }
      size += fReserved_.CalculateSize(_repeated_fReserved_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LocCalibrationInfo other) {
      if (other == null) {
        return;
      }
      if (other.time_ != null) {
        if (time_ == null) {
          Time = new global::Xviewer.TimeWorld();
        }
        Time.MergeFrom(other.Time);
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      if (other.HasWheelSpeedScale) {
        WheelSpeedScale = other.WheelSpeedScale;
      }
      if (other.imuToRigAngle_ != null) {
        if (imuToRigAngle_ == null) {
          ImuToRigAngle = new global::Xviewer.Point();
        }
        ImuToRigAngle.MergeFrom(other.ImuToRigAngle);
      }
      if (other.imuToCamera_ != null) {
        if (imuToCamera_ == null) {
          ImuToCamera = new global::Xviewer.Pose();
        }
        ImuToCamera.MergeFrom(other.ImuToCamera);
      }
      if (other.accBias_ != null) {
        if (accBias_ == null) {
          AccBias = new global::Xviewer.Point();
        }
        AccBias.MergeFrom(other.AccBias);
      }
      if (other.gyroBias_ != null) {
        if (gyroBias_ == null) {
          GyroBias = new global::Xviewer.Point();
        }
        GyroBias.MergeFrom(other.GyroBias);
      }
      fReserved_.Add(other.fReserved_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (time_ == null) {
              Time = new global::Xviewer.TimeWorld();
            }
            input.ReadMessage(Time);
            break;
          }
          case 17: {
            Timestamp = input.ReadDouble();
            break;
          }
          case 25: {
            WheelSpeedScale = input.ReadDouble();
            break;
          }
          case 34: {
            if (imuToRigAngle_ == null) {
              ImuToRigAngle = new global::Xviewer.Point();
            }
            input.ReadMessage(ImuToRigAngle);
            break;
          }
          case 42: {
            if (imuToCamera_ == null) {
              ImuToCamera = new global::Xviewer.Pose();
            }
            input.ReadMessage(ImuToCamera);
            break;
          }
          case 50: {
            if (accBias_ == null) {
              AccBias = new global::Xviewer.Point();
            }
            input.ReadMessage(AccBias);
            break;
          }
          case 58: {
            if (gyroBias_ == null) {
              GyroBias = new global::Xviewer.Point();
            }
            input.ReadMessage(GyroBias);
            break;
          }
          case 66:
          case 65: {
            fReserved_.AddEntriesFrom(input, _repeated_fReserved_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GlobalLocMsg : pb::IMessage<GlobalLocMsg> {
    private static readonly pb::MessageParser<GlobalLocMsg> _parser = new pb::MessageParser<GlobalLocMsg>(() => new GlobalLocMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GlobalLocMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.LocalizationReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalLocMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalLocMsg(GlobalLocMsg other) : this() {
      time_ = other.time_ != null ? other.time_.Clone() : null;
      globalPoseInfo_ = other.globalPoseInfo_ != null ? other.globalPoseInfo_.Clone() : null;
      localPoseInfo_ = other.localPoseInfo_ != null ? other.localPoseInfo_.Clone() : null;
      locFaultInfo_ = other.locFaultInfo_ != null ? other.locFaultInfo_.Clone() : null;
      locCalibrationInfo_ = other.locCalibrationInfo_ != null ? other.locCalibrationInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalLocMsg Clone() {
      return new GlobalLocMsg(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private global::Xviewer.TimeWorld time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.TimeWorld Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "global_pose_info" field.</summary>
    public const int GlobalPoseInfoFieldNumber = 2;
    private global::Xviewer.GlobalPoseInfo globalPoseInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.GlobalPoseInfo GlobalPoseInfo {
      get { return globalPoseInfo_; }
      set {
        globalPoseInfo_ = value;
      }
    }

    /// <summary>Field number for the "local_pose_info" field.</summary>
    public const int LocalPoseInfoFieldNumber = 3;
    private global::Xviewer.LocalPoseInfo localPoseInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.LocalPoseInfo LocalPoseInfo {
      get { return localPoseInfo_; }
      set {
        localPoseInfo_ = value;
      }
    }

    /// <summary>Field number for the "loc_fault_info" field.</summary>
    public const int LocFaultInfoFieldNumber = 4;
    private global::Xviewer.LocFaultInfo locFaultInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.LocFaultInfo LocFaultInfo {
      get { return locFaultInfo_; }
      set {
        locFaultInfo_ = value;
      }
    }

    /// <summary>Field number for the "loc_calibration_info" field.</summary>
    public const int LocCalibrationInfoFieldNumber = 5;
    private global::Xviewer.LocCalibrationInfo locCalibrationInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.LocCalibrationInfo LocCalibrationInfo {
      get { return locCalibrationInfo_; }
      set {
        locCalibrationInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GlobalLocMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GlobalLocMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Time, other.Time)) return false;
      if (!object.Equals(GlobalPoseInfo, other.GlobalPoseInfo)) return false;
      if (!object.Equals(LocalPoseInfo, other.LocalPoseInfo)) return false;
      if (!object.Equals(LocFaultInfo, other.LocFaultInfo)) return false;
      if (!object.Equals(LocCalibrationInfo, other.LocCalibrationInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (time_ != null) hash ^= Time.GetHashCode();
      if (globalPoseInfo_ != null) hash ^= GlobalPoseInfo.GetHashCode();
      if (localPoseInfo_ != null) hash ^= LocalPoseInfo.GetHashCode();
      if (locFaultInfo_ != null) hash ^= LocFaultInfo.GetHashCode();
      if (locCalibrationInfo_ != null) hash ^= LocCalibrationInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (time_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Time);
      }
      if (globalPoseInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GlobalPoseInfo);
      }
      if (localPoseInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LocalPoseInfo);
      }
      if (locFaultInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LocFaultInfo);
      }
      if (locCalibrationInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(LocCalibrationInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (time_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Time);
      }
      if (globalPoseInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GlobalPoseInfo);
      }
      if (localPoseInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalPoseInfo);
      }
      if (locFaultInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocFaultInfo);
      }
      if (locCalibrationInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocCalibrationInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GlobalLocMsg other) {
      if (other == null) {
        return;
      }
      if (other.time_ != null) {
        if (time_ == null) {
          Time = new global::Xviewer.TimeWorld();
        }
        Time.MergeFrom(other.Time);
      }
      if (other.globalPoseInfo_ != null) {
        if (globalPoseInfo_ == null) {
          GlobalPoseInfo = new global::Xviewer.GlobalPoseInfo();
        }
        GlobalPoseInfo.MergeFrom(other.GlobalPoseInfo);
      }
      if (other.localPoseInfo_ != null) {
        if (localPoseInfo_ == null) {
          LocalPoseInfo = new global::Xviewer.LocalPoseInfo();
        }
        LocalPoseInfo.MergeFrom(other.LocalPoseInfo);
      }
      if (other.locFaultInfo_ != null) {
        if (locFaultInfo_ == null) {
          LocFaultInfo = new global::Xviewer.LocFaultInfo();
        }
        LocFaultInfo.MergeFrom(other.LocFaultInfo);
      }
      if (other.locCalibrationInfo_ != null) {
        if (locCalibrationInfo_ == null) {
          LocCalibrationInfo = new global::Xviewer.LocCalibrationInfo();
        }
        LocCalibrationInfo.MergeFrom(other.LocCalibrationInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (time_ == null) {
              Time = new global::Xviewer.TimeWorld();
            }
            input.ReadMessage(Time);
            break;
          }
          case 18: {
            if (globalPoseInfo_ == null) {
              GlobalPoseInfo = new global::Xviewer.GlobalPoseInfo();
            }
            input.ReadMessage(GlobalPoseInfo);
            break;
          }
          case 26: {
            if (localPoseInfo_ == null) {
              LocalPoseInfo = new global::Xviewer.LocalPoseInfo();
            }
            input.ReadMessage(LocalPoseInfo);
            break;
          }
          case 34: {
            if (locFaultInfo_ == null) {
              LocFaultInfo = new global::Xviewer.LocFaultInfo();
            }
            input.ReadMessage(LocFaultInfo);
            break;
          }
          case 42: {
            if (locCalibrationInfo_ == null) {
              LocCalibrationInfo = new global::Xviewer.LocCalibrationInfo();
            }
            input.ReadMessage(LocCalibrationInfo);
            break;
          }
        }
      }
    }

  }

  public sealed partial class OdomPoseInfo : pb::IMessage<OdomPoseInfo> {
    private static readonly pb::MessageParser<OdomPoseInfo> _parser = new pb::MessageParser<OdomPoseInfo>(() => new OdomPoseInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OdomPoseInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.LocalizationReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OdomPoseInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OdomPoseInfo(OdomPoseInfo other) : this() {
      _hasBits0 = other._hasBits0;
      time_ = other.time_ != null ? other.time_.Clone() : null;
      rigToLocal_ = other.rigToLocal_ != null ? other.rigToLocal_.Clone() : null;
      rigAtt_ = other.rigAtt_ != null ? other.rigAtt_.Clone() : null;
      velInRig_ = other.velInRig_ != null ? other.velInRig_.Clone() : null;
      acc_ = other.acc_ != null ? other.acc_.Clone() : null;
      gyro_ = other.gyro_ != null ? other.gyro_.Clone() : null;
      posStd_ = other.posStd_ != null ? other.posStd_.Clone() : null;
      rotStd_ = other.rotStd_ != null ? other.rotStd_.Clone() : null;
      velStd_ = other.velStd_ != null ? other.velStd_.Clone() : null;
      accBiasStd_ = other.accBiasStd_ != null ? other.accBiasStd_.Clone() : null;
      gyroBiasStd_ = other.gyroBiasStd_ != null ? other.gyroBiasStd_.Clone() : null;
      fusionStatus_ = other.fusionStatus_;
      alignStatus_ = other.alignStatus_;
      locAccuracyFlag_ = other.locAccuracyFlag_;
      measureFlag_ = other.measureFlag_;
      fReserved_ = other.fReserved_.Clone();
      cReserved_ = other.cReserved_.Clone();
      sTimestamp_ = other.sTimestamp_;
      eTimestamp_ = other.eTimestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OdomPoseInfo Clone() {
      return new OdomPoseInfo(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private global::Xviewer.TimeWorld time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.TimeWorld Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "rig_to_local" field.</summary>
    public const int RigToLocalFieldNumber = 2;
    private global::Xviewer.Pose rigToLocal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Pose RigToLocal {
      get { return rigToLocal_; }
      set {
        rigToLocal_ = value;
      }
    }

    /// <summary>Field number for the "rig_att" field.</summary>
    public const int RigAttFieldNumber = 3;
    private global::Xviewer.Point rigAtt_;
    /// <summary>
    /// euler angle: roll, pitch, yaw
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Point RigAtt {
      get { return rigAtt_; }
      set {
        rigAtt_ = value;
      }
    }

    /// <summary>Field number for the "vel_in_rig" field.</summary>
    public const int VelInRigFieldNumber = 4;
    private global::Xviewer.Point velInRig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Point VelInRig {
      get { return velInRig_; }
      set {
        velInRig_ = value;
      }
    }

    /// <summary>Field number for the "acc" field.</summary>
    public const int AccFieldNumber = 5;
    private global::Xviewer.Point acc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Point Acc {
      get { return acc_; }
      set {
        acc_ = value;
      }
    }

    /// <summary>Field number for the "gyro" field.</summary>
    public const int GyroFieldNumber = 6;
    private global::Xviewer.Point gyro_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Point Gyro {
      get { return gyro_; }
      set {
        gyro_ = value;
      }
    }

    /// <summary>Field number for the "pos_std" field.</summary>
    public const int PosStdFieldNumber = 7;
    private global::Xviewer.Point posStd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Point PosStd {
      get { return posStd_; }
      set {
        posStd_ = value;
      }
    }

    /// <summary>Field number for the "rot_std" field.</summary>
    public const int RotStdFieldNumber = 8;
    private global::Xviewer.Point rotStd_;
    /// <summary>
    /// roll, pitch, yaw
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Point RotStd {
      get { return rotStd_; }
      set {
        rotStd_ = value;
      }
    }

    /// <summary>Field number for the "vel_std" field.</summary>
    public const int VelStdFieldNumber = 9;
    private global::Xviewer.Point velStd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Point VelStd {
      get { return velStd_; }
      set {
        velStd_ = value;
      }
    }

    /// <summary>Field number for the "acc_bias_std" field.</summary>
    public const int AccBiasStdFieldNumber = 10;
    private global::Xviewer.Point accBiasStd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Point AccBiasStd {
      get { return accBiasStd_; }
      set {
        accBiasStd_ = value;
      }
    }

    /// <summary>Field number for the "gyro_bias_std" field.</summary>
    public const int GyroBiasStdFieldNumber = 11;
    private global::Xviewer.Point gyroBiasStd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Point GyroBiasStd {
      get { return gyroBiasStd_; }
      set {
        gyroBiasStd_ = value;
      }
    }

    /// <summary>Field number for the "fusion_status" field.</summary>
    public const int FusionStatusFieldNumber = 12;
    private readonly static int FusionStatusDefaultValue = 0;

    private int fusionStatus_;
    /// <summary>
    /// 融合状态; 0: 初始化; bit0 = 1: INS;  bit1 = 1 : GPS (not used); bit2 = 1 : MC;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FusionStatus {
      get { if ((_hasBits0 & 1) != 0) { return fusionStatus_; } else { return FusionStatusDefaultValue; } }
      set {
        _hasBits0 |= 1;
        fusionStatus_ = value;
      }
    }
    /// <summary>Gets whether the "fusion_status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFusionStatus {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "fusion_status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFusionStatus() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "align_status" field.</summary>
    public const int AlignStatusFieldNumber = 13;
    private readonly static int AlignStatusDefaultValue = 0;

    private int alignStatus_;
    /// <summary>
    /// bit3 = 1 : WIO;  bit4 = 1 : VIO; bit5: ZUPT; bit6: ZARU
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AlignStatus {
      get { if ((_hasBits0 & 2) != 0) { return alignStatus_; } else { return AlignStatusDefaultValue; } }
      set {
        _hasBits0 |= 2;
        alignStatus_ = value;
      }
    }
    /// <summary>Gets whether the "align_status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAlignStatus {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "align_status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAlignStatus() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "loc_accuracy_flag" field.</summary>
    public const int LocAccuracyFlagFieldNumber = 14;
    private readonly static int LocAccuracyFlagDefaultValue = 0;

    private int locAccuracyFlag_;
    /// <summary>
    /// 0: 不可用；1：精度下降；2：高精度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LocAccuracyFlag {
      get { if ((_hasBits0 & 4) != 0) { return locAccuracyFlag_; } else { return LocAccuracyFlagDefaultValue; } }
      set {
        _hasBits0 |= 4;
        locAccuracyFlag_ = value;
      }
    }
    /// <summary>Gets whether the "loc_accuracy_flag" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLocAccuracyFlag {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "loc_accuracy_flag" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLocAccuracyFlag() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "measure_flag" field.</summary>
    public const int MeasureFlagFieldNumber = 15;
    private readonly static int MeasureFlagDefaultValue = 0;

    private int measureFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MeasureFlag {
      get { if ((_hasBits0 & 8) != 0) { return measureFlag_; } else { return MeasureFlagDefaultValue; } }
      set {
        _hasBits0 |= 8;
        measureFlag_ = value;
      }
    }
    /// <summary>Gets whether the "measure_flag" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMeasureFlag {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "measure_flag" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMeasureFlag() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "f_reserved" field.</summary>
    public const int FReservedFieldNumber = 16;
    private static readonly pb::FieldCodec<float> _repeated_fReserved_codec
        = pb::FieldCodec.ForFloat(133);
    private readonly pbc::RepeatedField<float> fReserved_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> FReserved {
      get { return fReserved_; }
    }

    /// <summary>Field number for the "c_reserved" field.</summary>
    public const int CReservedFieldNumber = 17;
    private static readonly pb::FieldCodec<int> _repeated_cReserved_codec
        = pb::FieldCodec.ForInt32(136);
    private readonly pbc::RepeatedField<int> cReserved_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CReserved {
      get { return cReserved_; }
    }

    /// <summary>Field number for the "s_timestamp" field.</summary>
    public const int STimestampFieldNumber = 18;
    private readonly static double STimestampDefaultValue = 0D;

    private double sTimestamp_;
    /// <summary>
    /// imu gps time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double STimestamp {
      get { if ((_hasBits0 & 16) != 0) { return sTimestamp_; } else { return STimestampDefaultValue; } }
      set {
        _hasBits0 |= 16;
        sTimestamp_ = value;
      }
    }
    /// <summary>Gets whether the "s_timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSTimestamp {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "s_timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSTimestamp() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "e_timestamp" field.</summary>
    public const int ETimestampFieldNumber = 19;
    private readonly static double ETimestampDefaultValue = 0D;

    private double eTimestamp_;
    /// <summary>
    /// alg rev ros time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ETimestamp {
      get { if ((_hasBits0 & 32) != 0) { return eTimestamp_; } else { return ETimestampDefaultValue; } }
      set {
        _hasBits0 |= 32;
        eTimestamp_ = value;
      }
    }
    /// <summary>Gets whether the "e_timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasETimestamp {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "e_timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearETimestamp() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OdomPoseInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OdomPoseInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Time, other.Time)) return false;
      if (!object.Equals(RigToLocal, other.RigToLocal)) return false;
      if (!object.Equals(RigAtt, other.RigAtt)) return false;
      if (!object.Equals(VelInRig, other.VelInRig)) return false;
      if (!object.Equals(Acc, other.Acc)) return false;
      if (!object.Equals(Gyro, other.Gyro)) return false;
      if (!object.Equals(PosStd, other.PosStd)) return false;
      if (!object.Equals(RotStd, other.RotStd)) return false;
      if (!object.Equals(VelStd, other.VelStd)) return false;
      if (!object.Equals(AccBiasStd, other.AccBiasStd)) return false;
      if (!object.Equals(GyroBiasStd, other.GyroBiasStd)) return false;
      if (FusionStatus != other.FusionStatus) return false;
      if (AlignStatus != other.AlignStatus) return false;
      if (LocAccuracyFlag != other.LocAccuracyFlag) return false;
      if (MeasureFlag != other.MeasureFlag) return false;
      if(!fReserved_.Equals(other.fReserved_)) return false;
      if(!cReserved_.Equals(other.cReserved_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(STimestamp, other.STimestamp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ETimestamp, other.ETimestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (time_ != null) hash ^= Time.GetHashCode();
      if (rigToLocal_ != null) hash ^= RigToLocal.GetHashCode();
      if (rigAtt_ != null) hash ^= RigAtt.GetHashCode();
      if (velInRig_ != null) hash ^= VelInRig.GetHashCode();
      if (acc_ != null) hash ^= Acc.GetHashCode();
      if (gyro_ != null) hash ^= Gyro.GetHashCode();
      if (posStd_ != null) hash ^= PosStd.GetHashCode();
      if (rotStd_ != null) hash ^= RotStd.GetHashCode();
      if (velStd_ != null) hash ^= VelStd.GetHashCode();
      if (accBiasStd_ != null) hash ^= AccBiasStd.GetHashCode();
      if (gyroBiasStd_ != null) hash ^= GyroBiasStd.GetHashCode();
      if (HasFusionStatus) hash ^= FusionStatus.GetHashCode();
      if (HasAlignStatus) hash ^= AlignStatus.GetHashCode();
      if (HasLocAccuracyFlag) hash ^= LocAccuracyFlag.GetHashCode();
      if (HasMeasureFlag) hash ^= MeasureFlag.GetHashCode();
      hash ^= fReserved_.GetHashCode();
      hash ^= cReserved_.GetHashCode();
      if (HasSTimestamp) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(STimestamp);
      if (HasETimestamp) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ETimestamp);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (time_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Time);
      }
      if (rigToLocal_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RigToLocal);
      }
      if (rigAtt_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RigAtt);
      }
      if (velInRig_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(VelInRig);
      }
      if (acc_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Acc);
      }
      if (gyro_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Gyro);
      }
      if (posStd_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(PosStd);
      }
      if (rotStd_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(RotStd);
      }
      if (velStd_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(VelStd);
      }
      if (accBiasStd_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(AccBiasStd);
      }
      if (gyroBiasStd_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(GyroBiasStd);
      }
      if (HasFusionStatus) {
        output.WriteRawTag(96);
        output.WriteInt32(FusionStatus);
      }
      if (HasAlignStatus) {
        output.WriteRawTag(104);
        output.WriteInt32(AlignStatus);
      }
      if (HasLocAccuracyFlag) {
        output.WriteRawTag(112);
        output.WriteInt32(LocAccuracyFlag);
      }
      if (HasMeasureFlag) {
        output.WriteRawTag(120);
        output.WriteInt32(MeasureFlag);
      }
      fReserved_.WriteTo(output, _repeated_fReserved_codec);
      cReserved_.WriteTo(output, _repeated_cReserved_codec);
      if (HasSTimestamp) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(STimestamp);
      }
      if (HasETimestamp) {
        output.WriteRawTag(153, 1);
        output.WriteDouble(ETimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (time_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Time);
      }
      if (rigToLocal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RigToLocal);
      }
      if (rigAtt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RigAtt);
      }
      if (velInRig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VelInRig);
      }
      if (acc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Acc);
      }
      if (gyro_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gyro);
      }
      if (posStd_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PosStd);
      }
      if (rotStd_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RotStd);
      }
      if (velStd_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VelStd);
      }
      if (accBiasStd_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AccBiasStd);
      }
      if (gyroBiasStd_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GyroBiasStd);
      }
      if (HasFusionStatus) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FusionStatus);
      }
      if (HasAlignStatus) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AlignStatus);
      }
      if (HasLocAccuracyFlag) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LocAccuracyFlag);
      }
      if (HasMeasureFlag) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MeasureFlag);
      }
      size += fReserved_.CalculateSize(_repeated_fReserved_codec);
      size += cReserved_.CalculateSize(_repeated_cReserved_codec);
      if (HasSTimestamp) {
        size += 2 + 8;
      }
      if (HasETimestamp) {
        size += 2 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OdomPoseInfo other) {
      if (other == null) {
        return;
      }
      if (other.time_ != null) {
        if (time_ == null) {
          Time = new global::Xviewer.TimeWorld();
        }
        Time.MergeFrom(other.Time);
      }
      if (other.rigToLocal_ != null) {
        if (rigToLocal_ == null) {
          RigToLocal = new global::Xviewer.Pose();
        }
        RigToLocal.MergeFrom(other.RigToLocal);
      }
      if (other.rigAtt_ != null) {
        if (rigAtt_ == null) {
          RigAtt = new global::Xviewer.Point();
        }
        RigAtt.MergeFrom(other.RigAtt);
      }
      if (other.velInRig_ != null) {
        if (velInRig_ == null) {
          VelInRig = new global::Xviewer.Point();
        }
        VelInRig.MergeFrom(other.VelInRig);
      }
      if (other.acc_ != null) {
        if (acc_ == null) {
          Acc = new global::Xviewer.Point();
        }
        Acc.MergeFrom(other.Acc);
      }
      if (other.gyro_ != null) {
        if (gyro_ == null) {
          Gyro = new global::Xviewer.Point();
        }
        Gyro.MergeFrom(other.Gyro);
      }
      if (other.posStd_ != null) {
        if (posStd_ == null) {
          PosStd = new global::Xviewer.Point();
        }
        PosStd.MergeFrom(other.PosStd);
      }
      if (other.rotStd_ != null) {
        if (rotStd_ == null) {
          RotStd = new global::Xviewer.Point();
        }
        RotStd.MergeFrom(other.RotStd);
      }
      if (other.velStd_ != null) {
        if (velStd_ == null) {
          VelStd = new global::Xviewer.Point();
        }
        VelStd.MergeFrom(other.VelStd);
      }
      if (other.accBiasStd_ != null) {
        if (accBiasStd_ == null) {
          AccBiasStd = new global::Xviewer.Point();
        }
        AccBiasStd.MergeFrom(other.AccBiasStd);
      }
      if (other.gyroBiasStd_ != null) {
        if (gyroBiasStd_ == null) {
          GyroBiasStd = new global::Xviewer.Point();
        }
        GyroBiasStd.MergeFrom(other.GyroBiasStd);
      }
      if (other.HasFusionStatus) {
        FusionStatus = other.FusionStatus;
      }
      if (other.HasAlignStatus) {
        AlignStatus = other.AlignStatus;
      }
      if (other.HasLocAccuracyFlag) {
        LocAccuracyFlag = other.LocAccuracyFlag;
      }
      if (other.HasMeasureFlag) {
        MeasureFlag = other.MeasureFlag;
      }
      fReserved_.Add(other.fReserved_);
      cReserved_.Add(other.cReserved_);
      if (other.HasSTimestamp) {
        STimestamp = other.STimestamp;
      }
      if (other.HasETimestamp) {
        ETimestamp = other.ETimestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (time_ == null) {
              Time = new global::Xviewer.TimeWorld();
            }
            input.ReadMessage(Time);
            break;
          }
          case 18: {
            if (rigToLocal_ == null) {
              RigToLocal = new global::Xviewer.Pose();
            }
            input.ReadMessage(RigToLocal);
            break;
          }
          case 26: {
            if (rigAtt_ == null) {
              RigAtt = new global::Xviewer.Point();
            }
            input.ReadMessage(RigAtt);
            break;
          }
          case 34: {
            if (velInRig_ == null) {
              VelInRig = new global::Xviewer.Point();
            }
            input.ReadMessage(VelInRig);
            break;
          }
          case 42: {
            if (acc_ == null) {
              Acc = new global::Xviewer.Point();
            }
            input.ReadMessage(Acc);
            break;
          }
          case 50: {
            if (gyro_ == null) {
              Gyro = new global::Xviewer.Point();
            }
            input.ReadMessage(Gyro);
            break;
          }
          case 58: {
            if (posStd_ == null) {
              PosStd = new global::Xviewer.Point();
            }
            input.ReadMessage(PosStd);
            break;
          }
          case 66: {
            if (rotStd_ == null) {
              RotStd = new global::Xviewer.Point();
            }
            input.ReadMessage(RotStd);
            break;
          }
          case 74: {
            if (velStd_ == null) {
              VelStd = new global::Xviewer.Point();
            }
            input.ReadMessage(VelStd);
            break;
          }
          case 82: {
            if (accBiasStd_ == null) {
              AccBiasStd = new global::Xviewer.Point();
            }
            input.ReadMessage(AccBiasStd);
            break;
          }
          case 90: {
            if (gyroBiasStd_ == null) {
              GyroBiasStd = new global::Xviewer.Point();
            }
            input.ReadMessage(GyroBiasStd);
            break;
          }
          case 96: {
            FusionStatus = input.ReadInt32();
            break;
          }
          case 104: {
            AlignStatus = input.ReadInt32();
            break;
          }
          case 112: {
            LocAccuracyFlag = input.ReadInt32();
            break;
          }
          case 120: {
            MeasureFlag = input.ReadInt32();
            break;
          }
          case 130:
          case 133: {
            fReserved_.AddEntriesFrom(input, _repeated_fReserved_codec);
            break;
          }
          case 138:
          case 136: {
            cReserved_.AddEntriesFrom(input, _repeated_cReserved_codec);
            break;
          }
          case 145: {
            STimestamp = input.ReadDouble();
            break;
          }
          case 153: {
            ETimestamp = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OdometryMsg : pb::IMessage<OdometryMsg> {
    private static readonly pb::MessageParser<OdometryMsg> _parser = new pb::MessageParser<OdometryMsg>(() => new OdometryMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OdometryMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.LocalizationReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OdometryMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OdometryMsg(OdometryMsg other) : this() {
      odomPoseInfo_ = other.odomPoseInfo_ != null ? other.odomPoseInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OdometryMsg Clone() {
      return new OdometryMsg(this);
    }

    /// <summary>Field number for the "odom_pose_info" field.</summary>
    public const int OdomPoseInfoFieldNumber = 1;
    private global::Xviewer.OdomPoseInfo odomPoseInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.OdomPoseInfo OdomPoseInfo {
      get { return odomPoseInfo_; }
      set {
        odomPoseInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OdometryMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OdometryMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(OdomPoseInfo, other.OdomPoseInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (odomPoseInfo_ != null) hash ^= OdomPoseInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (odomPoseInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(OdomPoseInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (odomPoseInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OdomPoseInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OdometryMsg other) {
      if (other == null) {
        return;
      }
      if (other.odomPoseInfo_ != null) {
        if (odomPoseInfo_ == null) {
          OdomPoseInfo = new global::Xviewer.OdomPoseInfo();
        }
        OdomPoseInfo.MergeFrom(other.OdomPoseInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (odomPoseInfo_ == null) {
              OdomPoseInfo = new global::Xviewer.OdomPoseInfo();
            }
            input.ReadMessage(OdomPoseInfo);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FusionLocalization : pb::IMessage<FusionLocalization> {
    private static readonly pb::MessageParser<FusionLocalization> _parser = new pb::MessageParser<FusionLocalization>(() => new FusionLocalization());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FusionLocalization> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.LocalizationReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FusionLocalization() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FusionLocalization(FusionLocalization other) : this() {
      _hasBits0 = other._hasBits0;
      msfl_ = other.msfl_ != null ? other.msfl_.Clone() : null;
      odometry_ = other.odometry_ != null ? other.odometry_.Clone() : null;
      localizationFlag_ = other.localizationFlag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FusionLocalization Clone() {
      return new FusionLocalization(this);
    }

    /// <summary>Field number for the "msfl" field.</summary>
    public const int MsflFieldNumber = 1;
    private global::Xviewer.GlobalLocMsg msfl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.GlobalLocMsg Msfl {
      get { return msfl_; }
      set {
        msfl_ = value;
      }
    }

    /// <summary>Field number for the "odometry" field.</summary>
    public const int OdometryFieldNumber = 2;
    private global::Xviewer.OdometryMsg odometry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.OdometryMsg Odometry {
      get { return odometry_; }
      set {
        odometry_ = value;
      }
    }

    /// <summary>Field number for the "localization_flag" field.</summary>
    public const int LocalizationFlagFieldNumber = 3;
    private readonly static int LocalizationFlagDefaultValue = 0;

    private int localizationFlag_;
    /// <summary>
    /// localization mode : 1 MSFL , 2 odometry
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LocalizationFlag {
      get { if ((_hasBits0 & 1) != 0) { return localizationFlag_; } else { return LocalizationFlagDefaultValue; } }
      set {
        _hasBits0 |= 1;
        localizationFlag_ = value;
      }
    }
    /// <summary>Gets whether the "localization_flag" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLocalizationFlag {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "localization_flag" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLocalizationFlag() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FusionLocalization);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FusionLocalization other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Msfl, other.Msfl)) return false;
      if (!object.Equals(Odometry, other.Odometry)) return false;
      if (LocalizationFlag != other.LocalizationFlag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (msfl_ != null) hash ^= Msfl.GetHashCode();
      if (odometry_ != null) hash ^= Odometry.GetHashCode();
      if (HasLocalizationFlag) hash ^= LocalizationFlag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (msfl_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Msfl);
      }
      if (odometry_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Odometry);
      }
      if (HasLocalizationFlag) {
        output.WriteRawTag(24);
        output.WriteInt32(LocalizationFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (msfl_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msfl);
      }
      if (odometry_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Odometry);
      }
      if (HasLocalizationFlag) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LocalizationFlag);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FusionLocalization other) {
      if (other == null) {
        return;
      }
      if (other.msfl_ != null) {
        if (msfl_ == null) {
          Msfl = new global::Xviewer.GlobalLocMsg();
        }
        Msfl.MergeFrom(other.Msfl);
      }
      if (other.odometry_ != null) {
        if (odometry_ == null) {
          Odometry = new global::Xviewer.OdometryMsg();
        }
        Odometry.MergeFrom(other.Odometry);
      }
      if (other.HasLocalizationFlag) {
        LocalizationFlag = other.LocalizationFlag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (msfl_ == null) {
              Msfl = new global::Xviewer.GlobalLocMsg();
            }
            input.ReadMessage(Msfl);
            break;
          }
          case 18: {
            if (odometry_ == null) {
              Odometry = new global::Xviewer.OdometryMsg();
            }
            input.ReadMessage(Odometry);
            break;
          }
          case 24: {
            LocalizationFlag = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
