// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: engineering.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Xviewer {

  /// <summary>Holder for reflection information generated from engineering.proto</summary>
  public static partial class EngineeringReflection {

    #region Descriptor
    /// <summary>File descriptor for engineering.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EngineeringReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFlbmdpbmVlcmluZy5wcm90bxIHeHZpZXdlchoMYmFzaWNzLnByb3RvGhJs",
            "b2NhbGl6YXRpb24ucHJvdG8iiQEKBUltYWdlEhQKDGltYWdlX2Z1c2lvbhgB",
            "IAEoDBIZChFpbWFnZV9jb21wcmVzc2VkMBgCIAEoDBIZChFpbWFnZV9jb21w",
            "cmVzc2VkMRgDIAEoDBIZChFpbWFnZV9jb21wcmVzc2VkMhgEIAEoDBIZChFp",
            "bWFnZV9jb21wcmVzc2VkMxgFIAEoDCJjCghPZG9tZXRyeRIWCg5jaGlsZF9m",
            "cmFtZV9pZBgBIAEoCRIbCgRwb3NlGAIgASgLMg0ueHZpZXdlci5Qb3NlEiIK",
            "BXR3aXN0GAMgASgLMhMueHZpZXdlci5Ud2lzdEFjY2VsIioKB05vdmF0ZWwS",
            "HwoEb2RvbRgBIAEoCzIRLnh2aWV3ZXIuT2RvbWV0cnkiRwoOSGFyZHdhcmVT",
            "aWduYWwSIQoHbm92YXRlbBgBIAEoCzIQLnh2aWV3ZXIuTm92YXRlbBISCgps",
            "YW1wc3RhdHVzGAIgASgNIjIKDURpYWdub3Npc0Jhc2USDQoFbGV2ZWwYASAB",
            "KA0SEgoKZXJyb3JfY29kZRgCIAEoDSJNCgpYRGlhZ25vc2lzEg8KB25vZGVf",
            "aWQYASABKA0SLgoOZGlhZ25vc2lzX2RhdGEYAiADKAsyFi54dmlld2VyLkRp",
            "YWdub3Npc0Jhc2UiMwoQTW9kdWxlc0hlYXJ0YmVhdBIPCgdub2RlX2lkGAEg",
            "ASgNEg4KBnN0YXR1cxgCIAEoDSKXAQoNVUlDb21tdW5pY2F0ZRIgCgR0aW1l",
            "GAEgASgLMhIueHZpZXdlci5UaW1lV29ybGQSLgoRbW9kdWxlc19kaWFnbm9z",
            "aXMYAiADKAsyEy54dmlld2VyLlhEaWFnbm9zaXMSNAoRbW9kdWxlc19oZWFy",
            "dGJlYXQYAyADKAsyGS54dmlld2VyLk1vZHVsZXNIZWFydGJlYXQiyQMKB01v",
            "bml0b3ISGAoQY3B1X2FwYV9wbGFubmluZxgBIAEoARITCgtjcHVfY29udHJv",
            "bBgCIAEoARIcChRjcHVfZnJlZXNwYWNlX2Z1c2lvbhgDIAEoARIdChVjcHVf",
            "Z2FyY2lhX21hcF9lbmdpbmUYBCABKAESHAoUY3B1X2dhcmNpYV9tYXBfbG9j",
            "YWwYBSABKAESHwoXY3B1X3Bhcmtpbmdfc2xvdF9mdXNpb24YBiABKAESFwoP",
            "Y3B1X3Jvc194dmlld2VyGAcgASgBEhoKEmNwdV9jYW1lcmFfc2VydmljZRgI",
            "IAEoARIYChBtZW1fYXBhX3BsYW5uaW5nGAkgASgBEhMKC21lbV9jb250cm9s",
            "GAogASgBEhwKFG1lbV9mcmVlc3BhY2VfZnVzaW9uGAsgASgBEh0KFW1lbV9n",
            "YXJjaWFfbWFwX2VuZ2luZRgMIAEoARIcChRtZW1fZ2FyY2lhX21hcF9sb2Nh",
            "bBgNIAEoARIfChdtZW1fcGFya2luZ19zbG90X2Z1c2lvbhgOIAEoARIXCg9t",
            "ZW1fcm9zX3h2aWV3ZXIYDyABKAESGgoSbWVtX2NhbWVyYV9zZXJ2aWNlGBAg",
            "ASgBIisKDkxpZmVjeWNsZVN0YXRlEgoKAmlkGAEgASgFEg0KBWxhYmVsGAIg",
            "ASgJIowBCg9UcmFuc2l0aW9uRXZlbnQSEQoJbm9kZV9uYW1lGAEgASgJEgsK",
            "A3NlcRgCIAEoDRIsCgtzdGFydF9zdGF0ZRgDIAEoCzIXLnh2aWV3ZXIuTGlm",
            "ZWN5Y2xlU3RhdGUSKwoKZ29hbF9zdGF0ZRgEIAEoCzIXLnh2aWV3ZXIuTGlm",
            "ZWN5Y2xlU3RhdGUimwEKCEd1YXJkaWFuEhkKEWd1YXJkaWFuX2luc3RydWN0",
            "GAEgASgFEiMKG2d1YXJkaWFuX2luc3RydWN0X2F2YWlsYWJsZRgCIAEoCBIW",
            "Cg5jdXJyZW50X3N0YXR1cxgDIAEoBRI3ChV0cmFuc2l0aW9uX2V2ZW50X2lu",
            "Zm8YBCADKAsyGC54dmlld2VyLlRyYW5zaXRpb25FdmVudCKpAQoFQWRjdTES",
            "FgoOYWRjdV9icmFrZV9yZXEYASABKAESHQoVYWRjdV9hdXRvX3RycV93aGxf",
            "cmVxGAIgASgBEhkKEWFkY3VfbG5nX2N0cmxfcmVxGAMgASgNEhkKEWFkY3Vf",
            "Z2Vhcl9sdmxfcmVxGAQgASgNEhwKFGFkY3VfZ2Vhcl9sdmxfcmVxX3ZkGAUg",
            "ASgIEhUKDWFkY3VfYnJha2VfdmQYBiABKAgiewoFQWRjdTISGgoSYWRjdV9z",
            "dGVlcl9hbmdfcmVxGAIgASgBEhoKEmFkY3VfYnJha2VfcmVxX2FlYhgDIAEo",
            "ARIfChdhZGN1X3N0ZWVyX3dobF90b3JxX3JlcRgEIAEoARIZChFhZGN1X2xh",
            "dF9jdHJsX3JlcRgFIAEoDSJPCg9YQ29udHJvbENvbW1hbmQSHQoFYWRjdTEY",
            "ASABKAsyDi54dmlld2VyLkFkY3UxEh0KBWFkY3UyGAIgASgLMg4ueHZpZXdl",
            "ci5BZGN1MiKbAgoEU2N1MRIaChJiY3NfdmRjX2ZhdWx0X3N0X2cYASABKAgS",
            "GwoTYmNzX3Rjc19hY3RpdmVfc3RfZxgCIAEoCBIaChJiY3NfdGNzX2ZhdWx0",
            "X3N0X2cYAyABKAgSGwoTYmNzX2ViZF9hY3RpdmVfc3RfZxgEIAEoCBIaChJi",
            "Y3NfZWJkX2ZhdWx0X3N0X2cYBSABKAgSGgoSYmNzX2Fic19mYXVsdF9zdF9n",
            "GAYgASgIEhsKE2Jjc19hYnNfYWN0aXZlX3N0X2cYByABKAgSGAoQYmNzX3Zl",
            "aF9zcGRfdmRfZxgIIAEoCBIVCg1iY3NfdmVoX3NwZF9nGAkgASgBEhsKE2Jj",
            "c192ZGNfYWN0aXZlX3N0X2cYCiABKAgi5AEKBFNjdTgSIAoYYmNzX2FjdF92",
            "ZWhfbG9uZ19hY2NlbF9nGAEgASgBEiMKG2Jjc192ZWhfbG9uZ19hY2NlbF9v",
            "ZmZzZXRfZxgCIAEoARIiChpiY3NfYWN0X3ZlaF9sYWx0cmxfYWNjZWxfZxgD",
            "IAEoARIlCh1iY3NfdmVoX2xhbHRybF9hY2NlbF9vZmZzZXRfZxgEIAEoARIl",
            "Ch1iY3NfYWN0X3ZlaF9sYWx0cmxfYWNjZWxfdmRfZxgFIAEoCBIjChtiY3Nf",
            "YWN0X3ZlaF9sb25nX2FjY2VsX3ZkX2cYBiABKAgi/wEKBVNjdTEwEiMKG2Vw",
            "c19zdGVlcmluZ19hbmdsZV9zcGRfdmRfZxgBIAEoCBIXCg9lcHNfd2Fybl9s",
            "YW1wX2cYAiABKAgSHwoXZXBzX3N0cm5nX3dobF90b3JxX3ZkX2cYAyABKAgS",
            "HAoUZXBzX3N0ZWVyaW5nX2FuZ2xlX2cYBCABKAESGAoQZXBzX3RoZXJtYWxf",
            "c3RfZxgFIAEoDRIgChhlcHNfc3RlZXJpbmdfYW5nbGVfc3BkX2cYBiABKAES",
            "HwoXZXBzX3N0ZWVyaW5nX2FuZ2xlX3ZkX2cYByABKAgSHAoUZXBzX3N0cm5n",
            "X3dobF90b3JxX2cYCCABKAEi8AIKBVNjdTEzEhoKEnNjdV9zdHJuZ193aGxf",
            "aW50dhgBIAEoCBIbChN2Y3VfZ2Vhcl9sZXZlcl9pbnR2GAIgASgIEhsKE3Nj",
            "dV9lX3N0b3Bfc3dfc3RfdmQYAyABKAgSGAoQc2N1X2Vfc3RvcF9zd19zdBgE",
            "IAEoCBIZChFzY3VfbGF0X2N0cmxfbW9kZRgFIAEoDRIZChFzY3VfbG5nX2N0",
            "cmxfbW9kZRgGIAEoDRIbChNzY3VfbG5nX3F1aXRfcmVwb3J0GAcgASgNEhsK",
            "E3NjdV9sYXRfcXVpdF9yZXBvcnQYCCABKA0SIgoac2N1X2xuZ19hdXRvX2No",
            "ZWNrbF9yZXBvcnQYCSABKA0SIQoZc2N1X2xhdF9hdXRvX2NoZWNrX3JlcG9y",
            "dBgKIAEoDSJAChNTY3UxM1NjdUxhdEN0cmxNb2RlEgoKBk1BTlVBTBAAEggK",
            "BFFVSVQQARIICgRBVVRPEAISCQoFRkFVTFQQAyLYAgoFU2N1MTQSFQoNdmN1",
            "X3ZlaF9ybmdfZxgBIAEoARIZChF2Y3VfdmVoX2Rydl9tb2RfZxgCIAEoDRIY",
            "ChB2Y3VfdmVoX3JkeV9zdF9nGAMgASgIEhoKEnZjdV9kY2RjX3ZvbHRfbHZf",
            "ZxgEIAEoARIaChJ2Y3VfZGNkY19jdXJyX2x2X2cYBSABKAESFwoPdmN1X2Rj",
            "ZGNfdGVtcF9nGAYgASgBEhoKEnZjdV9kY2RjX21vZGVfc3RfZxgHIAEoDRIc",
            "ChR2Y3VfYmF0dF9zb19jX2Rpc3BfZxgIIAEoASJ4ChVTY3UxNFZjdVZlaERy",
            "dk1vZFR5cGUSCwoHSU5WQUxJRBAAEhEKDUVDT19QTFVTX01PREUQARIMCghF",
            "Q09fTU9ERRACEg8KC05PUk1BTF9NT0RFEAMSEAoMRFJJVklOR19NT0RFEAQS",
            "DgoKU1BPUlRfTU9ERRAFIpYCCgVTY3UxNRIeChZ2Y3VfYWN0X3JlY3BfdG9y",
            "cV9zdF9nGAEgASgNEhsKE3ZjdV9hY3RfcmVjcF90b3JxX2cYAiABKAESGwoT",
            "dmN1X2NybnRfZ2Vhcl9sdmxfZxgDIAEoDRIeChZ2Y3VfY3JudF9nZWFyX2x2",
            "bF92ZF9nGAQgASgIIpIBChNHZWFyQ3VycmVudFBvc2l0aW9uEhgKFEdFQVJf",
            "Q1VSUkVOVF9JTlZBTElEEAASFgoSR0VBUl9DVVJSRU5UX0RSSVZFEAESGAoU",
            "R0VBUl9DVVJSRU5UX05FVVRSQUwQAhIYChRHRUFSX0NVUlJFTlRfUkVWRVJT",
            "RRADEhUKEUdFQVJfQ1VSUkVOVF9QQVJLEAQiwQEKBVNjdTE2EiAKGHZjdV9h",
            "Y2NfbWF4X3JlY3BfZGVjZWxfZxgBIAEoARIoCiB2Y3VfbGF0ZXJhbF9hc3Np",
            "c3RfYnRuX2luZm9fdmRfZxgCIAEoCBIlCh12Y3VfbGF0ZXJhbF9hc3Npc3Rf",
            "YnRuX2luZm9fZxgDIAEoCBIjCht2Y3VfYWNjX21heF9yZWNwX2RlY2VsX3Zk",
            "X2cYBCABKAgSIAoYdmN1X2FjdF92ZWhfd2hlZWxfdG9ycV9nGAUgASgBIsoB",
            "CgVTY3UxORIgChhzY3VfdmluX2RhdGFfcGFja2FnZV9udW0YASABKA0SFQoN",
            "c2N1X3Zpbl9ieXRlMRgCIAEoDRIVCg1zY3VfdmluX2J5dGUyGAMgASgNEhUK",
            "DXNjdV92aW5fYnl0ZTMYBCABKA0SFQoNc2N1X3Zpbl9ieXRlNBgFIAEoDRIV",
            "Cg1zY3VfdmluX2J5dGU1GAYgASgNEhUKDXNjdV92aW5fYnl0ZTYYByABKA0S",
            "FQoNc2N1X3Zpbl9ieXRlNxgIIAEoDSLcAQoGU2FmZXR5EhkKEWlzX2RyaXZl",
            "cl9idWNrbGVkGAEgASgIEh0KFWlzX3Bhc3Nlbmdlcl9kZXRlY3RlZBgCIAEo",
            "CBIcChRpc19wYXNzZW5nZXJfYnVja2xlZBgDIAEoCBIbChNpc19kcml2ZXJf",
            "ZG9vcl9vcGVuGAQgASgIEh4KFmlzX3Bhc3Nlbmdlcl9kb29yX29wZW4YBSAB",
            "KAgSHQoVaXNfcmVhcmxlZnRfZG9vcl9vcGVuGAYgASgIEh4KFmlzX3JlYXJy",
            "aWdodF9kb29yX29wZW4YByABKAgirAIKDUNoYXNzaXNEZXRhaWwSHAoFc2N1",
            "XzEYAiABKAsyDS54dmlld2VyLlNjdTESHAoFc2N1XzgYAyABKAsyDS54dmll",
            "d2VyLlNjdTgSHgoGc2N1XzEwGAQgASgLMg4ueHZpZXdlci5TY3UxMBIeCgZz",
            "Y3VfMTMYBSABKAsyDi54dmlld2VyLlNjdTEzEh4KBnNjdV8xNBgGIAEoCzIO",
            "Lnh2aWV3ZXIuU2N1MTQSHgoGc2N1XzE1GAcgASgLMg4ueHZpZXdlci5TY3Ux",
            "NRIeCgZzY3VfMTYYCCABKAsyDi54dmlld2VyLlNjdTE2Eh4KBnNjdV8xORgJ",
            "IAEoCzIOLnh2aWV3ZXIuU2N1MTkSHwoGc2FmZXR5GAogASgLMg8ueHZpZXdl",
            "ci5TYWZldHki1QIKB0NoYXNzaXMSFQoNYmNzX3ZlaF9zcGRfZxgBIAEoARIi",
            "ChpiY3NfYWN0X3ZlaF9sYWx0cmxfYWNjZWxfZxgCIAEoARIgChhiY3NfYWN0",
            "X3ZlaF9sb25nX2FjY2VsX2cYAyABKAESHAoUZXBzX3N0ZWVyaW5nX2FuZ2xl",
            "X2cYBCABKAESIAoYZXBzX3N0ZWVyaW5nX2FuZ2xlX3NwZF9nGAUgASgBEhkK",
            "EXNjdV9sYXRfY3RybF9tb2RlGAYgASgNEhkKEXNjdV9sbmdfY3RybF9tb2Rl",
            "GAcgASgNEhsKE3NjdV9sYXRfcXVpdF9yZXBvcnQYCCABKA0SGwoTc2N1X2xu",
            "Z19xdWl0X3JlcG9ydBgJIAEoDRIbChN2Y3VfY3JudF9nZWFyX2x2bF9nGAog",
            "ASgNEiAKGHZjdV9hY3RfdmVoX3doZWVsX3RvcnFfZxgLIAEoASJVCgtGYXRh",
            "bFJlcG9ydBIWCg5zeXN0ZW1fZmFpbHVyZRgBIAEoCBIuChFtb2R1bGVzX2Rp",
            "YWdub3NpcxgCIAMoCzITLnh2aWV3ZXIuWERpYWdub3NpcyLjAgoLRW5naW5l",
            "ZXJpbmcSLgoOdWlfY29tbXVuaWNhdGUYASABKAsyFi54dmlld2VyLlVJQ29t",
            "bXVuaWNhdGUSIQoHbW9uaXRvchgCIAEoCzIQLnh2aWV3ZXIuTW9uaXRvchIS",
            "CgpydGtfc3RhdHVzGAMgASgNEhYKDnN5c3RlbV9mYWlsdXJlGAQgASgIEiEK",
            "B2NoYXNzaXMYBSABKAsyEC54dmlld2VyLkNoYXNzaXMSLgoOY2hhc3Npc19k",
            "ZXRhaWwYBiABKAsyFi54dmlld2VyLkNoYXNzaXNEZXRhaWwSMQoPY29udHJv",
            "bF9jb21tYW5kGAcgASgLMhgueHZpZXdlci5YQ29udHJvbENvbW1hbmQSIwoI",
            "Z3VhcmRpYW4YCCABKAsyES54dmlld2VyLkd1YXJkaWFuEioKDGZhdGFsX3Jl",
            "cG9ydBgJIAEoCzIULnh2aWV3ZXIuRmF0YWxSZXBvcnQ="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Xviewer.BasicsReflection.Descriptor, global::Xviewer.LocalizationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.Image), global::Xviewer.Image.Parser, new[]{ "ImageFusion", "ImageCompressed0", "ImageCompressed1", "ImageCompressed2", "ImageCompressed3" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.Odometry), global::Xviewer.Odometry.Parser, new[]{ "ChildFrameId", "Pose", "Twist" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.Novatel), global::Xviewer.Novatel.Parser, new[]{ "Odom" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.HardwareSignal), global::Xviewer.HardwareSignal.Parser, new[]{ "Novatel", "Lampstatus" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.DiagnosisBase), global::Xviewer.DiagnosisBase.Parser, new[]{ "Level", "ErrorCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.XDiagnosis), global::Xviewer.XDiagnosis.Parser, new[]{ "NodeId", "DiagnosisData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.ModulesHeartbeat), global::Xviewer.ModulesHeartbeat.Parser, new[]{ "NodeId", "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.UICommunicate), global::Xviewer.UICommunicate.Parser, new[]{ "Time", "ModulesDiagnosis", "ModulesHeartbeat" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.Monitor), global::Xviewer.Monitor.Parser, new[]{ "CpuApaPlanning", "CpuControl", "CpuFreespaceFusion", "CpuGarciaMapEngine", "CpuGarciaMapLocal", "CpuParkingSlotFusion", "CpuRosXviewer", "CpuCameraService", "MemApaPlanning", "MemControl", "MemFreespaceFusion", "MemGarciaMapEngine", "MemGarciaMapLocal", "MemParkingSlotFusion", "MemRosXviewer", "MemCameraService" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.LifecycleState), global::Xviewer.LifecycleState.Parser, new[]{ "Id", "Label" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.TransitionEvent), global::Xviewer.TransitionEvent.Parser, new[]{ "NodeName", "Seq", "StartState", "GoalState" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.Guardian), global::Xviewer.Guardian.Parser, new[]{ "GuardianInstruct", "GuardianInstructAvailable", "CurrentStatus", "TransitionEventInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.Adcu1), global::Xviewer.Adcu1.Parser, new[]{ "AdcuBrakeReq", "AdcuAutoTrqWhlReq", "AdcuLngCtrlReq", "AdcuGearLvlReq", "AdcuGearLvlReqVd", "AdcuBrakeVd" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.Adcu2), global::Xviewer.Adcu2.Parser, new[]{ "AdcuSteerAngReq", "AdcuBrakeReqAeb", "AdcuSteerWhlTorqReq", "AdcuLatCtrlReq" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.XControlCommand), global::Xviewer.XControlCommand.Parser, new[]{ "Adcu1", "Adcu2" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.Scu1), global::Xviewer.Scu1.Parser, new[]{ "BcsVdcFaultStG", "BcsTcsActiveStG", "BcsTcsFaultStG", "BcsEbdActiveStG", "BcsEbdFaultStG", "BcsAbsFaultStG", "BcsAbsActiveStG", "BcsVehSpdVdG", "BcsVehSpdG", "BcsVdcActiveStG" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.Scu8), global::Xviewer.Scu8.Parser, new[]{ "BcsActVehLongAccelG", "BcsVehLongAccelOffsetG", "BcsActVehLaltrlAccelG", "BcsVehLaltrlAccelOffsetG", "BcsActVehLaltrlAccelVdG", "BcsActVehLongAccelVdG" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.Scu10), global::Xviewer.Scu10.Parser, new[]{ "EpsSteeringAngleSpdVdG", "EpsWarnLampG", "EpsStrngWhlTorqVdG", "EpsSteeringAngleG", "EpsThermalStG", "EpsSteeringAngleSpdG", "EpsSteeringAngleVdG", "EpsStrngWhlTorqG" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.Scu13), global::Xviewer.Scu13.Parser, new[]{ "ScuStrngWhlIntv", "VcuGearLeverIntv", "ScuEStopSwStVd", "ScuEStopSwSt", "ScuLatCtrlMode", "ScuLngCtrlMode", "ScuLngQuitReport", "ScuLatQuitReport", "ScuLngAutoChecklReport", "ScuLatAutoCheckReport" }, null, new[]{ typeof(global::Xviewer.Scu13.Types.Scu13ScuLatCtrlMode) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.Scu14), global::Xviewer.Scu14.Parser, new[]{ "VcuVehRngG", "VcuVehDrvModG", "VcuVehRdyStG", "VcuDcdcVoltLvG", "VcuDcdcCurrLvG", "VcuDcdcTempG", "VcuDcdcModeStG", "VcuBattSoCDispG" }, null, new[]{ typeof(global::Xviewer.Scu14.Types.Scu14VcuVehDrvModType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.Scu15), global::Xviewer.Scu15.Parser, new[]{ "VcuActRecpTorqStG", "VcuActRecpTorqG", "VcuCrntGearLvlG", "VcuCrntGearLvlVdG" }, null, new[]{ typeof(global::Xviewer.Scu15.Types.GearCurrentPosition) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.Scu16), global::Xviewer.Scu16.Parser, new[]{ "VcuAccMaxRecpDecelG", "VcuLateralAssistBtnInfoVdG", "VcuLateralAssistBtnInfoG", "VcuAccMaxRecpDecelVdG", "VcuActVehWheelTorqG" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.Scu19), global::Xviewer.Scu19.Parser, new[]{ "ScuVinDataPackageNum", "ScuVinByte1", "ScuVinByte2", "ScuVinByte3", "ScuVinByte4", "ScuVinByte5", "ScuVinByte6", "ScuVinByte7" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.Safety), global::Xviewer.Safety.Parser, new[]{ "IsDriverBuckled", "IsPassengerDetected", "IsPassengerBuckled", "IsDriverDoorOpen", "IsPassengerDoorOpen", "IsRearleftDoorOpen", "IsRearrightDoorOpen" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.ChassisDetail), global::Xviewer.ChassisDetail.Parser, new[]{ "Scu1", "Scu8", "Scu10", "Scu13", "Scu14", "Scu15", "Scu16", "Scu19", "Safety" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.Chassis), global::Xviewer.Chassis.Parser, new[]{ "BcsVehSpdG", "BcsActVehLaltrlAccelG", "BcsActVehLongAccelG", "EpsSteeringAngleG", "EpsSteeringAngleSpdG", "ScuLatCtrlMode", "ScuLngCtrlMode", "ScuLatQuitReport", "ScuLngQuitReport", "VcuCrntGearLvlG", "VcuActVehWheelTorqG" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.FatalReport), global::Xviewer.FatalReport.Parser, new[]{ "SystemFailure", "ModulesDiagnosis" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.Engineering), global::Xviewer.Engineering.Parser, new[]{ "UiCommunicate", "Monitor", "RtkStatus", "SystemFailure", "Chassis", "ChassisDetail", "ControlCommand", "Guardian", "FatalReport" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// ----------------  传感器消息结构 --------------------//
  /// </summary>
  public sealed partial class Image : pb::IMessage<Image> {
    private static readonly pb::MessageParser<Image> _parser = new pb::MessageParser<Image>(() => new Image());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Image> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.EngineeringReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image(Image other) : this() {
      imageFusion_ = other.imageFusion_;
      imageCompressed0_ = other.imageCompressed0_;
      imageCompressed1_ = other.imageCompressed1_;
      imageCompressed2_ = other.imageCompressed2_;
      imageCompressed3_ = other.imageCompressed3_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image Clone() {
      return new Image(this);
    }

    /// <summary>Field number for the "image_fusion" field.</summary>
    public const int ImageFusionFieldNumber = 1;
    private readonly static pb::ByteString ImageFusionDefaultValue = pb::ByteString.Empty;

    private pb::ByteString imageFusion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ImageFusion {
      get { return imageFusion_ ?? ImageFusionDefaultValue; }
      set {
        imageFusion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "image_fusion" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasImageFusion {
      get { return imageFusion_ != null; }
    }
    /// <summary>Clears the value of the "image_fusion" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearImageFusion() {
      imageFusion_ = null;
    }

    /// <summary>Field number for the "image_compressed0" field.</summary>
    public const int ImageCompressed0FieldNumber = 2;
    private readonly static pb::ByteString ImageCompressed0DefaultValue = pb::ByteString.Empty;

    private pb::ByteString imageCompressed0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ImageCompressed0 {
      get { return imageCompressed0_ ?? ImageCompressed0DefaultValue; }
      set {
        imageCompressed0_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "image_compressed0" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasImageCompressed0 {
      get { return imageCompressed0_ != null; }
    }
    /// <summary>Clears the value of the "image_compressed0" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearImageCompressed0() {
      imageCompressed0_ = null;
    }

    /// <summary>Field number for the "image_compressed1" field.</summary>
    public const int ImageCompressed1FieldNumber = 3;
    private readonly static pb::ByteString ImageCompressed1DefaultValue = pb::ByteString.Empty;

    private pb::ByteString imageCompressed1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ImageCompressed1 {
      get { return imageCompressed1_ ?? ImageCompressed1DefaultValue; }
      set {
        imageCompressed1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "image_compressed1" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasImageCompressed1 {
      get { return imageCompressed1_ != null; }
    }
    /// <summary>Clears the value of the "image_compressed1" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearImageCompressed1() {
      imageCompressed1_ = null;
    }

    /// <summary>Field number for the "image_compressed2" field.</summary>
    public const int ImageCompressed2FieldNumber = 4;
    private readonly static pb::ByteString ImageCompressed2DefaultValue = pb::ByteString.Empty;

    private pb::ByteString imageCompressed2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ImageCompressed2 {
      get { return imageCompressed2_ ?? ImageCompressed2DefaultValue; }
      set {
        imageCompressed2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "image_compressed2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasImageCompressed2 {
      get { return imageCompressed2_ != null; }
    }
    /// <summary>Clears the value of the "image_compressed2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearImageCompressed2() {
      imageCompressed2_ = null;
    }

    /// <summary>Field number for the "image_compressed3" field.</summary>
    public const int ImageCompressed3FieldNumber = 5;
    private readonly static pb::ByteString ImageCompressed3DefaultValue = pb::ByteString.Empty;

    private pb::ByteString imageCompressed3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ImageCompressed3 {
      get { return imageCompressed3_ ?? ImageCompressed3DefaultValue; }
      set {
        imageCompressed3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "image_compressed3" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasImageCompressed3 {
      get { return imageCompressed3_ != null; }
    }
    /// <summary>Clears the value of the "image_compressed3" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearImageCompressed3() {
      imageCompressed3_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Image);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Image other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImageFusion != other.ImageFusion) return false;
      if (ImageCompressed0 != other.ImageCompressed0) return false;
      if (ImageCompressed1 != other.ImageCompressed1) return false;
      if (ImageCompressed2 != other.ImageCompressed2) return false;
      if (ImageCompressed3 != other.ImageCompressed3) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasImageFusion) hash ^= ImageFusion.GetHashCode();
      if (HasImageCompressed0) hash ^= ImageCompressed0.GetHashCode();
      if (HasImageCompressed1) hash ^= ImageCompressed1.GetHashCode();
      if (HasImageCompressed2) hash ^= ImageCompressed2.GetHashCode();
      if (HasImageCompressed3) hash ^= ImageCompressed3.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasImageFusion) {
        output.WriteRawTag(10);
        output.WriteBytes(ImageFusion);
      }
      if (HasImageCompressed0) {
        output.WriteRawTag(18);
        output.WriteBytes(ImageCompressed0);
      }
      if (HasImageCompressed1) {
        output.WriteRawTag(26);
        output.WriteBytes(ImageCompressed1);
      }
      if (HasImageCompressed2) {
        output.WriteRawTag(34);
        output.WriteBytes(ImageCompressed2);
      }
      if (HasImageCompressed3) {
        output.WriteRawTag(42);
        output.WriteBytes(ImageCompressed3);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasImageFusion) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ImageFusion);
      }
      if (HasImageCompressed0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ImageCompressed0);
      }
      if (HasImageCompressed1) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ImageCompressed1);
      }
      if (HasImageCompressed2) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ImageCompressed2);
      }
      if (HasImageCompressed3) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ImageCompressed3);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Image other) {
      if (other == null) {
        return;
      }
      if (other.HasImageFusion) {
        ImageFusion = other.ImageFusion;
      }
      if (other.HasImageCompressed0) {
        ImageCompressed0 = other.ImageCompressed0;
      }
      if (other.HasImageCompressed1) {
        ImageCompressed1 = other.ImageCompressed1;
      }
      if (other.HasImageCompressed2) {
        ImageCompressed2 = other.ImageCompressed2;
      }
      if (other.HasImageCompressed3) {
        ImageCompressed3 = other.ImageCompressed3;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ImageFusion = input.ReadBytes();
            break;
          }
          case 18: {
            ImageCompressed0 = input.ReadBytes();
            break;
          }
          case 26: {
            ImageCompressed1 = input.ReadBytes();
            break;
          }
          case 34: {
            ImageCompressed2 = input.ReadBytes();
            break;
          }
          case 42: {
            ImageCompressed3 = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Odometry : pb::IMessage<Odometry> {
    private static readonly pb::MessageParser<Odometry> _parser = new pb::MessageParser<Odometry>(() => new Odometry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Odometry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.EngineeringReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Odometry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Odometry(Odometry other) : this() {
      childFrameId_ = other.childFrameId_;
      pose_ = other.pose_ != null ? other.pose_.Clone() : null;
      twist_ = other.twist_ != null ? other.twist_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Odometry Clone() {
      return new Odometry(this);
    }

    /// <summary>Field number for the "child_frame_id" field.</summary>
    public const int ChildFrameIdFieldNumber = 1;
    private readonly static string ChildFrameIdDefaultValue = "";

    private string childFrameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChildFrameId {
      get { return childFrameId_ ?? ChildFrameIdDefaultValue; }
      set {
        childFrameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "child_frame_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChildFrameId {
      get { return childFrameId_ != null; }
    }
    /// <summary>Clears the value of the "child_frame_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChildFrameId() {
      childFrameId_ = null;
    }

    /// <summary>Field number for the "pose" field.</summary>
    public const int PoseFieldNumber = 2;
    private global::Xviewer.Pose pose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Pose Pose {
      get { return pose_; }
      set {
        pose_ = value;
      }
    }

    /// <summary>Field number for the "twist" field.</summary>
    public const int TwistFieldNumber = 3;
    private global::Xviewer.TwistAccel twist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.TwistAccel Twist {
      get { return twist_; }
      set {
        twist_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Odometry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Odometry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChildFrameId != other.ChildFrameId) return false;
      if (!object.Equals(Pose, other.Pose)) return false;
      if (!object.Equals(Twist, other.Twist)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasChildFrameId) hash ^= ChildFrameId.GetHashCode();
      if (pose_ != null) hash ^= Pose.GetHashCode();
      if (twist_ != null) hash ^= Twist.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasChildFrameId) {
        output.WriteRawTag(10);
        output.WriteString(ChildFrameId);
      }
      if (pose_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pose);
      }
      if (twist_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Twist);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasChildFrameId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChildFrameId);
      }
      if (pose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pose);
      }
      if (twist_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Twist);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Odometry other) {
      if (other == null) {
        return;
      }
      if (other.HasChildFrameId) {
        ChildFrameId = other.ChildFrameId;
      }
      if (other.pose_ != null) {
        if (pose_ == null) {
          Pose = new global::Xviewer.Pose();
        }
        Pose.MergeFrom(other.Pose);
      }
      if (other.twist_ != null) {
        if (twist_ == null) {
          Twist = new global::Xviewer.TwistAccel();
        }
        Twist.MergeFrom(other.Twist);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ChildFrameId = input.ReadString();
            break;
          }
          case 18: {
            if (pose_ == null) {
              Pose = new global::Xviewer.Pose();
            }
            input.ReadMessage(Pose);
            break;
          }
          case 26: {
            if (twist_ == null) {
              Twist = new global::Xviewer.TwistAccel();
            }
            input.ReadMessage(Twist);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Novatel : pb::IMessage<Novatel> {
    private static readonly pb::MessageParser<Novatel> _parser = new pb::MessageParser<Novatel>(() => new Novatel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Novatel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.EngineeringReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Novatel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Novatel(Novatel other) : this() {
      odom_ = other.odom_ != null ? other.odom_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Novatel Clone() {
      return new Novatel(this);
    }

    /// <summary>Field number for the "odom" field.</summary>
    public const int OdomFieldNumber = 1;
    private global::Xviewer.Odometry odom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Odometry Odom {
      get { return odom_; }
      set {
        odom_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Novatel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Novatel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Odom, other.Odom)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (odom_ != null) hash ^= Odom.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (odom_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Odom);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (odom_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Odom);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Novatel other) {
      if (other == null) {
        return;
      }
      if (other.odom_ != null) {
        if (odom_ == null) {
          Odom = new global::Xviewer.Odometry();
        }
        Odom.MergeFrom(other.Odom);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (odom_ == null) {
              Odom = new global::Xviewer.Odometry();
            }
            input.ReadMessage(Odom);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HardwareSignal : pb::IMessage<HardwareSignal> {
    private static readonly pb::MessageParser<HardwareSignal> _parser = new pb::MessageParser<HardwareSignal>(() => new HardwareSignal());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HardwareSignal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.EngineeringReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HardwareSignal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HardwareSignal(HardwareSignal other) : this() {
      _hasBits0 = other._hasBits0;
      novatel_ = other.novatel_ != null ? other.novatel_.Clone() : null;
      lampstatus_ = other.lampstatus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HardwareSignal Clone() {
      return new HardwareSignal(this);
    }

    /// <summary>Field number for the "novatel" field.</summary>
    public const int NovatelFieldNumber = 1;
    private global::Xviewer.Novatel novatel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Novatel Novatel {
      get { return novatel_; }
      set {
        novatel_ = value;
      }
    }

    /// <summary>Field number for the "lampstatus" field.</summary>
    public const int LampstatusFieldNumber = 2;
    private readonly static uint LampstatusDefaultValue = 0;

    private uint lampstatus_;
    /// <summary>
    /// 0表示无转向灯闪烁，1表示左转灯开启，2表示右转灯开启
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Lampstatus {
      get { if ((_hasBits0 & 1) != 0) { return lampstatus_; } else { return LampstatusDefaultValue; } }
      set {
        _hasBits0 |= 1;
        lampstatus_ = value;
      }
    }
    /// <summary>Gets whether the "lampstatus" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLampstatus {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "lampstatus" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLampstatus() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HardwareSignal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HardwareSignal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Novatel, other.Novatel)) return false;
      if (Lampstatus != other.Lampstatus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (novatel_ != null) hash ^= Novatel.GetHashCode();
      if (HasLampstatus) hash ^= Lampstatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (novatel_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Novatel);
      }
      if (HasLampstatus) {
        output.WriteRawTag(16);
        output.WriteUInt32(Lampstatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (novatel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Novatel);
      }
      if (HasLampstatus) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lampstatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HardwareSignal other) {
      if (other == null) {
        return;
      }
      if (other.novatel_ != null) {
        if (novatel_ == null) {
          Novatel = new global::Xviewer.Novatel();
        }
        Novatel.MergeFrom(other.Novatel);
      }
      if (other.HasLampstatus) {
        Lampstatus = other.Lampstatus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (novatel_ == null) {
              Novatel = new global::Xviewer.Novatel();
            }
            input.ReadMessage(Novatel);
            break;
          }
          case 16: {
            Lampstatus = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ----------------  工程消息结构 ----------------//
  /// </summary>
  public sealed partial class DiagnosisBase : pb::IMessage<DiagnosisBase> {
    private static readonly pb::MessageParser<DiagnosisBase> _parser = new pb::MessageParser<DiagnosisBase>(() => new DiagnosisBase());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DiagnosisBase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.EngineeringReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiagnosisBase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiagnosisBase(DiagnosisBase other) : this() {
      _hasBits0 = other._hasBits0;
      level_ = other.level_;
      errorCode_ = other.errorCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiagnosisBase Clone() {
      return new DiagnosisBase(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private readonly static uint LevelDefaultValue = 0;

    private uint level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { if ((_hasBits0 & 1) != 0) { return level_; } else { return LevelDefaultValue; } }
      set {
        _hasBits0 |= 1;
        level_ = value;
      }
    }
    /// <summary>Gets whether the "level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLevel {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLevel() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "error_code" field.</summary>
    public const int ErrorCodeFieldNumber = 2;
    private readonly static uint ErrorCodeDefaultValue = 0;

    private uint errorCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ErrorCode {
      get { if ((_hasBits0 & 2) != 0) { return errorCode_; } else { return ErrorCodeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        errorCode_ = value;
      }
    }
    /// <summary>Gets whether the "error_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorCode {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "error_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorCode() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DiagnosisBase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DiagnosisBase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if (ErrorCode != other.ErrorCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLevel) hash ^= Level.GetHashCode();
      if (HasErrorCode) hash ^= ErrorCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasLevel) {
        output.WriteRawTag(8);
        output.WriteUInt32(Level);
      }
      if (HasErrorCode) {
        output.WriteRawTag(16);
        output.WriteUInt32(ErrorCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasLevel) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (HasErrorCode) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ErrorCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DiagnosisBase other) {
      if (other == null) {
        return;
      }
      if (other.HasLevel) {
        Level = other.Level;
      }
      if (other.HasErrorCode) {
        ErrorCode = other.ErrorCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Level = input.ReadUInt32();
            break;
          }
          case 16: {
            ErrorCode = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class XDiagnosis : pb::IMessage<XDiagnosis> {
    private static readonly pb::MessageParser<XDiagnosis> _parser = new pb::MessageParser<XDiagnosis>(() => new XDiagnosis());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<XDiagnosis> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.EngineeringReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XDiagnosis() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XDiagnosis(XDiagnosis other) : this() {
      _hasBits0 = other._hasBits0;
      nodeId_ = other.nodeId_;
      diagnosisData_ = other.diagnosisData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XDiagnosis Clone() {
      return new XDiagnosis(this);
    }

    /// <summary>Field number for the "node_id" field.</summary>
    public const int NodeIdFieldNumber = 1;
    private readonly static uint NodeIdDefaultValue = 0;

    private uint nodeId_;
    /// <summary>
    /// 模块ID 0：无效， 1：整车级， 2：vehicle controller， 3：摄像头， 4：激光雷达， 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NodeId {
      get { if ((_hasBits0 & 1) != 0) { return nodeId_; } else { return NodeIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        nodeId_ = value;
      }
    }
    /// <summary>Gets whether the "node_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNodeId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "node_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNodeId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "diagnosis_data" field.</summary>
    public const int DiagnosisDataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xviewer.DiagnosisBase> _repeated_diagnosisData_codec
        = pb::FieldCodec.ForMessage(18, global::Xviewer.DiagnosisBase.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.DiagnosisBase> diagnosisData_ = new pbc::RepeatedField<global::Xviewer.DiagnosisBase>();
    /// <summary>
    /// 5：毫米波， 6：USS， 7：RTK， 8：感知， 9：规划决策， 10：地图， 11：定位， 12：控制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.DiagnosisBase> DiagnosisData {
      get { return diagnosisData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as XDiagnosis);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(XDiagnosis other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeId != other.NodeId) return false;
      if(!diagnosisData_.Equals(other.diagnosisData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasNodeId) hash ^= NodeId.GetHashCode();
      hash ^= diagnosisData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasNodeId) {
        output.WriteRawTag(8);
        output.WriteUInt32(NodeId);
      }
      diagnosisData_.WriteTo(output, _repeated_diagnosisData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasNodeId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NodeId);
      }
      size += diagnosisData_.CalculateSize(_repeated_diagnosisData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(XDiagnosis other) {
      if (other == null) {
        return;
      }
      if (other.HasNodeId) {
        NodeId = other.NodeId;
      }
      diagnosisData_.Add(other.diagnosisData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NodeId = input.ReadUInt32();
            break;
          }
          case 18: {
            diagnosisData_.AddEntriesFrom(input, _repeated_diagnosisData_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ModulesHeartbeat : pb::IMessage<ModulesHeartbeat> {
    private static readonly pb::MessageParser<ModulesHeartbeat> _parser = new pb::MessageParser<ModulesHeartbeat>(() => new ModulesHeartbeat());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModulesHeartbeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.EngineeringReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModulesHeartbeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModulesHeartbeat(ModulesHeartbeat other) : this() {
      _hasBits0 = other._hasBits0;
      nodeId_ = other.nodeId_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModulesHeartbeat Clone() {
      return new ModulesHeartbeat(this);
    }

    /// <summary>Field number for the "node_id" field.</summary>
    public const int NodeIdFieldNumber = 1;
    private readonly static uint NodeIdDefaultValue = 0;

    private uint nodeId_;
    /// <summary>
    /// 模块ID 0：无效， 1：整车级， 2：vehicle controller， 3：摄像头， 4：激光雷达， 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NodeId {
      get { if ((_hasBits0 & 1) != 0) { return nodeId_; } else { return NodeIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        nodeId_ = value;
      }
    }
    /// <summary>Gets whether the "node_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNodeId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "node_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNodeId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private readonly static uint StatusDefaultValue = 0;

    private uint status_;
    /// <summary>
    /// 5：毫米波， 6：USS， 7：RTK， 8：感知， 9：规划决策， 10：地图， 11：定位， 12：控制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { if ((_hasBits0 & 2) != 0) { return status_; } else { return StatusDefaultValue; } }
      set {
        _hasBits0 |= 2;
        status_ = value;
      }
    }
    /// <summary>Gets whether the "status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStatus {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStatus() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModulesHeartbeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModulesHeartbeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeId != other.NodeId) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasNodeId) hash ^= NodeId.GetHashCode();
      if (HasStatus) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasNodeId) {
        output.WriteRawTag(8);
        output.WriteUInt32(NodeId);
      }
      if (HasStatus) {
        output.WriteRawTag(16);
        output.WriteUInt32(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasNodeId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NodeId);
      }
      if (HasStatus) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModulesHeartbeat other) {
      if (other == null) {
        return;
      }
      if (other.HasNodeId) {
        NodeId = other.NodeId;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NodeId = input.ReadUInt32();
            break;
          }
          case 16: {
            Status = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UICommunicate : pb::IMessage<UICommunicate> {
    private static readonly pb::MessageParser<UICommunicate> _parser = new pb::MessageParser<UICommunicate>(() => new UICommunicate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UICommunicate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.EngineeringReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UICommunicate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UICommunicate(UICommunicate other) : this() {
      time_ = other.time_ != null ? other.time_.Clone() : null;
      modulesDiagnosis_ = other.modulesDiagnosis_.Clone();
      modulesHeartbeat_ = other.modulesHeartbeat_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UICommunicate Clone() {
      return new UICommunicate(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private global::Xviewer.TimeWorld time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.TimeWorld Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "modules_diagnosis" field.</summary>
    public const int ModulesDiagnosisFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xviewer.XDiagnosis> _repeated_modulesDiagnosis_codec
        = pb::FieldCodec.ForMessage(18, global::Xviewer.XDiagnosis.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.XDiagnosis> modulesDiagnosis_ = new pbc::RepeatedField<global::Xviewer.XDiagnosis>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.XDiagnosis> ModulesDiagnosis {
      get { return modulesDiagnosis_; }
    }

    /// <summary>Field number for the "modules_heartbeat" field.</summary>
    public const int ModulesHeartbeatFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Xviewer.ModulesHeartbeat> _repeated_modulesHeartbeat_codec
        = pb::FieldCodec.ForMessage(26, global::Xviewer.ModulesHeartbeat.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.ModulesHeartbeat> modulesHeartbeat_ = new pbc::RepeatedField<global::Xviewer.ModulesHeartbeat>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.ModulesHeartbeat> ModulesHeartbeat {
      get { return modulesHeartbeat_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UICommunicate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UICommunicate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Time, other.Time)) return false;
      if(!modulesDiagnosis_.Equals(other.modulesDiagnosis_)) return false;
      if(!modulesHeartbeat_.Equals(other.modulesHeartbeat_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (time_ != null) hash ^= Time.GetHashCode();
      hash ^= modulesDiagnosis_.GetHashCode();
      hash ^= modulesHeartbeat_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (time_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Time);
      }
      modulesDiagnosis_.WriteTo(output, _repeated_modulesDiagnosis_codec);
      modulesHeartbeat_.WriteTo(output, _repeated_modulesHeartbeat_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (time_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Time);
      }
      size += modulesDiagnosis_.CalculateSize(_repeated_modulesDiagnosis_codec);
      size += modulesHeartbeat_.CalculateSize(_repeated_modulesHeartbeat_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UICommunicate other) {
      if (other == null) {
        return;
      }
      if (other.time_ != null) {
        if (time_ == null) {
          Time = new global::Xviewer.TimeWorld();
        }
        Time.MergeFrom(other.Time);
      }
      modulesDiagnosis_.Add(other.modulesDiagnosis_);
      modulesHeartbeat_.Add(other.modulesHeartbeat_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (time_ == null) {
              Time = new global::Xviewer.TimeWorld();
            }
            input.ReadMessage(Time);
            break;
          }
          case 18: {
            modulesDiagnosis_.AddEntriesFrom(input, _repeated_modulesDiagnosis_codec);
            break;
          }
          case 26: {
            modulesHeartbeat_.AddEntriesFrom(input, _repeated_modulesHeartbeat_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Monitor : pb::IMessage<Monitor> {
    private static readonly pb::MessageParser<Monitor> _parser = new pb::MessageParser<Monitor>(() => new Monitor());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Monitor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.EngineeringReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monitor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monitor(Monitor other) : this() {
      _hasBits0 = other._hasBits0;
      cpuApaPlanning_ = other.cpuApaPlanning_;
      cpuControl_ = other.cpuControl_;
      cpuFreespaceFusion_ = other.cpuFreespaceFusion_;
      cpuGarciaMapEngine_ = other.cpuGarciaMapEngine_;
      cpuGarciaMapLocal_ = other.cpuGarciaMapLocal_;
      cpuParkingSlotFusion_ = other.cpuParkingSlotFusion_;
      cpuRosXviewer_ = other.cpuRosXviewer_;
      cpuCameraService_ = other.cpuCameraService_;
      memApaPlanning_ = other.memApaPlanning_;
      memControl_ = other.memControl_;
      memFreespaceFusion_ = other.memFreespaceFusion_;
      memGarciaMapEngine_ = other.memGarciaMapEngine_;
      memGarciaMapLocal_ = other.memGarciaMapLocal_;
      memParkingSlotFusion_ = other.memParkingSlotFusion_;
      memRosXviewer_ = other.memRosXviewer_;
      memCameraService_ = other.memCameraService_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monitor Clone() {
      return new Monitor(this);
    }

    /// <summary>Field number for the "cpu_apa_planning" field.</summary>
    public const int CpuApaPlanningFieldNumber = 1;
    private readonly static double CpuApaPlanningDefaultValue = 0D;

    private double cpuApaPlanning_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CpuApaPlanning {
      get { if ((_hasBits0 & 1) != 0) { return cpuApaPlanning_; } else { return CpuApaPlanningDefaultValue; } }
      set {
        _hasBits0 |= 1;
        cpuApaPlanning_ = value;
      }
    }
    /// <summary>Gets whether the "cpu_apa_planning" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCpuApaPlanning {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "cpu_apa_planning" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCpuApaPlanning() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cpu_control" field.</summary>
    public const int CpuControlFieldNumber = 2;
    private readonly static double CpuControlDefaultValue = 0D;

    private double cpuControl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CpuControl {
      get { if ((_hasBits0 & 2) != 0) { return cpuControl_; } else { return CpuControlDefaultValue; } }
      set {
        _hasBits0 |= 2;
        cpuControl_ = value;
      }
    }
    /// <summary>Gets whether the "cpu_control" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCpuControl {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "cpu_control" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCpuControl() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "cpu_freespace_fusion" field.</summary>
    public const int CpuFreespaceFusionFieldNumber = 3;
    private readonly static double CpuFreespaceFusionDefaultValue = 0D;

    private double cpuFreespaceFusion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CpuFreespaceFusion {
      get { if ((_hasBits0 & 4) != 0) { return cpuFreespaceFusion_; } else { return CpuFreespaceFusionDefaultValue; } }
      set {
        _hasBits0 |= 4;
        cpuFreespaceFusion_ = value;
      }
    }
    /// <summary>Gets whether the "cpu_freespace_fusion" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCpuFreespaceFusion {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "cpu_freespace_fusion" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCpuFreespaceFusion() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "cpu_garcia_map_engine" field.</summary>
    public const int CpuGarciaMapEngineFieldNumber = 4;
    private readonly static double CpuGarciaMapEngineDefaultValue = 0D;

    private double cpuGarciaMapEngine_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CpuGarciaMapEngine {
      get { if ((_hasBits0 & 8) != 0) { return cpuGarciaMapEngine_; } else { return CpuGarciaMapEngineDefaultValue; } }
      set {
        _hasBits0 |= 8;
        cpuGarciaMapEngine_ = value;
      }
    }
    /// <summary>Gets whether the "cpu_garcia_map_engine" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCpuGarciaMapEngine {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "cpu_garcia_map_engine" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCpuGarciaMapEngine() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "cpu_garcia_map_local" field.</summary>
    public const int CpuGarciaMapLocalFieldNumber = 5;
    private readonly static double CpuGarciaMapLocalDefaultValue = 0D;

    private double cpuGarciaMapLocal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CpuGarciaMapLocal {
      get { if ((_hasBits0 & 16) != 0) { return cpuGarciaMapLocal_; } else { return CpuGarciaMapLocalDefaultValue; } }
      set {
        _hasBits0 |= 16;
        cpuGarciaMapLocal_ = value;
      }
    }
    /// <summary>Gets whether the "cpu_garcia_map_local" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCpuGarciaMapLocal {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "cpu_garcia_map_local" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCpuGarciaMapLocal() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "cpu_parking_slot_fusion" field.</summary>
    public const int CpuParkingSlotFusionFieldNumber = 6;
    private readonly static double CpuParkingSlotFusionDefaultValue = 0D;

    private double cpuParkingSlotFusion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CpuParkingSlotFusion {
      get { if ((_hasBits0 & 32) != 0) { return cpuParkingSlotFusion_; } else { return CpuParkingSlotFusionDefaultValue; } }
      set {
        _hasBits0 |= 32;
        cpuParkingSlotFusion_ = value;
      }
    }
    /// <summary>Gets whether the "cpu_parking_slot_fusion" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCpuParkingSlotFusion {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "cpu_parking_slot_fusion" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCpuParkingSlotFusion() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "cpu_ros_xviewer" field.</summary>
    public const int CpuRosXviewerFieldNumber = 7;
    private readonly static double CpuRosXviewerDefaultValue = 0D;

    private double cpuRosXviewer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CpuRosXviewer {
      get { if ((_hasBits0 & 64) != 0) { return cpuRosXviewer_; } else { return CpuRosXviewerDefaultValue; } }
      set {
        _hasBits0 |= 64;
        cpuRosXviewer_ = value;
      }
    }
    /// <summary>Gets whether the "cpu_ros_xviewer" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCpuRosXviewer {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "cpu_ros_xviewer" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCpuRosXviewer() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "cpu_camera_service" field.</summary>
    public const int CpuCameraServiceFieldNumber = 8;
    private readonly static double CpuCameraServiceDefaultValue = 0D;

    private double cpuCameraService_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CpuCameraService {
      get { if ((_hasBits0 & 128) != 0) { return cpuCameraService_; } else { return CpuCameraServiceDefaultValue; } }
      set {
        _hasBits0 |= 128;
        cpuCameraService_ = value;
      }
    }
    /// <summary>Gets whether the "cpu_camera_service" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCpuCameraService {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "cpu_camera_service" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCpuCameraService() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "mem_apa_planning" field.</summary>
    public const int MemApaPlanningFieldNumber = 9;
    private readonly static double MemApaPlanningDefaultValue = 0D;

    private double memApaPlanning_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MemApaPlanning {
      get { if ((_hasBits0 & 256) != 0) { return memApaPlanning_; } else { return MemApaPlanningDefaultValue; } }
      set {
        _hasBits0 |= 256;
        memApaPlanning_ = value;
      }
    }
    /// <summary>Gets whether the "mem_apa_planning" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMemApaPlanning {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "mem_apa_planning" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMemApaPlanning() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "mem_control" field.</summary>
    public const int MemControlFieldNumber = 10;
    private readonly static double MemControlDefaultValue = 0D;

    private double memControl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MemControl {
      get { if ((_hasBits0 & 512) != 0) { return memControl_; } else { return MemControlDefaultValue; } }
      set {
        _hasBits0 |= 512;
        memControl_ = value;
      }
    }
    /// <summary>Gets whether the "mem_control" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMemControl {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "mem_control" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMemControl() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "mem_freespace_fusion" field.</summary>
    public const int MemFreespaceFusionFieldNumber = 11;
    private readonly static double MemFreespaceFusionDefaultValue = 0D;

    private double memFreespaceFusion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MemFreespaceFusion {
      get { if ((_hasBits0 & 1024) != 0) { return memFreespaceFusion_; } else { return MemFreespaceFusionDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        memFreespaceFusion_ = value;
      }
    }
    /// <summary>Gets whether the "mem_freespace_fusion" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMemFreespaceFusion {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "mem_freespace_fusion" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMemFreespaceFusion() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "mem_garcia_map_engine" field.</summary>
    public const int MemGarciaMapEngineFieldNumber = 12;
    private readonly static double MemGarciaMapEngineDefaultValue = 0D;

    private double memGarciaMapEngine_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MemGarciaMapEngine {
      get { if ((_hasBits0 & 2048) != 0) { return memGarciaMapEngine_; } else { return MemGarciaMapEngineDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        memGarciaMapEngine_ = value;
      }
    }
    /// <summary>Gets whether the "mem_garcia_map_engine" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMemGarciaMapEngine {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "mem_garcia_map_engine" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMemGarciaMapEngine() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "mem_garcia_map_local" field.</summary>
    public const int MemGarciaMapLocalFieldNumber = 13;
    private readonly static double MemGarciaMapLocalDefaultValue = 0D;

    private double memGarciaMapLocal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MemGarciaMapLocal {
      get { if ((_hasBits0 & 4096) != 0) { return memGarciaMapLocal_; } else { return MemGarciaMapLocalDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        memGarciaMapLocal_ = value;
      }
    }
    /// <summary>Gets whether the "mem_garcia_map_local" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMemGarciaMapLocal {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "mem_garcia_map_local" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMemGarciaMapLocal() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "mem_parking_slot_fusion" field.</summary>
    public const int MemParkingSlotFusionFieldNumber = 14;
    private readonly static double MemParkingSlotFusionDefaultValue = 0D;

    private double memParkingSlotFusion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MemParkingSlotFusion {
      get { if ((_hasBits0 & 8192) != 0) { return memParkingSlotFusion_; } else { return MemParkingSlotFusionDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        memParkingSlotFusion_ = value;
      }
    }
    /// <summary>Gets whether the "mem_parking_slot_fusion" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMemParkingSlotFusion {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "mem_parking_slot_fusion" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMemParkingSlotFusion() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "mem_ros_xviewer" field.</summary>
    public const int MemRosXviewerFieldNumber = 15;
    private readonly static double MemRosXviewerDefaultValue = 0D;

    private double memRosXviewer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MemRosXviewer {
      get { if ((_hasBits0 & 16384) != 0) { return memRosXviewer_; } else { return MemRosXviewerDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        memRosXviewer_ = value;
      }
    }
    /// <summary>Gets whether the "mem_ros_xviewer" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMemRosXviewer {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "mem_ros_xviewer" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMemRosXviewer() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "mem_camera_service" field.</summary>
    public const int MemCameraServiceFieldNumber = 16;
    private readonly static double MemCameraServiceDefaultValue = 0D;

    private double memCameraService_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MemCameraService {
      get { if ((_hasBits0 & 32768) != 0) { return memCameraService_; } else { return MemCameraServiceDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        memCameraService_ = value;
      }
    }
    /// <summary>Gets whether the "mem_camera_service" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMemCameraService {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "mem_camera_service" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMemCameraService() {
      _hasBits0 &= ~32768;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Monitor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Monitor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CpuApaPlanning, other.CpuApaPlanning)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CpuControl, other.CpuControl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CpuFreespaceFusion, other.CpuFreespaceFusion)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CpuGarciaMapEngine, other.CpuGarciaMapEngine)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CpuGarciaMapLocal, other.CpuGarciaMapLocal)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CpuParkingSlotFusion, other.CpuParkingSlotFusion)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CpuRosXviewer, other.CpuRosXviewer)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CpuCameraService, other.CpuCameraService)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MemApaPlanning, other.MemApaPlanning)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MemControl, other.MemControl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MemFreespaceFusion, other.MemFreespaceFusion)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MemGarciaMapEngine, other.MemGarciaMapEngine)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MemGarciaMapLocal, other.MemGarciaMapLocal)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MemParkingSlotFusion, other.MemParkingSlotFusion)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MemRosXviewer, other.MemRosXviewer)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MemCameraService, other.MemCameraService)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCpuApaPlanning) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CpuApaPlanning);
      if (HasCpuControl) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CpuControl);
      if (HasCpuFreespaceFusion) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CpuFreespaceFusion);
      if (HasCpuGarciaMapEngine) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CpuGarciaMapEngine);
      if (HasCpuGarciaMapLocal) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CpuGarciaMapLocal);
      if (HasCpuParkingSlotFusion) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CpuParkingSlotFusion);
      if (HasCpuRosXviewer) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CpuRosXviewer);
      if (HasCpuCameraService) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CpuCameraService);
      if (HasMemApaPlanning) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MemApaPlanning);
      if (HasMemControl) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MemControl);
      if (HasMemFreespaceFusion) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MemFreespaceFusion);
      if (HasMemGarciaMapEngine) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MemGarciaMapEngine);
      if (HasMemGarciaMapLocal) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MemGarciaMapLocal);
      if (HasMemParkingSlotFusion) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MemParkingSlotFusion);
      if (HasMemRosXviewer) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MemRosXviewer);
      if (HasMemCameraService) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MemCameraService);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasCpuApaPlanning) {
        output.WriteRawTag(9);
        output.WriteDouble(CpuApaPlanning);
      }
      if (HasCpuControl) {
        output.WriteRawTag(17);
        output.WriteDouble(CpuControl);
      }
      if (HasCpuFreespaceFusion) {
        output.WriteRawTag(25);
        output.WriteDouble(CpuFreespaceFusion);
      }
      if (HasCpuGarciaMapEngine) {
        output.WriteRawTag(33);
        output.WriteDouble(CpuGarciaMapEngine);
      }
      if (HasCpuGarciaMapLocal) {
        output.WriteRawTag(41);
        output.WriteDouble(CpuGarciaMapLocal);
      }
      if (HasCpuParkingSlotFusion) {
        output.WriteRawTag(49);
        output.WriteDouble(CpuParkingSlotFusion);
      }
      if (HasCpuRosXviewer) {
        output.WriteRawTag(57);
        output.WriteDouble(CpuRosXviewer);
      }
      if (HasCpuCameraService) {
        output.WriteRawTag(65);
        output.WriteDouble(CpuCameraService);
      }
      if (HasMemApaPlanning) {
        output.WriteRawTag(73);
        output.WriteDouble(MemApaPlanning);
      }
      if (HasMemControl) {
        output.WriteRawTag(81);
        output.WriteDouble(MemControl);
      }
      if (HasMemFreespaceFusion) {
        output.WriteRawTag(89);
        output.WriteDouble(MemFreespaceFusion);
      }
      if (HasMemGarciaMapEngine) {
        output.WriteRawTag(97);
        output.WriteDouble(MemGarciaMapEngine);
      }
      if (HasMemGarciaMapLocal) {
        output.WriteRawTag(105);
        output.WriteDouble(MemGarciaMapLocal);
      }
      if (HasMemParkingSlotFusion) {
        output.WriteRawTag(113);
        output.WriteDouble(MemParkingSlotFusion);
      }
      if (HasMemRosXviewer) {
        output.WriteRawTag(121);
        output.WriteDouble(MemRosXviewer);
      }
      if (HasMemCameraService) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(MemCameraService);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCpuApaPlanning) {
        size += 1 + 8;
      }
      if (HasCpuControl) {
        size += 1 + 8;
      }
      if (HasCpuFreespaceFusion) {
        size += 1 + 8;
      }
      if (HasCpuGarciaMapEngine) {
        size += 1 + 8;
      }
      if (HasCpuGarciaMapLocal) {
        size += 1 + 8;
      }
      if (HasCpuParkingSlotFusion) {
        size += 1 + 8;
      }
      if (HasCpuRosXviewer) {
        size += 1 + 8;
      }
      if (HasCpuCameraService) {
        size += 1 + 8;
      }
      if (HasMemApaPlanning) {
        size += 1 + 8;
      }
      if (HasMemControl) {
        size += 1 + 8;
      }
      if (HasMemFreespaceFusion) {
        size += 1 + 8;
      }
      if (HasMemGarciaMapEngine) {
        size += 1 + 8;
      }
      if (HasMemGarciaMapLocal) {
        size += 1 + 8;
      }
      if (HasMemParkingSlotFusion) {
        size += 1 + 8;
      }
      if (HasMemRosXviewer) {
        size += 1 + 8;
      }
      if (HasMemCameraService) {
        size += 2 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Monitor other) {
      if (other == null) {
        return;
      }
      if (other.HasCpuApaPlanning) {
        CpuApaPlanning = other.CpuApaPlanning;
      }
      if (other.HasCpuControl) {
        CpuControl = other.CpuControl;
      }
      if (other.HasCpuFreespaceFusion) {
        CpuFreespaceFusion = other.CpuFreespaceFusion;
      }
      if (other.HasCpuGarciaMapEngine) {
        CpuGarciaMapEngine = other.CpuGarciaMapEngine;
      }
      if (other.HasCpuGarciaMapLocal) {
        CpuGarciaMapLocal = other.CpuGarciaMapLocal;
      }
      if (other.HasCpuParkingSlotFusion) {
        CpuParkingSlotFusion = other.CpuParkingSlotFusion;
      }
      if (other.HasCpuRosXviewer) {
        CpuRosXviewer = other.CpuRosXviewer;
      }
      if (other.HasCpuCameraService) {
        CpuCameraService = other.CpuCameraService;
      }
      if (other.HasMemApaPlanning) {
        MemApaPlanning = other.MemApaPlanning;
      }
      if (other.HasMemControl) {
        MemControl = other.MemControl;
      }
      if (other.HasMemFreespaceFusion) {
        MemFreespaceFusion = other.MemFreespaceFusion;
      }
      if (other.HasMemGarciaMapEngine) {
        MemGarciaMapEngine = other.MemGarciaMapEngine;
      }
      if (other.HasMemGarciaMapLocal) {
        MemGarciaMapLocal = other.MemGarciaMapLocal;
      }
      if (other.HasMemParkingSlotFusion) {
        MemParkingSlotFusion = other.MemParkingSlotFusion;
      }
      if (other.HasMemRosXviewer) {
        MemRosXviewer = other.MemRosXviewer;
      }
      if (other.HasMemCameraService) {
        MemCameraService = other.MemCameraService;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            CpuApaPlanning = input.ReadDouble();
            break;
          }
          case 17: {
            CpuControl = input.ReadDouble();
            break;
          }
          case 25: {
            CpuFreespaceFusion = input.ReadDouble();
            break;
          }
          case 33: {
            CpuGarciaMapEngine = input.ReadDouble();
            break;
          }
          case 41: {
            CpuGarciaMapLocal = input.ReadDouble();
            break;
          }
          case 49: {
            CpuParkingSlotFusion = input.ReadDouble();
            break;
          }
          case 57: {
            CpuRosXviewer = input.ReadDouble();
            break;
          }
          case 65: {
            CpuCameraService = input.ReadDouble();
            break;
          }
          case 73: {
            MemApaPlanning = input.ReadDouble();
            break;
          }
          case 81: {
            MemControl = input.ReadDouble();
            break;
          }
          case 89: {
            MemFreespaceFusion = input.ReadDouble();
            break;
          }
          case 97: {
            MemGarciaMapEngine = input.ReadDouble();
            break;
          }
          case 105: {
            MemGarciaMapLocal = input.ReadDouble();
            break;
          }
          case 113: {
            MemParkingSlotFusion = input.ReadDouble();
            break;
          }
          case 121: {
            MemRosXviewer = input.ReadDouble();
            break;
          }
          case 129: {
            MemCameraService = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LifecycleState : pb::IMessage<LifecycleState> {
    private static readonly pb::MessageParser<LifecycleState> _parser = new pb::MessageParser<LifecycleState>(() => new LifecycleState());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LifecycleState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.EngineeringReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LifecycleState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LifecycleState(LifecycleState other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      label_ = other.label_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LifecycleState Clone() {
      return new LifecycleState(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static int IdDefaultValue = 0;

    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 2;
    private readonly static string LabelDefaultValue = "";

    private string label_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_ ?? LabelDefaultValue; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "label" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLabel {
      get { return label_ != null; }
    }
    /// <summary>Clears the value of the "label" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLabel() {
      label_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LifecycleState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LifecycleState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Label != other.Label) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasLabel) hash ^= Label.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (HasLabel) {
        output.WriteRawTag(18);
        output.WriteString(Label);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (HasLabel) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LifecycleState other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasLabel) {
        Label = other.Label;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Label = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransitionEvent : pb::IMessage<TransitionEvent> {
    private static readonly pb::MessageParser<TransitionEvent> _parser = new pb::MessageParser<TransitionEvent>(() => new TransitionEvent());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransitionEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.EngineeringReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransitionEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransitionEvent(TransitionEvent other) : this() {
      _hasBits0 = other._hasBits0;
      nodeName_ = other.nodeName_;
      seq_ = other.seq_;
      startState_ = other.startState_ != null ? other.startState_.Clone() : null;
      goalState_ = other.goalState_ != null ? other.goalState_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransitionEvent Clone() {
      return new TransitionEvent(this);
    }

    /// <summary>Field number for the "node_name" field.</summary>
    public const int NodeNameFieldNumber = 1;
    private readonly static string NodeNameDefaultValue = "";

    private string nodeName_;
    /// <summary>
    /// 节点名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodeName {
      get { return nodeName_ ?? NodeNameDefaultValue; }
      set {
        nodeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "node_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNodeName {
      get { return nodeName_ != null; }
    }
    /// <summary>Clears the value of the "node_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNodeName() {
      nodeName_ = null;
    }

    /// <summary>Field number for the "seq" field.</summary>
    public const int SeqFieldNumber = 2;
    private readonly static uint SeqDefaultValue = 0;

    private uint seq_;
    /// <summary>
    /// 帧号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Seq {
      get { if ((_hasBits0 & 1) != 0) { return seq_; } else { return SeqDefaultValue; } }
      set {
        _hasBits0 |= 1;
        seq_ = value;
      }
    }
    /// <summary>Gets whether the "seq" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSeq {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "seq" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSeq() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "start_state" field.</summary>
    public const int StartStateFieldNumber = 3;
    private global::Xviewer.LifecycleState startState_;
    /// <summary>
    /// 起始状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.LifecycleState StartState {
      get { return startState_; }
      set {
        startState_ = value;
      }
    }

    /// <summary>Field number for the "goal_state" field.</summary>
    public const int GoalStateFieldNumber = 4;
    private global::Xviewer.LifecycleState goalState_;
    /// <summary>
    /// 目标状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.LifecycleState GoalState {
      get { return goalState_; }
      set {
        goalState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransitionEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransitionEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeName != other.NodeName) return false;
      if (Seq != other.Seq) return false;
      if (!object.Equals(StartState, other.StartState)) return false;
      if (!object.Equals(GoalState, other.GoalState)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasNodeName) hash ^= NodeName.GetHashCode();
      if (HasSeq) hash ^= Seq.GetHashCode();
      if (startState_ != null) hash ^= StartState.GetHashCode();
      if (goalState_ != null) hash ^= GoalState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasNodeName) {
        output.WriteRawTag(10);
        output.WriteString(NodeName);
      }
      if (HasSeq) {
        output.WriteRawTag(16);
        output.WriteUInt32(Seq);
      }
      if (startState_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(StartState);
      }
      if (goalState_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(GoalState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasNodeName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeName);
      }
      if (HasSeq) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
      }
      if (startState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartState);
      }
      if (goalState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GoalState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransitionEvent other) {
      if (other == null) {
        return;
      }
      if (other.HasNodeName) {
        NodeName = other.NodeName;
      }
      if (other.HasSeq) {
        Seq = other.Seq;
      }
      if (other.startState_ != null) {
        if (startState_ == null) {
          StartState = new global::Xviewer.LifecycleState();
        }
        StartState.MergeFrom(other.StartState);
      }
      if (other.goalState_ != null) {
        if (goalState_ == null) {
          GoalState = new global::Xviewer.LifecycleState();
        }
        GoalState.MergeFrom(other.GoalState);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NodeName = input.ReadString();
            break;
          }
          case 16: {
            Seq = input.ReadUInt32();
            break;
          }
          case 26: {
            if (startState_ == null) {
              StartState = new global::Xviewer.LifecycleState();
            }
            input.ReadMessage(StartState);
            break;
          }
          case 34: {
            if (goalState_ == null) {
              GoalState = new global::Xviewer.LifecycleState();
            }
            input.ReadMessage(GoalState);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Guardian : pb::IMessage<Guardian> {
    private static readonly pb::MessageParser<Guardian> _parser = new pb::MessageParser<Guardian>(() => new Guardian());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Guardian> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.EngineeringReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Guardian() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Guardian(Guardian other) : this() {
      _hasBits0 = other._hasBits0;
      guardianInstruct_ = other.guardianInstruct_;
      guardianInstructAvailable_ = other.guardianInstructAvailable_;
      currentStatus_ = other.currentStatus_;
      transitionEventInfo_ = other.transitionEventInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Guardian Clone() {
      return new Guardian(this);
    }

    /// <summary>Field number for the "guardian_instruct" field.</summary>
    public const int GuardianInstructFieldNumber = 1;
    private readonly static int GuardianInstructDefaultValue = 0;

    private int guardianInstruct_;
    /// <summary>
    /// 状态机，当前状态. 1 MANUAL, 2 STANDBY, 3 ERROR, 4 APA_INIT, 5 APA_ACTIVE,  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuardianInstruct {
      get { if ((_hasBits0 & 1) != 0) { return guardianInstruct_; } else { return GuardianInstructDefaultValue; } }
      set {
        _hasBits0 |= 1;
        guardianInstruct_ = value;
      }
    }
    /// <summary>Gets whether the "guardian_instruct" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGuardianInstruct {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "guardian_instruct" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGuardianInstruct() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "guardian_instruct_available" field.</summary>
    public const int GuardianInstructAvailableFieldNumber = 2;
    private readonly static bool GuardianInstructAvailableDefaultValue = false;

    private bool guardianInstructAvailable_;
    /// <summary>
    /// 6 PILOT_INIT, 7 PILOT_ACTIVE, 8 PILOT_APA_READY, 9 PILOT_PRE_APA 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GuardianInstructAvailable {
      get { if ((_hasBits0 & 2) != 0) { return guardianInstructAvailable_; } else { return GuardianInstructAvailableDefaultValue; } }
      set {
        _hasBits0 |= 2;
        guardianInstructAvailable_ = value;
      }
    }
    /// <summary>Gets whether the "guardian_instruct_available" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGuardianInstructAvailable {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "guardian_instruct_available" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGuardianInstructAvailable() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "current_status" field.</summary>
    public const int CurrentStatusFieldNumber = 3;
    private readonly static int CurrentStatusDefaultValue = 0;

    private int currentStatus_;
    /// <summary>
    /// HMI 自定义当前状态, 0 行车 (默认), 1 泊车
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentStatus {
      get { if ((_hasBits0 & 4) != 0) { return currentStatus_; } else { return CurrentStatusDefaultValue; } }
      set {
        _hasBits0 |= 4;
        currentStatus_ = value;
      }
    }
    /// <summary>Gets whether the "current_status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCurrentStatus {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "current_status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCurrentStatus() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "transition_event_info" field.</summary>
    public const int TransitionEventInfoFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Xviewer.TransitionEvent> _repeated_transitionEventInfo_codec
        = pb::FieldCodec.ForMessage(34, global::Xviewer.TransitionEvent.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.TransitionEvent> transitionEventInfo_ = new pbc::RepeatedField<global::Xviewer.TransitionEvent>();
    /// <summary>
    /// lifecycle_node生命周期切换事件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.TransitionEvent> TransitionEventInfo {
      get { return transitionEventInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Guardian);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Guardian other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GuardianInstruct != other.GuardianInstruct) return false;
      if (GuardianInstructAvailable != other.GuardianInstructAvailable) return false;
      if (CurrentStatus != other.CurrentStatus) return false;
      if(!transitionEventInfo_.Equals(other.transitionEventInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGuardianInstruct) hash ^= GuardianInstruct.GetHashCode();
      if (HasGuardianInstructAvailable) hash ^= GuardianInstructAvailable.GetHashCode();
      if (HasCurrentStatus) hash ^= CurrentStatus.GetHashCode();
      hash ^= transitionEventInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasGuardianInstruct) {
        output.WriteRawTag(8);
        output.WriteInt32(GuardianInstruct);
      }
      if (HasGuardianInstructAvailable) {
        output.WriteRawTag(16);
        output.WriteBool(GuardianInstructAvailable);
      }
      if (HasCurrentStatus) {
        output.WriteRawTag(24);
        output.WriteInt32(CurrentStatus);
      }
      transitionEventInfo_.WriteTo(output, _repeated_transitionEventInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasGuardianInstruct) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuardianInstruct);
      }
      if (HasGuardianInstructAvailable) {
        size += 1 + 1;
      }
      if (HasCurrentStatus) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentStatus);
      }
      size += transitionEventInfo_.CalculateSize(_repeated_transitionEventInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Guardian other) {
      if (other == null) {
        return;
      }
      if (other.HasGuardianInstruct) {
        GuardianInstruct = other.GuardianInstruct;
      }
      if (other.HasGuardianInstructAvailable) {
        GuardianInstructAvailable = other.GuardianInstructAvailable;
      }
      if (other.HasCurrentStatus) {
        CurrentStatus = other.CurrentStatus;
      }
      transitionEventInfo_.Add(other.transitionEventInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GuardianInstruct = input.ReadInt32();
            break;
          }
          case 16: {
            GuardianInstructAvailable = input.ReadBool();
            break;
          }
          case 24: {
            CurrentStatus = input.ReadInt32();
            break;
          }
          case 34: {
            transitionEventInfo_.AddEntriesFrom(input, _repeated_transitionEventInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Adcu1 : pb::IMessage<Adcu1> {
    private static readonly pb::MessageParser<Adcu1> _parser = new pb::MessageParser<Adcu1>(() => new Adcu1());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Adcu1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.EngineeringReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Adcu1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Adcu1(Adcu1 other) : this() {
      _hasBits0 = other._hasBits0;
      adcuBrakeReq_ = other.adcuBrakeReq_;
      adcuAutoTrqWhlReq_ = other.adcuAutoTrqWhlReq_;
      adcuLngCtrlReq_ = other.adcuLngCtrlReq_;
      adcuGearLvlReq_ = other.adcuGearLvlReq_;
      adcuGearLvlReqVd_ = other.adcuGearLvlReqVd_;
      adcuBrakeVd_ = other.adcuBrakeVd_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Adcu1 Clone() {
      return new Adcu1(this);
    }

    /// <summary>Field number for the "adcu_brake_req" field.</summary>
    public const int AdcuBrakeReqFieldNumber = 1;
    private readonly static double AdcuBrakeReqDefaultValue = 0D;

    private double adcuBrakeReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AdcuBrakeReq {
      get { if ((_hasBits0 & 1) != 0) { return adcuBrakeReq_; } else { return AdcuBrakeReqDefaultValue; } }
      set {
        _hasBits0 |= 1;
        adcuBrakeReq_ = value;
      }
    }
    /// <summary>Gets whether the "adcu_brake_req" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAdcuBrakeReq {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "adcu_brake_req" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAdcuBrakeReq() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "adcu_auto_trq_whl_req" field.</summary>
    public const int AdcuAutoTrqWhlReqFieldNumber = 2;
    private readonly static double AdcuAutoTrqWhlReqDefaultValue = 0D;

    private double adcuAutoTrqWhlReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AdcuAutoTrqWhlReq {
      get { if ((_hasBits0 & 2) != 0) { return adcuAutoTrqWhlReq_; } else { return AdcuAutoTrqWhlReqDefaultValue; } }
      set {
        _hasBits0 |= 2;
        adcuAutoTrqWhlReq_ = value;
      }
    }
    /// <summary>Gets whether the "adcu_auto_trq_whl_req" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAdcuAutoTrqWhlReq {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "adcu_auto_trq_whl_req" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAdcuAutoTrqWhlReq() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "adcu_lng_ctrl_req" field.</summary>
    public const int AdcuLngCtrlReqFieldNumber = 3;
    private readonly static uint AdcuLngCtrlReqDefaultValue = 0;

    private uint adcuLngCtrlReq_;
    /// <summary>
    /// 0 MANUAL, 1 RESERVED_1, 2 AUTO, 3 RESERVED_3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AdcuLngCtrlReq {
      get { if ((_hasBits0 & 4) != 0) { return adcuLngCtrlReq_; } else { return AdcuLngCtrlReqDefaultValue; } }
      set {
        _hasBits0 |= 4;
        adcuLngCtrlReq_ = value;
      }
    }
    /// <summary>Gets whether the "adcu_lng_ctrl_req" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAdcuLngCtrlReq {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "adcu_lng_ctrl_req" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAdcuLngCtrlReq() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "adcu_gear_lvl_req" field.</summary>
    public const int AdcuGearLvlReqFieldNumber = 4;
    private readonly static uint AdcuGearLvlReqDefaultValue = 0;

    private uint adcuGearLvlReq_;
    /// <summary>
    /// 0 GEAR_NO_REQUEST
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AdcuGearLvlReq {
      get { if ((_hasBits0 & 8) != 0) { return adcuGearLvlReq_; } else { return AdcuGearLvlReqDefaultValue; } }
      set {
        _hasBits0 |= 8;
        adcuGearLvlReq_ = value;
      }
    }
    /// <summary>Gets whether the "adcu_gear_lvl_req" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAdcuGearLvlReq {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "adcu_gear_lvl_req" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAdcuGearLvlReq() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "adcu_gear_lvl_req_vd" field.</summary>
    public const int AdcuGearLvlReqVdFieldNumber = 5;
    private readonly static bool AdcuGearLvlReqVdDefaultValue = false;

    private bool adcuGearLvlReqVd_;
    /// <summary>
    /// 1 GEAR_REQUEST_PARK
    /// 2 GEAR_REQUEST_REVERSE, 
    /// 3 GEAR_REQUEST_NEUTRAL,
    /// 4 GEAR_REQUEST_DRIVE
    /// 5~7  GEAR_REQUEST_RESERVED
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AdcuGearLvlReqVd {
      get { if ((_hasBits0 & 16) != 0) { return adcuGearLvlReqVd_; } else { return AdcuGearLvlReqVdDefaultValue; } }
      set {
        _hasBits0 |= 16;
        adcuGearLvlReqVd_ = value;
      }
    }
    /// <summary>Gets whether the "adcu_gear_lvl_req_vd" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAdcuGearLvlReqVd {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "adcu_gear_lvl_req_vd" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAdcuGearLvlReqVd() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "adcu_brake_vd" field.</summary>
    public const int AdcuBrakeVdFieldNumber = 6;
    private readonly static bool AdcuBrakeVdDefaultValue = false;

    private bool adcuBrakeVd_;
    /// <summary>
    /// 0 ACC_BRAKE, 1 AEB_BRAKE
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AdcuBrakeVd {
      get { if ((_hasBits0 & 32) != 0) { return adcuBrakeVd_; } else { return AdcuBrakeVdDefaultValue; } }
      set {
        _hasBits0 |= 32;
        adcuBrakeVd_ = value;
      }
    }
    /// <summary>Gets whether the "adcu_brake_vd" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAdcuBrakeVd {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "adcu_brake_vd" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAdcuBrakeVd() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Adcu1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Adcu1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AdcuBrakeReq, other.AdcuBrakeReq)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AdcuAutoTrqWhlReq, other.AdcuAutoTrqWhlReq)) return false;
      if (AdcuLngCtrlReq != other.AdcuLngCtrlReq) return false;
      if (AdcuGearLvlReq != other.AdcuGearLvlReq) return false;
      if (AdcuGearLvlReqVd != other.AdcuGearLvlReqVd) return false;
      if (AdcuBrakeVd != other.AdcuBrakeVd) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAdcuBrakeReq) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AdcuBrakeReq);
      if (HasAdcuAutoTrqWhlReq) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AdcuAutoTrqWhlReq);
      if (HasAdcuLngCtrlReq) hash ^= AdcuLngCtrlReq.GetHashCode();
      if (HasAdcuGearLvlReq) hash ^= AdcuGearLvlReq.GetHashCode();
      if (HasAdcuGearLvlReqVd) hash ^= AdcuGearLvlReqVd.GetHashCode();
      if (HasAdcuBrakeVd) hash ^= AdcuBrakeVd.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasAdcuBrakeReq) {
        output.WriteRawTag(9);
        output.WriteDouble(AdcuBrakeReq);
      }
      if (HasAdcuAutoTrqWhlReq) {
        output.WriteRawTag(17);
        output.WriteDouble(AdcuAutoTrqWhlReq);
      }
      if (HasAdcuLngCtrlReq) {
        output.WriteRawTag(24);
        output.WriteUInt32(AdcuLngCtrlReq);
      }
      if (HasAdcuGearLvlReq) {
        output.WriteRawTag(32);
        output.WriteUInt32(AdcuGearLvlReq);
      }
      if (HasAdcuGearLvlReqVd) {
        output.WriteRawTag(40);
        output.WriteBool(AdcuGearLvlReqVd);
      }
      if (HasAdcuBrakeVd) {
        output.WriteRawTag(48);
        output.WriteBool(AdcuBrakeVd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAdcuBrakeReq) {
        size += 1 + 8;
      }
      if (HasAdcuAutoTrqWhlReq) {
        size += 1 + 8;
      }
      if (HasAdcuLngCtrlReq) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AdcuLngCtrlReq);
      }
      if (HasAdcuGearLvlReq) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AdcuGearLvlReq);
      }
      if (HasAdcuGearLvlReqVd) {
        size += 1 + 1;
      }
      if (HasAdcuBrakeVd) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Adcu1 other) {
      if (other == null) {
        return;
      }
      if (other.HasAdcuBrakeReq) {
        AdcuBrakeReq = other.AdcuBrakeReq;
      }
      if (other.HasAdcuAutoTrqWhlReq) {
        AdcuAutoTrqWhlReq = other.AdcuAutoTrqWhlReq;
      }
      if (other.HasAdcuLngCtrlReq) {
        AdcuLngCtrlReq = other.AdcuLngCtrlReq;
      }
      if (other.HasAdcuGearLvlReq) {
        AdcuGearLvlReq = other.AdcuGearLvlReq;
      }
      if (other.HasAdcuGearLvlReqVd) {
        AdcuGearLvlReqVd = other.AdcuGearLvlReqVd;
      }
      if (other.HasAdcuBrakeVd) {
        AdcuBrakeVd = other.AdcuBrakeVd;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            AdcuBrakeReq = input.ReadDouble();
            break;
          }
          case 17: {
            AdcuAutoTrqWhlReq = input.ReadDouble();
            break;
          }
          case 24: {
            AdcuLngCtrlReq = input.ReadUInt32();
            break;
          }
          case 32: {
            AdcuGearLvlReq = input.ReadUInt32();
            break;
          }
          case 40: {
            AdcuGearLvlReqVd = input.ReadBool();
            break;
          }
          case 48: {
            AdcuBrakeVd = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Adcu2 : pb::IMessage<Adcu2> {
    private static readonly pb::MessageParser<Adcu2> _parser = new pb::MessageParser<Adcu2>(() => new Adcu2());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Adcu2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.EngineeringReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Adcu2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Adcu2(Adcu2 other) : this() {
      _hasBits0 = other._hasBits0;
      adcuSteerAngReq_ = other.adcuSteerAngReq_;
      adcuBrakeReqAeb_ = other.adcuBrakeReqAeb_;
      adcuSteerWhlTorqReq_ = other.adcuSteerWhlTorqReq_;
      adcuLatCtrlReq_ = other.adcuLatCtrlReq_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Adcu2 Clone() {
      return new Adcu2(this);
    }

    /// <summary>Field number for the "adcu_steer_ang_req" field.</summary>
    public const int AdcuSteerAngReqFieldNumber = 2;
    private readonly static double AdcuSteerAngReqDefaultValue = 0D;

    private double adcuSteerAngReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AdcuSteerAngReq {
      get { if ((_hasBits0 & 1) != 0) { return adcuSteerAngReq_; } else { return AdcuSteerAngReqDefaultValue; } }
      set {
        _hasBits0 |= 1;
        adcuSteerAngReq_ = value;
      }
    }
    /// <summary>Gets whether the "adcu_steer_ang_req" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAdcuSteerAngReq {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "adcu_steer_ang_req" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAdcuSteerAngReq() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "adcu_brake_req_aeb" field.</summary>
    public const int AdcuBrakeReqAebFieldNumber = 3;
    private readonly static double AdcuBrakeReqAebDefaultValue = 0D;

    private double adcuBrakeReqAeb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AdcuBrakeReqAeb {
      get { if ((_hasBits0 & 2) != 0) { return adcuBrakeReqAeb_; } else { return AdcuBrakeReqAebDefaultValue; } }
      set {
        _hasBits0 |= 2;
        adcuBrakeReqAeb_ = value;
      }
    }
    /// <summary>Gets whether the "adcu_brake_req_aeb" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAdcuBrakeReqAeb {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "adcu_brake_req_aeb" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAdcuBrakeReqAeb() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "adcu_steer_whl_torq_req" field.</summary>
    public const int AdcuSteerWhlTorqReqFieldNumber = 4;
    private readonly static double AdcuSteerWhlTorqReqDefaultValue = 0D;

    private double adcuSteerWhlTorqReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AdcuSteerWhlTorqReq {
      get { if ((_hasBits0 & 4) != 0) { return adcuSteerWhlTorqReq_; } else { return AdcuSteerWhlTorqReqDefaultValue; } }
      set {
        _hasBits0 |= 4;
        adcuSteerWhlTorqReq_ = value;
      }
    }
    /// <summary>Gets whether the "adcu_steer_whl_torq_req" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAdcuSteerWhlTorqReq {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "adcu_steer_whl_torq_req" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAdcuSteerWhlTorqReq() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "adcu_lat_ctrl_req" field.</summary>
    public const int AdcuLatCtrlReqFieldNumber = 5;
    private readonly static uint AdcuLatCtrlReqDefaultValue = 0;

    private uint adcuLatCtrlReq_;
    /// <summary>
    /// 0 MANUAL, 1 RESERVED_1, 2 AUTO, 3 RESERVED_3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AdcuLatCtrlReq {
      get { if ((_hasBits0 & 8) != 0) { return adcuLatCtrlReq_; } else { return AdcuLatCtrlReqDefaultValue; } }
      set {
        _hasBits0 |= 8;
        adcuLatCtrlReq_ = value;
      }
    }
    /// <summary>Gets whether the "adcu_lat_ctrl_req" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAdcuLatCtrlReq {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "adcu_lat_ctrl_req" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAdcuLatCtrlReq() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Adcu2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Adcu2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AdcuSteerAngReq, other.AdcuSteerAngReq)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AdcuBrakeReqAeb, other.AdcuBrakeReqAeb)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AdcuSteerWhlTorqReq, other.AdcuSteerWhlTorqReq)) return false;
      if (AdcuLatCtrlReq != other.AdcuLatCtrlReq) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAdcuSteerAngReq) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AdcuSteerAngReq);
      if (HasAdcuBrakeReqAeb) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AdcuBrakeReqAeb);
      if (HasAdcuSteerWhlTorqReq) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AdcuSteerWhlTorqReq);
      if (HasAdcuLatCtrlReq) hash ^= AdcuLatCtrlReq.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasAdcuSteerAngReq) {
        output.WriteRawTag(17);
        output.WriteDouble(AdcuSteerAngReq);
      }
      if (HasAdcuBrakeReqAeb) {
        output.WriteRawTag(25);
        output.WriteDouble(AdcuBrakeReqAeb);
      }
      if (HasAdcuSteerWhlTorqReq) {
        output.WriteRawTag(33);
        output.WriteDouble(AdcuSteerWhlTorqReq);
      }
      if (HasAdcuLatCtrlReq) {
        output.WriteRawTag(40);
        output.WriteUInt32(AdcuLatCtrlReq);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAdcuSteerAngReq) {
        size += 1 + 8;
      }
      if (HasAdcuBrakeReqAeb) {
        size += 1 + 8;
      }
      if (HasAdcuSteerWhlTorqReq) {
        size += 1 + 8;
      }
      if (HasAdcuLatCtrlReq) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AdcuLatCtrlReq);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Adcu2 other) {
      if (other == null) {
        return;
      }
      if (other.HasAdcuSteerAngReq) {
        AdcuSteerAngReq = other.AdcuSteerAngReq;
      }
      if (other.HasAdcuBrakeReqAeb) {
        AdcuBrakeReqAeb = other.AdcuBrakeReqAeb;
      }
      if (other.HasAdcuSteerWhlTorqReq) {
        AdcuSteerWhlTorqReq = other.AdcuSteerWhlTorqReq;
      }
      if (other.HasAdcuLatCtrlReq) {
        AdcuLatCtrlReq = other.AdcuLatCtrlReq;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 17: {
            AdcuSteerAngReq = input.ReadDouble();
            break;
          }
          case 25: {
            AdcuBrakeReqAeb = input.ReadDouble();
            break;
          }
          case 33: {
            AdcuSteerWhlTorqReq = input.ReadDouble();
            break;
          }
          case 40: {
            AdcuLatCtrlReq = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class XControlCommand : pb::IMessage<XControlCommand> {
    private static readonly pb::MessageParser<XControlCommand> _parser = new pb::MessageParser<XControlCommand>(() => new XControlCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<XControlCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.EngineeringReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XControlCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XControlCommand(XControlCommand other) : this() {
      adcu1_ = other.adcu1_ != null ? other.adcu1_.Clone() : null;
      adcu2_ = other.adcu2_ != null ? other.adcu2_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XControlCommand Clone() {
      return new XControlCommand(this);
    }

    /// <summary>Field number for the "adcu1" field.</summary>
    public const int Adcu1FieldNumber = 1;
    private global::Xviewer.Adcu1 adcu1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Adcu1 Adcu1 {
      get { return adcu1_; }
      set {
        adcu1_ = value;
      }
    }

    /// <summary>Field number for the "adcu2" field.</summary>
    public const int Adcu2FieldNumber = 2;
    private global::Xviewer.Adcu2 adcu2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Adcu2 Adcu2 {
      get { return adcu2_; }
      set {
        adcu2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as XControlCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(XControlCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Adcu1, other.Adcu1)) return false;
      if (!object.Equals(Adcu2, other.Adcu2)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (adcu1_ != null) hash ^= Adcu1.GetHashCode();
      if (adcu2_ != null) hash ^= Adcu2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (adcu1_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Adcu1);
      }
      if (adcu2_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Adcu2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (adcu1_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Adcu1);
      }
      if (adcu2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Adcu2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(XControlCommand other) {
      if (other == null) {
        return;
      }
      if (other.adcu1_ != null) {
        if (adcu1_ == null) {
          Adcu1 = new global::Xviewer.Adcu1();
        }
        Adcu1.MergeFrom(other.Adcu1);
      }
      if (other.adcu2_ != null) {
        if (adcu2_ == null) {
          Adcu2 = new global::Xviewer.Adcu2();
        }
        Adcu2.MergeFrom(other.Adcu2);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (adcu1_ == null) {
              Adcu1 = new global::Xviewer.Adcu1();
            }
            input.ReadMessage(Adcu1);
            break;
          }
          case 18: {
            if (adcu2_ == null) {
              Adcu2 = new global::Xviewer.Adcu2();
            }
            input.ReadMessage(Adcu2);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Scu1 : pb::IMessage<Scu1> {
    private static readonly pb::MessageParser<Scu1> _parser = new pb::MessageParser<Scu1>(() => new Scu1());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Scu1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.EngineeringReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scu1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scu1(Scu1 other) : this() {
      _hasBits0 = other._hasBits0;
      bcsVdcFaultStG_ = other.bcsVdcFaultStG_;
      bcsTcsActiveStG_ = other.bcsTcsActiveStG_;
      bcsTcsFaultStG_ = other.bcsTcsFaultStG_;
      bcsEbdActiveStG_ = other.bcsEbdActiveStG_;
      bcsEbdFaultStG_ = other.bcsEbdFaultStG_;
      bcsAbsFaultStG_ = other.bcsAbsFaultStG_;
      bcsAbsActiveStG_ = other.bcsAbsActiveStG_;
      bcsVehSpdVdG_ = other.bcsVehSpdVdG_;
      bcsVehSpdG_ = other.bcsVehSpdG_;
      bcsVdcActiveStG_ = other.bcsVdcActiveStG_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scu1 Clone() {
      return new Scu1(this);
    }

    /// <summary>Field number for the "bcs_vdc_fault_st_g" field.</summary>
    public const int BcsVdcFaultStGFieldNumber = 1;
    private readonly static bool BcsVdcFaultStGDefaultValue = false;

    private bool bcsVdcFaultStG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BcsVdcFaultStG {
      get { if ((_hasBits0 & 1) != 0) { return bcsVdcFaultStG_; } else { return BcsVdcFaultStGDefaultValue; } }
      set {
        _hasBits0 |= 1;
        bcsVdcFaultStG_ = value;
      }
    }
    /// <summary>Gets whether the "bcs_vdc_fault_st_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBcsVdcFaultStG {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "bcs_vdc_fault_st_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBcsVdcFaultStG() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "bcs_tcs_active_st_g" field.</summary>
    public const int BcsTcsActiveStGFieldNumber = 2;
    private readonly static bool BcsTcsActiveStGDefaultValue = false;

    private bool bcsTcsActiveStG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BcsTcsActiveStG {
      get { if ((_hasBits0 & 2) != 0) { return bcsTcsActiveStG_; } else { return BcsTcsActiveStGDefaultValue; } }
      set {
        _hasBits0 |= 2;
        bcsTcsActiveStG_ = value;
      }
    }
    /// <summary>Gets whether the "bcs_tcs_active_st_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBcsTcsActiveStG {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "bcs_tcs_active_st_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBcsTcsActiveStG() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "bcs_tcs_fault_st_g" field.</summary>
    public const int BcsTcsFaultStGFieldNumber = 3;
    private readonly static bool BcsTcsFaultStGDefaultValue = false;

    private bool bcsTcsFaultStG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BcsTcsFaultStG {
      get { if ((_hasBits0 & 4) != 0) { return bcsTcsFaultStG_; } else { return BcsTcsFaultStGDefaultValue; } }
      set {
        _hasBits0 |= 4;
        bcsTcsFaultStG_ = value;
      }
    }
    /// <summary>Gets whether the "bcs_tcs_fault_st_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBcsTcsFaultStG {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "bcs_tcs_fault_st_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBcsTcsFaultStG() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "bcs_ebd_active_st_g" field.</summary>
    public const int BcsEbdActiveStGFieldNumber = 4;
    private readonly static bool BcsEbdActiveStGDefaultValue = false;

    private bool bcsEbdActiveStG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BcsEbdActiveStG {
      get { if ((_hasBits0 & 8) != 0) { return bcsEbdActiveStG_; } else { return BcsEbdActiveStGDefaultValue; } }
      set {
        _hasBits0 |= 8;
        bcsEbdActiveStG_ = value;
      }
    }
    /// <summary>Gets whether the "bcs_ebd_active_st_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBcsEbdActiveStG {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "bcs_ebd_active_st_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBcsEbdActiveStG() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "bcs_ebd_fault_st_g" field.</summary>
    public const int BcsEbdFaultStGFieldNumber = 5;
    private readonly static bool BcsEbdFaultStGDefaultValue = false;

    private bool bcsEbdFaultStG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BcsEbdFaultStG {
      get { if ((_hasBits0 & 16) != 0) { return bcsEbdFaultStG_; } else { return BcsEbdFaultStGDefaultValue; } }
      set {
        _hasBits0 |= 16;
        bcsEbdFaultStG_ = value;
      }
    }
    /// <summary>Gets whether the "bcs_ebd_fault_st_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBcsEbdFaultStG {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "bcs_ebd_fault_st_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBcsEbdFaultStG() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "bcs_abs_fault_st_g" field.</summary>
    public const int BcsAbsFaultStGFieldNumber = 6;
    private readonly static bool BcsAbsFaultStGDefaultValue = false;

    private bool bcsAbsFaultStG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BcsAbsFaultStG {
      get { if ((_hasBits0 & 32) != 0) { return bcsAbsFaultStG_; } else { return BcsAbsFaultStGDefaultValue; } }
      set {
        _hasBits0 |= 32;
        bcsAbsFaultStG_ = value;
      }
    }
    /// <summary>Gets whether the "bcs_abs_fault_st_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBcsAbsFaultStG {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "bcs_abs_fault_st_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBcsAbsFaultStG() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "bcs_abs_active_st_g" field.</summary>
    public const int BcsAbsActiveStGFieldNumber = 7;
    private readonly static bool BcsAbsActiveStGDefaultValue = false;

    private bool bcsAbsActiveStG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BcsAbsActiveStG {
      get { if ((_hasBits0 & 64) != 0) { return bcsAbsActiveStG_; } else { return BcsAbsActiveStGDefaultValue; } }
      set {
        _hasBits0 |= 64;
        bcsAbsActiveStG_ = value;
      }
    }
    /// <summary>Gets whether the "bcs_abs_active_st_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBcsAbsActiveStG {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "bcs_abs_active_st_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBcsAbsActiveStG() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "bcs_veh_spd_vd_g" field.</summary>
    public const int BcsVehSpdVdGFieldNumber = 8;
    private readonly static bool BcsVehSpdVdGDefaultValue = false;

    private bool bcsVehSpdVdG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BcsVehSpdVdG {
      get { if ((_hasBits0 & 128) != 0) { return bcsVehSpdVdG_; } else { return BcsVehSpdVdGDefaultValue; } }
      set {
        _hasBits0 |= 128;
        bcsVehSpdVdG_ = value;
      }
    }
    /// <summary>Gets whether the "bcs_veh_spd_vd_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBcsVehSpdVdG {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "bcs_veh_spd_vd_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBcsVehSpdVdG() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "bcs_veh_spd_g" field.</summary>
    public const int BcsVehSpdGFieldNumber = 9;
    private readonly static double BcsVehSpdGDefaultValue = 0D;

    private double bcsVehSpdG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BcsVehSpdG {
      get { if ((_hasBits0 & 256) != 0) { return bcsVehSpdG_; } else { return BcsVehSpdGDefaultValue; } }
      set {
        _hasBits0 |= 256;
        bcsVehSpdG_ = value;
      }
    }
    /// <summary>Gets whether the "bcs_veh_spd_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBcsVehSpdG {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "bcs_veh_spd_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBcsVehSpdG() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "bcs_vdc_active_st_g" field.</summary>
    public const int BcsVdcActiveStGFieldNumber = 10;
    private readonly static bool BcsVdcActiveStGDefaultValue = false;

    private bool bcsVdcActiveStG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BcsVdcActiveStG {
      get { if ((_hasBits0 & 512) != 0) { return bcsVdcActiveStG_; } else { return BcsVdcActiveStGDefaultValue; } }
      set {
        _hasBits0 |= 512;
        bcsVdcActiveStG_ = value;
      }
    }
    /// <summary>Gets whether the "bcs_vdc_active_st_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBcsVdcActiveStG {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "bcs_vdc_active_st_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBcsVdcActiveStG() {
      _hasBits0 &= ~512;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Scu1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Scu1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BcsVdcFaultStG != other.BcsVdcFaultStG) return false;
      if (BcsTcsActiveStG != other.BcsTcsActiveStG) return false;
      if (BcsTcsFaultStG != other.BcsTcsFaultStG) return false;
      if (BcsEbdActiveStG != other.BcsEbdActiveStG) return false;
      if (BcsEbdFaultStG != other.BcsEbdFaultStG) return false;
      if (BcsAbsFaultStG != other.BcsAbsFaultStG) return false;
      if (BcsAbsActiveStG != other.BcsAbsActiveStG) return false;
      if (BcsVehSpdVdG != other.BcsVehSpdVdG) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BcsVehSpdG, other.BcsVehSpdG)) return false;
      if (BcsVdcActiveStG != other.BcsVdcActiveStG) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBcsVdcFaultStG) hash ^= BcsVdcFaultStG.GetHashCode();
      if (HasBcsTcsActiveStG) hash ^= BcsTcsActiveStG.GetHashCode();
      if (HasBcsTcsFaultStG) hash ^= BcsTcsFaultStG.GetHashCode();
      if (HasBcsEbdActiveStG) hash ^= BcsEbdActiveStG.GetHashCode();
      if (HasBcsEbdFaultStG) hash ^= BcsEbdFaultStG.GetHashCode();
      if (HasBcsAbsFaultStG) hash ^= BcsAbsFaultStG.GetHashCode();
      if (HasBcsAbsActiveStG) hash ^= BcsAbsActiveStG.GetHashCode();
      if (HasBcsVehSpdVdG) hash ^= BcsVehSpdVdG.GetHashCode();
      if (HasBcsVehSpdG) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BcsVehSpdG);
      if (HasBcsVdcActiveStG) hash ^= BcsVdcActiveStG.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasBcsVdcFaultStG) {
        output.WriteRawTag(8);
        output.WriteBool(BcsVdcFaultStG);
      }
      if (HasBcsTcsActiveStG) {
        output.WriteRawTag(16);
        output.WriteBool(BcsTcsActiveStG);
      }
      if (HasBcsTcsFaultStG) {
        output.WriteRawTag(24);
        output.WriteBool(BcsTcsFaultStG);
      }
      if (HasBcsEbdActiveStG) {
        output.WriteRawTag(32);
        output.WriteBool(BcsEbdActiveStG);
      }
      if (HasBcsEbdFaultStG) {
        output.WriteRawTag(40);
        output.WriteBool(BcsEbdFaultStG);
      }
      if (HasBcsAbsFaultStG) {
        output.WriteRawTag(48);
        output.WriteBool(BcsAbsFaultStG);
      }
      if (HasBcsAbsActiveStG) {
        output.WriteRawTag(56);
        output.WriteBool(BcsAbsActiveStG);
      }
      if (HasBcsVehSpdVdG) {
        output.WriteRawTag(64);
        output.WriteBool(BcsVehSpdVdG);
      }
      if (HasBcsVehSpdG) {
        output.WriteRawTag(73);
        output.WriteDouble(BcsVehSpdG);
      }
      if (HasBcsVdcActiveStG) {
        output.WriteRawTag(80);
        output.WriteBool(BcsVdcActiveStG);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasBcsVdcFaultStG) {
        size += 1 + 1;
      }
      if (HasBcsTcsActiveStG) {
        size += 1 + 1;
      }
      if (HasBcsTcsFaultStG) {
        size += 1 + 1;
      }
      if (HasBcsEbdActiveStG) {
        size += 1 + 1;
      }
      if (HasBcsEbdFaultStG) {
        size += 1 + 1;
      }
      if (HasBcsAbsFaultStG) {
        size += 1 + 1;
      }
      if (HasBcsAbsActiveStG) {
        size += 1 + 1;
      }
      if (HasBcsVehSpdVdG) {
        size += 1 + 1;
      }
      if (HasBcsVehSpdG) {
        size += 1 + 8;
      }
      if (HasBcsVdcActiveStG) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Scu1 other) {
      if (other == null) {
        return;
      }
      if (other.HasBcsVdcFaultStG) {
        BcsVdcFaultStG = other.BcsVdcFaultStG;
      }
      if (other.HasBcsTcsActiveStG) {
        BcsTcsActiveStG = other.BcsTcsActiveStG;
      }
      if (other.HasBcsTcsFaultStG) {
        BcsTcsFaultStG = other.BcsTcsFaultStG;
      }
      if (other.HasBcsEbdActiveStG) {
        BcsEbdActiveStG = other.BcsEbdActiveStG;
      }
      if (other.HasBcsEbdFaultStG) {
        BcsEbdFaultStG = other.BcsEbdFaultStG;
      }
      if (other.HasBcsAbsFaultStG) {
        BcsAbsFaultStG = other.BcsAbsFaultStG;
      }
      if (other.HasBcsAbsActiveStG) {
        BcsAbsActiveStG = other.BcsAbsActiveStG;
      }
      if (other.HasBcsVehSpdVdG) {
        BcsVehSpdVdG = other.BcsVehSpdVdG;
      }
      if (other.HasBcsVehSpdG) {
        BcsVehSpdG = other.BcsVehSpdG;
      }
      if (other.HasBcsVdcActiveStG) {
        BcsVdcActiveStG = other.BcsVdcActiveStG;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BcsVdcFaultStG = input.ReadBool();
            break;
          }
          case 16: {
            BcsTcsActiveStG = input.ReadBool();
            break;
          }
          case 24: {
            BcsTcsFaultStG = input.ReadBool();
            break;
          }
          case 32: {
            BcsEbdActiveStG = input.ReadBool();
            break;
          }
          case 40: {
            BcsEbdFaultStG = input.ReadBool();
            break;
          }
          case 48: {
            BcsAbsFaultStG = input.ReadBool();
            break;
          }
          case 56: {
            BcsAbsActiveStG = input.ReadBool();
            break;
          }
          case 64: {
            BcsVehSpdVdG = input.ReadBool();
            break;
          }
          case 73: {
            BcsVehSpdG = input.ReadDouble();
            break;
          }
          case 80: {
            BcsVdcActiveStG = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Scu8 : pb::IMessage<Scu8> {
    private static readonly pb::MessageParser<Scu8> _parser = new pb::MessageParser<Scu8>(() => new Scu8());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Scu8> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.EngineeringReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scu8() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scu8(Scu8 other) : this() {
      _hasBits0 = other._hasBits0;
      bcsActVehLongAccelG_ = other.bcsActVehLongAccelG_;
      bcsVehLongAccelOffsetG_ = other.bcsVehLongAccelOffsetG_;
      bcsActVehLaltrlAccelG_ = other.bcsActVehLaltrlAccelG_;
      bcsVehLaltrlAccelOffsetG_ = other.bcsVehLaltrlAccelOffsetG_;
      bcsActVehLaltrlAccelVdG_ = other.bcsActVehLaltrlAccelVdG_;
      bcsActVehLongAccelVdG_ = other.bcsActVehLongAccelVdG_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scu8 Clone() {
      return new Scu8(this);
    }

    /// <summary>Field number for the "bcs_act_veh_long_accel_g" field.</summary>
    public const int BcsActVehLongAccelGFieldNumber = 1;
    private readonly static double BcsActVehLongAccelGDefaultValue = 0D;

    private double bcsActVehLongAccelG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BcsActVehLongAccelG {
      get { if ((_hasBits0 & 1) != 0) { return bcsActVehLongAccelG_; } else { return BcsActVehLongAccelGDefaultValue; } }
      set {
        _hasBits0 |= 1;
        bcsActVehLongAccelG_ = value;
      }
    }
    /// <summary>Gets whether the "bcs_act_veh_long_accel_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBcsActVehLongAccelG {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "bcs_act_veh_long_accel_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBcsActVehLongAccelG() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "bcs_veh_long_accel_offset_g" field.</summary>
    public const int BcsVehLongAccelOffsetGFieldNumber = 2;
    private readonly static double BcsVehLongAccelOffsetGDefaultValue = 0D;

    private double bcsVehLongAccelOffsetG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BcsVehLongAccelOffsetG {
      get { if ((_hasBits0 & 2) != 0) { return bcsVehLongAccelOffsetG_; } else { return BcsVehLongAccelOffsetGDefaultValue; } }
      set {
        _hasBits0 |= 2;
        bcsVehLongAccelOffsetG_ = value;
      }
    }
    /// <summary>Gets whether the "bcs_veh_long_accel_offset_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBcsVehLongAccelOffsetG {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "bcs_veh_long_accel_offset_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBcsVehLongAccelOffsetG() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "bcs_act_veh_laltrl_accel_g" field.</summary>
    public const int BcsActVehLaltrlAccelGFieldNumber = 3;
    private readonly static double BcsActVehLaltrlAccelGDefaultValue = 0D;

    private double bcsActVehLaltrlAccelG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BcsActVehLaltrlAccelG {
      get { if ((_hasBits0 & 4) != 0) { return bcsActVehLaltrlAccelG_; } else { return BcsActVehLaltrlAccelGDefaultValue; } }
      set {
        _hasBits0 |= 4;
        bcsActVehLaltrlAccelG_ = value;
      }
    }
    /// <summary>Gets whether the "bcs_act_veh_laltrl_accel_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBcsActVehLaltrlAccelG {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "bcs_act_veh_laltrl_accel_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBcsActVehLaltrlAccelG() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "bcs_veh_laltrl_accel_offset_g" field.</summary>
    public const int BcsVehLaltrlAccelOffsetGFieldNumber = 4;
    private readonly static double BcsVehLaltrlAccelOffsetGDefaultValue = 0D;

    private double bcsVehLaltrlAccelOffsetG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BcsVehLaltrlAccelOffsetG {
      get { if ((_hasBits0 & 8) != 0) { return bcsVehLaltrlAccelOffsetG_; } else { return BcsVehLaltrlAccelOffsetGDefaultValue; } }
      set {
        _hasBits0 |= 8;
        bcsVehLaltrlAccelOffsetG_ = value;
      }
    }
    /// <summary>Gets whether the "bcs_veh_laltrl_accel_offset_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBcsVehLaltrlAccelOffsetG {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "bcs_veh_laltrl_accel_offset_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBcsVehLaltrlAccelOffsetG() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "bcs_act_veh_laltrl_accel_vd_g" field.</summary>
    public const int BcsActVehLaltrlAccelVdGFieldNumber = 5;
    private readonly static bool BcsActVehLaltrlAccelVdGDefaultValue = false;

    private bool bcsActVehLaltrlAccelVdG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BcsActVehLaltrlAccelVdG {
      get { if ((_hasBits0 & 16) != 0) { return bcsActVehLaltrlAccelVdG_; } else { return BcsActVehLaltrlAccelVdGDefaultValue; } }
      set {
        _hasBits0 |= 16;
        bcsActVehLaltrlAccelVdG_ = value;
      }
    }
    /// <summary>Gets whether the "bcs_act_veh_laltrl_accel_vd_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBcsActVehLaltrlAccelVdG {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "bcs_act_veh_laltrl_accel_vd_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBcsActVehLaltrlAccelVdG() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "bcs_act_veh_long_accel_vd_g" field.</summary>
    public const int BcsActVehLongAccelVdGFieldNumber = 6;
    private readonly static bool BcsActVehLongAccelVdGDefaultValue = false;

    private bool bcsActVehLongAccelVdG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BcsActVehLongAccelVdG {
      get { if ((_hasBits0 & 32) != 0) { return bcsActVehLongAccelVdG_; } else { return BcsActVehLongAccelVdGDefaultValue; } }
      set {
        _hasBits0 |= 32;
        bcsActVehLongAccelVdG_ = value;
      }
    }
    /// <summary>Gets whether the "bcs_act_veh_long_accel_vd_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBcsActVehLongAccelVdG {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "bcs_act_veh_long_accel_vd_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBcsActVehLongAccelVdG() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Scu8);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Scu8 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BcsActVehLongAccelG, other.BcsActVehLongAccelG)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BcsVehLongAccelOffsetG, other.BcsVehLongAccelOffsetG)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BcsActVehLaltrlAccelG, other.BcsActVehLaltrlAccelG)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BcsVehLaltrlAccelOffsetG, other.BcsVehLaltrlAccelOffsetG)) return false;
      if (BcsActVehLaltrlAccelVdG != other.BcsActVehLaltrlAccelVdG) return false;
      if (BcsActVehLongAccelVdG != other.BcsActVehLongAccelVdG) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBcsActVehLongAccelG) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BcsActVehLongAccelG);
      if (HasBcsVehLongAccelOffsetG) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BcsVehLongAccelOffsetG);
      if (HasBcsActVehLaltrlAccelG) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BcsActVehLaltrlAccelG);
      if (HasBcsVehLaltrlAccelOffsetG) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BcsVehLaltrlAccelOffsetG);
      if (HasBcsActVehLaltrlAccelVdG) hash ^= BcsActVehLaltrlAccelVdG.GetHashCode();
      if (HasBcsActVehLongAccelVdG) hash ^= BcsActVehLongAccelVdG.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasBcsActVehLongAccelG) {
        output.WriteRawTag(9);
        output.WriteDouble(BcsActVehLongAccelG);
      }
      if (HasBcsVehLongAccelOffsetG) {
        output.WriteRawTag(17);
        output.WriteDouble(BcsVehLongAccelOffsetG);
      }
      if (HasBcsActVehLaltrlAccelG) {
        output.WriteRawTag(25);
        output.WriteDouble(BcsActVehLaltrlAccelG);
      }
      if (HasBcsVehLaltrlAccelOffsetG) {
        output.WriteRawTag(33);
        output.WriteDouble(BcsVehLaltrlAccelOffsetG);
      }
      if (HasBcsActVehLaltrlAccelVdG) {
        output.WriteRawTag(40);
        output.WriteBool(BcsActVehLaltrlAccelVdG);
      }
      if (HasBcsActVehLongAccelVdG) {
        output.WriteRawTag(48);
        output.WriteBool(BcsActVehLongAccelVdG);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasBcsActVehLongAccelG) {
        size += 1 + 8;
      }
      if (HasBcsVehLongAccelOffsetG) {
        size += 1 + 8;
      }
      if (HasBcsActVehLaltrlAccelG) {
        size += 1 + 8;
      }
      if (HasBcsVehLaltrlAccelOffsetG) {
        size += 1 + 8;
      }
      if (HasBcsActVehLaltrlAccelVdG) {
        size += 1 + 1;
      }
      if (HasBcsActVehLongAccelVdG) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Scu8 other) {
      if (other == null) {
        return;
      }
      if (other.HasBcsActVehLongAccelG) {
        BcsActVehLongAccelG = other.BcsActVehLongAccelG;
      }
      if (other.HasBcsVehLongAccelOffsetG) {
        BcsVehLongAccelOffsetG = other.BcsVehLongAccelOffsetG;
      }
      if (other.HasBcsActVehLaltrlAccelG) {
        BcsActVehLaltrlAccelG = other.BcsActVehLaltrlAccelG;
      }
      if (other.HasBcsVehLaltrlAccelOffsetG) {
        BcsVehLaltrlAccelOffsetG = other.BcsVehLaltrlAccelOffsetG;
      }
      if (other.HasBcsActVehLaltrlAccelVdG) {
        BcsActVehLaltrlAccelVdG = other.BcsActVehLaltrlAccelVdG;
      }
      if (other.HasBcsActVehLongAccelVdG) {
        BcsActVehLongAccelVdG = other.BcsActVehLongAccelVdG;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            BcsActVehLongAccelG = input.ReadDouble();
            break;
          }
          case 17: {
            BcsVehLongAccelOffsetG = input.ReadDouble();
            break;
          }
          case 25: {
            BcsActVehLaltrlAccelG = input.ReadDouble();
            break;
          }
          case 33: {
            BcsVehLaltrlAccelOffsetG = input.ReadDouble();
            break;
          }
          case 40: {
            BcsActVehLaltrlAccelVdG = input.ReadBool();
            break;
          }
          case 48: {
            BcsActVehLongAccelVdG = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Scu10 : pb::IMessage<Scu10> {
    private static readonly pb::MessageParser<Scu10> _parser = new pb::MessageParser<Scu10>(() => new Scu10());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Scu10> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.EngineeringReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scu10() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scu10(Scu10 other) : this() {
      _hasBits0 = other._hasBits0;
      epsSteeringAngleSpdVdG_ = other.epsSteeringAngleSpdVdG_;
      epsWarnLampG_ = other.epsWarnLampG_;
      epsStrngWhlTorqVdG_ = other.epsStrngWhlTorqVdG_;
      epsSteeringAngleG_ = other.epsSteeringAngleG_;
      epsThermalStG_ = other.epsThermalStG_;
      epsSteeringAngleSpdG_ = other.epsSteeringAngleSpdG_;
      epsSteeringAngleVdG_ = other.epsSteeringAngleVdG_;
      epsStrngWhlTorqG_ = other.epsStrngWhlTorqG_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scu10 Clone() {
      return new Scu10(this);
    }

    /// <summary>Field number for the "eps_steering_angle_spd_vd_g" field.</summary>
    public const int EpsSteeringAngleSpdVdGFieldNumber = 1;
    private readonly static bool EpsSteeringAngleSpdVdGDefaultValue = false;

    private bool epsSteeringAngleSpdVdG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EpsSteeringAngleSpdVdG {
      get { if ((_hasBits0 & 1) != 0) { return epsSteeringAngleSpdVdG_; } else { return EpsSteeringAngleSpdVdGDefaultValue; } }
      set {
        _hasBits0 |= 1;
        epsSteeringAngleSpdVdG_ = value;
      }
    }
    /// <summary>Gets whether the "eps_steering_angle_spd_vd_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEpsSteeringAngleSpdVdG {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "eps_steering_angle_spd_vd_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEpsSteeringAngleSpdVdG() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "eps_warn_lamp_g" field.</summary>
    public const int EpsWarnLampGFieldNumber = 2;
    private readonly static bool EpsWarnLampGDefaultValue = false;

    private bool epsWarnLampG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EpsWarnLampG {
      get { if ((_hasBits0 & 2) != 0) { return epsWarnLampG_; } else { return EpsWarnLampGDefaultValue; } }
      set {
        _hasBits0 |= 2;
        epsWarnLampG_ = value;
      }
    }
    /// <summary>Gets whether the "eps_warn_lamp_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEpsWarnLampG {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "eps_warn_lamp_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEpsWarnLampG() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "eps_strng_whl_torq_vd_g" field.</summary>
    public const int EpsStrngWhlTorqVdGFieldNumber = 3;
    private readonly static bool EpsStrngWhlTorqVdGDefaultValue = false;

    private bool epsStrngWhlTorqVdG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EpsStrngWhlTorqVdG {
      get { if ((_hasBits0 & 4) != 0) { return epsStrngWhlTorqVdG_; } else { return EpsStrngWhlTorqVdGDefaultValue; } }
      set {
        _hasBits0 |= 4;
        epsStrngWhlTorqVdG_ = value;
      }
    }
    /// <summary>Gets whether the "eps_strng_whl_torq_vd_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEpsStrngWhlTorqVdG {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "eps_strng_whl_torq_vd_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEpsStrngWhlTorqVdG() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "eps_steering_angle_g" field.</summary>
    public const int EpsSteeringAngleGFieldNumber = 4;
    private readonly static double EpsSteeringAngleGDefaultValue = 0D;

    private double epsSteeringAngleG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EpsSteeringAngleG {
      get { if ((_hasBits0 & 8) != 0) { return epsSteeringAngleG_; } else { return EpsSteeringAngleGDefaultValue; } }
      set {
        _hasBits0 |= 8;
        epsSteeringAngleG_ = value;
      }
    }
    /// <summary>Gets whether the "eps_steering_angle_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEpsSteeringAngleG {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "eps_steering_angle_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEpsSteeringAngleG() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "eps_thermal_st_g" field.</summary>
    public const int EpsThermalStGFieldNumber = 5;
    private readonly static uint EpsThermalStGDefaultValue = 0;

    private uint epsThermalStG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EpsThermalStG {
      get { if ((_hasBits0 & 16) != 0) { return epsThermalStG_; } else { return EpsThermalStGDefaultValue; } }
      set {
        _hasBits0 |= 16;
        epsThermalStG_ = value;
      }
    }
    /// <summary>Gets whether the "eps_thermal_st_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEpsThermalStG {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "eps_thermal_st_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEpsThermalStG() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "eps_steering_angle_spd_g" field.</summary>
    public const int EpsSteeringAngleSpdGFieldNumber = 6;
    private readonly static double EpsSteeringAngleSpdGDefaultValue = 0D;

    private double epsSteeringAngleSpdG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EpsSteeringAngleSpdG {
      get { if ((_hasBits0 & 32) != 0) { return epsSteeringAngleSpdG_; } else { return EpsSteeringAngleSpdGDefaultValue; } }
      set {
        _hasBits0 |= 32;
        epsSteeringAngleSpdG_ = value;
      }
    }
    /// <summary>Gets whether the "eps_steering_angle_spd_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEpsSteeringAngleSpdG {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "eps_steering_angle_spd_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEpsSteeringAngleSpdG() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "eps_steering_angle_vd_g" field.</summary>
    public const int EpsSteeringAngleVdGFieldNumber = 7;
    private readonly static bool EpsSteeringAngleVdGDefaultValue = false;

    private bool epsSteeringAngleVdG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EpsSteeringAngleVdG {
      get { if ((_hasBits0 & 64) != 0) { return epsSteeringAngleVdG_; } else { return EpsSteeringAngleVdGDefaultValue; } }
      set {
        _hasBits0 |= 64;
        epsSteeringAngleVdG_ = value;
      }
    }
    /// <summary>Gets whether the "eps_steering_angle_vd_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEpsSteeringAngleVdG {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "eps_steering_angle_vd_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEpsSteeringAngleVdG() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "eps_strng_whl_torq_g" field.</summary>
    public const int EpsStrngWhlTorqGFieldNumber = 8;
    private readonly static double EpsStrngWhlTorqGDefaultValue = 0D;

    private double epsStrngWhlTorqG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EpsStrngWhlTorqG {
      get { if ((_hasBits0 & 128) != 0) { return epsStrngWhlTorqG_; } else { return EpsStrngWhlTorqGDefaultValue; } }
      set {
        _hasBits0 |= 128;
        epsStrngWhlTorqG_ = value;
      }
    }
    /// <summary>Gets whether the "eps_strng_whl_torq_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEpsStrngWhlTorqG {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "eps_strng_whl_torq_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEpsStrngWhlTorqG() {
      _hasBits0 &= ~128;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Scu10);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Scu10 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EpsSteeringAngleSpdVdG != other.EpsSteeringAngleSpdVdG) return false;
      if (EpsWarnLampG != other.EpsWarnLampG) return false;
      if (EpsStrngWhlTorqVdG != other.EpsStrngWhlTorqVdG) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EpsSteeringAngleG, other.EpsSteeringAngleG)) return false;
      if (EpsThermalStG != other.EpsThermalStG) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EpsSteeringAngleSpdG, other.EpsSteeringAngleSpdG)) return false;
      if (EpsSteeringAngleVdG != other.EpsSteeringAngleVdG) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EpsStrngWhlTorqG, other.EpsStrngWhlTorqG)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEpsSteeringAngleSpdVdG) hash ^= EpsSteeringAngleSpdVdG.GetHashCode();
      if (HasEpsWarnLampG) hash ^= EpsWarnLampG.GetHashCode();
      if (HasEpsStrngWhlTorqVdG) hash ^= EpsStrngWhlTorqVdG.GetHashCode();
      if (HasEpsSteeringAngleG) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EpsSteeringAngleG);
      if (HasEpsThermalStG) hash ^= EpsThermalStG.GetHashCode();
      if (HasEpsSteeringAngleSpdG) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EpsSteeringAngleSpdG);
      if (HasEpsSteeringAngleVdG) hash ^= EpsSteeringAngleVdG.GetHashCode();
      if (HasEpsStrngWhlTorqG) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EpsStrngWhlTorqG);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasEpsSteeringAngleSpdVdG) {
        output.WriteRawTag(8);
        output.WriteBool(EpsSteeringAngleSpdVdG);
      }
      if (HasEpsWarnLampG) {
        output.WriteRawTag(16);
        output.WriteBool(EpsWarnLampG);
      }
      if (HasEpsStrngWhlTorqVdG) {
        output.WriteRawTag(24);
        output.WriteBool(EpsStrngWhlTorqVdG);
      }
      if (HasEpsSteeringAngleG) {
        output.WriteRawTag(33);
        output.WriteDouble(EpsSteeringAngleG);
      }
      if (HasEpsThermalStG) {
        output.WriteRawTag(40);
        output.WriteUInt32(EpsThermalStG);
      }
      if (HasEpsSteeringAngleSpdG) {
        output.WriteRawTag(49);
        output.WriteDouble(EpsSteeringAngleSpdG);
      }
      if (HasEpsSteeringAngleVdG) {
        output.WriteRawTag(56);
        output.WriteBool(EpsSteeringAngleVdG);
      }
      if (HasEpsStrngWhlTorqG) {
        output.WriteRawTag(65);
        output.WriteDouble(EpsStrngWhlTorqG);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEpsSteeringAngleSpdVdG) {
        size += 1 + 1;
      }
      if (HasEpsWarnLampG) {
        size += 1 + 1;
      }
      if (HasEpsStrngWhlTorqVdG) {
        size += 1 + 1;
      }
      if (HasEpsSteeringAngleG) {
        size += 1 + 8;
      }
      if (HasEpsThermalStG) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EpsThermalStG);
      }
      if (HasEpsSteeringAngleSpdG) {
        size += 1 + 8;
      }
      if (HasEpsSteeringAngleVdG) {
        size += 1 + 1;
      }
      if (HasEpsStrngWhlTorqG) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Scu10 other) {
      if (other == null) {
        return;
      }
      if (other.HasEpsSteeringAngleSpdVdG) {
        EpsSteeringAngleSpdVdG = other.EpsSteeringAngleSpdVdG;
      }
      if (other.HasEpsWarnLampG) {
        EpsWarnLampG = other.EpsWarnLampG;
      }
      if (other.HasEpsStrngWhlTorqVdG) {
        EpsStrngWhlTorqVdG = other.EpsStrngWhlTorqVdG;
      }
      if (other.HasEpsSteeringAngleG) {
        EpsSteeringAngleG = other.EpsSteeringAngleG;
      }
      if (other.HasEpsThermalStG) {
        EpsThermalStG = other.EpsThermalStG;
      }
      if (other.HasEpsSteeringAngleSpdG) {
        EpsSteeringAngleSpdG = other.EpsSteeringAngleSpdG;
      }
      if (other.HasEpsSteeringAngleVdG) {
        EpsSteeringAngleVdG = other.EpsSteeringAngleVdG;
      }
      if (other.HasEpsStrngWhlTorqG) {
        EpsStrngWhlTorqG = other.EpsStrngWhlTorqG;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EpsSteeringAngleSpdVdG = input.ReadBool();
            break;
          }
          case 16: {
            EpsWarnLampG = input.ReadBool();
            break;
          }
          case 24: {
            EpsStrngWhlTorqVdG = input.ReadBool();
            break;
          }
          case 33: {
            EpsSteeringAngleG = input.ReadDouble();
            break;
          }
          case 40: {
            EpsThermalStG = input.ReadUInt32();
            break;
          }
          case 49: {
            EpsSteeringAngleSpdG = input.ReadDouble();
            break;
          }
          case 56: {
            EpsSteeringAngleVdG = input.ReadBool();
            break;
          }
          case 65: {
            EpsStrngWhlTorqG = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Scu13 : pb::IMessage<Scu13> {
    private static readonly pb::MessageParser<Scu13> _parser = new pb::MessageParser<Scu13>(() => new Scu13());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Scu13> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.EngineeringReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scu13() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scu13(Scu13 other) : this() {
      _hasBits0 = other._hasBits0;
      scuStrngWhlIntv_ = other.scuStrngWhlIntv_;
      vcuGearLeverIntv_ = other.vcuGearLeverIntv_;
      scuEStopSwStVd_ = other.scuEStopSwStVd_;
      scuEStopSwSt_ = other.scuEStopSwSt_;
      scuLatCtrlMode_ = other.scuLatCtrlMode_;
      scuLngCtrlMode_ = other.scuLngCtrlMode_;
      scuLngQuitReport_ = other.scuLngQuitReport_;
      scuLatQuitReport_ = other.scuLatQuitReport_;
      scuLngAutoChecklReport_ = other.scuLngAutoChecklReport_;
      scuLatAutoCheckReport_ = other.scuLatAutoCheckReport_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scu13 Clone() {
      return new Scu13(this);
    }

    /// <summary>Field number for the "scu_strng_whl_intv" field.</summary>
    public const int ScuStrngWhlIntvFieldNumber = 1;
    private readonly static bool ScuStrngWhlIntvDefaultValue = false;

    private bool scuStrngWhlIntv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ScuStrngWhlIntv {
      get { if ((_hasBits0 & 1) != 0) { return scuStrngWhlIntv_; } else { return ScuStrngWhlIntvDefaultValue; } }
      set {
        _hasBits0 |= 1;
        scuStrngWhlIntv_ = value;
      }
    }
    /// <summary>Gets whether the "scu_strng_whl_intv" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScuStrngWhlIntv {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "scu_strng_whl_intv" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScuStrngWhlIntv() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "vcu_gear_lever_intv" field.</summary>
    public const int VcuGearLeverIntvFieldNumber = 2;
    private readonly static bool VcuGearLeverIntvDefaultValue = false;

    private bool vcuGearLeverIntv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VcuGearLeverIntv {
      get { if ((_hasBits0 & 2) != 0) { return vcuGearLeverIntv_; } else { return VcuGearLeverIntvDefaultValue; } }
      set {
        _hasBits0 |= 2;
        vcuGearLeverIntv_ = value;
      }
    }
    /// <summary>Gets whether the "vcu_gear_lever_intv" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVcuGearLeverIntv {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "vcu_gear_lever_intv" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVcuGearLeverIntv() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "scu_e_stop_sw_st_vd" field.</summary>
    public const int ScuEStopSwStVdFieldNumber = 3;
    private readonly static bool ScuEStopSwStVdDefaultValue = false;

    private bool scuEStopSwStVd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ScuEStopSwStVd {
      get { if ((_hasBits0 & 4) != 0) { return scuEStopSwStVd_; } else { return ScuEStopSwStVdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        scuEStopSwStVd_ = value;
      }
    }
    /// <summary>Gets whether the "scu_e_stop_sw_st_vd" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScuEStopSwStVd {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "scu_e_stop_sw_st_vd" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScuEStopSwStVd() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "scu_e_stop_sw_st" field.</summary>
    public const int ScuEStopSwStFieldNumber = 4;
    private readonly static bool ScuEStopSwStDefaultValue = false;

    private bool scuEStopSwSt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ScuEStopSwSt {
      get { if ((_hasBits0 & 8) != 0) { return scuEStopSwSt_; } else { return ScuEStopSwStDefaultValue; } }
      set {
        _hasBits0 |= 8;
        scuEStopSwSt_ = value;
      }
    }
    /// <summary>Gets whether the "scu_e_stop_sw_st" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScuEStopSwSt {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "scu_e_stop_sw_st" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScuEStopSwSt() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "scu_lat_ctrl_mode" field.</summary>
    public const int ScuLatCtrlModeFieldNumber = 5;
    private readonly static uint ScuLatCtrlModeDefaultValue = 0;

    private uint scuLatCtrlMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScuLatCtrlMode {
      get { if ((_hasBits0 & 16) != 0) { return scuLatCtrlMode_; } else { return ScuLatCtrlModeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        scuLatCtrlMode_ = value;
      }
    }
    /// <summary>Gets whether the "scu_lat_ctrl_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScuLatCtrlMode {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "scu_lat_ctrl_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScuLatCtrlMode() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "scu_lng_ctrl_mode" field.</summary>
    public const int ScuLngCtrlModeFieldNumber = 6;
    private readonly static uint ScuLngCtrlModeDefaultValue = 0;

    private uint scuLngCtrlMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScuLngCtrlMode {
      get { if ((_hasBits0 & 32) != 0) { return scuLngCtrlMode_; } else { return ScuLngCtrlModeDefaultValue; } }
      set {
        _hasBits0 |= 32;
        scuLngCtrlMode_ = value;
      }
    }
    /// <summary>Gets whether the "scu_lng_ctrl_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScuLngCtrlMode {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "scu_lng_ctrl_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScuLngCtrlMode() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "scu_lng_quit_report" field.</summary>
    public const int ScuLngQuitReportFieldNumber = 7;
    private readonly static uint ScuLngQuitReportDefaultValue = 0;

    private uint scuLngQuitReport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScuLngQuitReport {
      get { if ((_hasBits0 & 64) != 0) { return scuLngQuitReport_; } else { return ScuLngQuitReportDefaultValue; } }
      set {
        _hasBits0 |= 64;
        scuLngQuitReport_ = value;
      }
    }
    /// <summary>Gets whether the "scu_lng_quit_report" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScuLngQuitReport {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "scu_lng_quit_report" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScuLngQuitReport() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "scu_lat_quit_report" field.</summary>
    public const int ScuLatQuitReportFieldNumber = 8;
    private readonly static uint ScuLatQuitReportDefaultValue = 0;

    private uint scuLatQuitReport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScuLatQuitReport {
      get { if ((_hasBits0 & 128) != 0) { return scuLatQuitReport_; } else { return ScuLatQuitReportDefaultValue; } }
      set {
        _hasBits0 |= 128;
        scuLatQuitReport_ = value;
      }
    }
    /// <summary>Gets whether the "scu_lat_quit_report" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScuLatQuitReport {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "scu_lat_quit_report" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScuLatQuitReport() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "scu_lng_auto_checkl_report" field.</summary>
    public const int ScuLngAutoChecklReportFieldNumber = 9;
    private readonly static uint ScuLngAutoChecklReportDefaultValue = 0;

    private uint scuLngAutoChecklReport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScuLngAutoChecklReport {
      get { if ((_hasBits0 & 256) != 0) { return scuLngAutoChecklReport_; } else { return ScuLngAutoChecklReportDefaultValue; } }
      set {
        _hasBits0 |= 256;
        scuLngAutoChecklReport_ = value;
      }
    }
    /// <summary>Gets whether the "scu_lng_auto_checkl_report" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScuLngAutoChecklReport {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "scu_lng_auto_checkl_report" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScuLngAutoChecklReport() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "scu_lat_auto_check_report" field.</summary>
    public const int ScuLatAutoCheckReportFieldNumber = 10;
    private readonly static uint ScuLatAutoCheckReportDefaultValue = 0;

    private uint scuLatAutoCheckReport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScuLatAutoCheckReport {
      get { if ((_hasBits0 & 512) != 0) { return scuLatAutoCheckReport_; } else { return ScuLatAutoCheckReportDefaultValue; } }
      set {
        _hasBits0 |= 512;
        scuLatAutoCheckReport_ = value;
      }
    }
    /// <summary>Gets whether the "scu_lat_auto_check_report" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScuLatAutoCheckReport {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "scu_lat_auto_check_report" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScuLatAutoCheckReport() {
      _hasBits0 &= ~512;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Scu13);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Scu13 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ScuStrngWhlIntv != other.ScuStrngWhlIntv) return false;
      if (VcuGearLeverIntv != other.VcuGearLeverIntv) return false;
      if (ScuEStopSwStVd != other.ScuEStopSwStVd) return false;
      if (ScuEStopSwSt != other.ScuEStopSwSt) return false;
      if (ScuLatCtrlMode != other.ScuLatCtrlMode) return false;
      if (ScuLngCtrlMode != other.ScuLngCtrlMode) return false;
      if (ScuLngQuitReport != other.ScuLngQuitReport) return false;
      if (ScuLatQuitReport != other.ScuLatQuitReport) return false;
      if (ScuLngAutoChecklReport != other.ScuLngAutoChecklReport) return false;
      if (ScuLatAutoCheckReport != other.ScuLatAutoCheckReport) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasScuStrngWhlIntv) hash ^= ScuStrngWhlIntv.GetHashCode();
      if (HasVcuGearLeverIntv) hash ^= VcuGearLeverIntv.GetHashCode();
      if (HasScuEStopSwStVd) hash ^= ScuEStopSwStVd.GetHashCode();
      if (HasScuEStopSwSt) hash ^= ScuEStopSwSt.GetHashCode();
      if (HasScuLatCtrlMode) hash ^= ScuLatCtrlMode.GetHashCode();
      if (HasScuLngCtrlMode) hash ^= ScuLngCtrlMode.GetHashCode();
      if (HasScuLngQuitReport) hash ^= ScuLngQuitReport.GetHashCode();
      if (HasScuLatQuitReport) hash ^= ScuLatQuitReport.GetHashCode();
      if (HasScuLngAutoChecklReport) hash ^= ScuLngAutoChecklReport.GetHashCode();
      if (HasScuLatAutoCheckReport) hash ^= ScuLatAutoCheckReport.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasScuStrngWhlIntv) {
        output.WriteRawTag(8);
        output.WriteBool(ScuStrngWhlIntv);
      }
      if (HasVcuGearLeverIntv) {
        output.WriteRawTag(16);
        output.WriteBool(VcuGearLeverIntv);
      }
      if (HasScuEStopSwStVd) {
        output.WriteRawTag(24);
        output.WriteBool(ScuEStopSwStVd);
      }
      if (HasScuEStopSwSt) {
        output.WriteRawTag(32);
        output.WriteBool(ScuEStopSwSt);
      }
      if (HasScuLatCtrlMode) {
        output.WriteRawTag(40);
        output.WriteUInt32(ScuLatCtrlMode);
      }
      if (HasScuLngCtrlMode) {
        output.WriteRawTag(48);
        output.WriteUInt32(ScuLngCtrlMode);
      }
      if (HasScuLngQuitReport) {
        output.WriteRawTag(56);
        output.WriteUInt32(ScuLngQuitReport);
      }
      if (HasScuLatQuitReport) {
        output.WriteRawTag(64);
        output.WriteUInt32(ScuLatQuitReport);
      }
      if (HasScuLngAutoChecklReport) {
        output.WriteRawTag(72);
        output.WriteUInt32(ScuLngAutoChecklReport);
      }
      if (HasScuLatAutoCheckReport) {
        output.WriteRawTag(80);
        output.WriteUInt32(ScuLatAutoCheckReport);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasScuStrngWhlIntv) {
        size += 1 + 1;
      }
      if (HasVcuGearLeverIntv) {
        size += 1 + 1;
      }
      if (HasScuEStopSwStVd) {
        size += 1 + 1;
      }
      if (HasScuEStopSwSt) {
        size += 1 + 1;
      }
      if (HasScuLatCtrlMode) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScuLatCtrlMode);
      }
      if (HasScuLngCtrlMode) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScuLngCtrlMode);
      }
      if (HasScuLngQuitReport) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScuLngQuitReport);
      }
      if (HasScuLatQuitReport) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScuLatQuitReport);
      }
      if (HasScuLngAutoChecklReport) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScuLngAutoChecklReport);
      }
      if (HasScuLatAutoCheckReport) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScuLatAutoCheckReport);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Scu13 other) {
      if (other == null) {
        return;
      }
      if (other.HasScuStrngWhlIntv) {
        ScuStrngWhlIntv = other.ScuStrngWhlIntv;
      }
      if (other.HasVcuGearLeverIntv) {
        VcuGearLeverIntv = other.VcuGearLeverIntv;
      }
      if (other.HasScuEStopSwStVd) {
        ScuEStopSwStVd = other.ScuEStopSwStVd;
      }
      if (other.HasScuEStopSwSt) {
        ScuEStopSwSt = other.ScuEStopSwSt;
      }
      if (other.HasScuLatCtrlMode) {
        ScuLatCtrlMode = other.ScuLatCtrlMode;
      }
      if (other.HasScuLngCtrlMode) {
        ScuLngCtrlMode = other.ScuLngCtrlMode;
      }
      if (other.HasScuLngQuitReport) {
        ScuLngQuitReport = other.ScuLngQuitReport;
      }
      if (other.HasScuLatQuitReport) {
        ScuLatQuitReport = other.ScuLatQuitReport;
      }
      if (other.HasScuLngAutoChecklReport) {
        ScuLngAutoChecklReport = other.ScuLngAutoChecklReport;
      }
      if (other.HasScuLatAutoCheckReport) {
        ScuLatAutoCheckReport = other.ScuLatAutoCheckReport;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ScuStrngWhlIntv = input.ReadBool();
            break;
          }
          case 16: {
            VcuGearLeverIntv = input.ReadBool();
            break;
          }
          case 24: {
            ScuEStopSwStVd = input.ReadBool();
            break;
          }
          case 32: {
            ScuEStopSwSt = input.ReadBool();
            break;
          }
          case 40: {
            ScuLatCtrlMode = input.ReadUInt32();
            break;
          }
          case 48: {
            ScuLngCtrlMode = input.ReadUInt32();
            break;
          }
          case 56: {
            ScuLngQuitReport = input.ReadUInt32();
            break;
          }
          case 64: {
            ScuLatQuitReport = input.ReadUInt32();
            break;
          }
          case 72: {
            ScuLngAutoChecklReport = input.ReadUInt32();
            break;
          }
          case 80: {
            ScuLatAutoCheckReport = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Scu13 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Scu13ScuLatCtrlMode {
        [pbr::OriginalName("MANUAL")] Manual = 0,
        [pbr::OriginalName("QUIT")] Quit = 1,
        [pbr::OriginalName("AUTO")] Auto = 2,
        [pbr::OriginalName("FAULT")] Fault = 3,
      }

    }
    #endregion

  }

  public sealed partial class Scu14 : pb::IMessage<Scu14> {
    private static readonly pb::MessageParser<Scu14> _parser = new pb::MessageParser<Scu14>(() => new Scu14());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Scu14> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.EngineeringReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scu14() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scu14(Scu14 other) : this() {
      _hasBits0 = other._hasBits0;
      vcuVehRngG_ = other.vcuVehRngG_;
      vcuVehDrvModG_ = other.vcuVehDrvModG_;
      vcuVehRdyStG_ = other.vcuVehRdyStG_;
      vcuDcdcVoltLvG_ = other.vcuDcdcVoltLvG_;
      vcuDcdcCurrLvG_ = other.vcuDcdcCurrLvG_;
      vcuDcdcTempG_ = other.vcuDcdcTempG_;
      vcuDcdcModeStG_ = other.vcuDcdcModeStG_;
      vcuBattSoCDispG_ = other.vcuBattSoCDispG_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scu14 Clone() {
      return new Scu14(this);
    }

    /// <summary>Field number for the "vcu_veh_rng_g" field.</summary>
    public const int VcuVehRngGFieldNumber = 1;
    private readonly static double VcuVehRngGDefaultValue = 0D;

    private double vcuVehRngG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VcuVehRngG {
      get { if ((_hasBits0 & 1) != 0) { return vcuVehRngG_; } else { return VcuVehRngGDefaultValue; } }
      set {
        _hasBits0 |= 1;
        vcuVehRngG_ = value;
      }
    }
    /// <summary>Gets whether the "vcu_veh_rng_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVcuVehRngG {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "vcu_veh_rng_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVcuVehRngG() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "vcu_veh_drv_mod_g" field.</summary>
    public const int VcuVehDrvModGFieldNumber = 2;
    private readonly static uint VcuVehDrvModGDefaultValue = 0;

    private uint vcuVehDrvModG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VcuVehDrvModG {
      get { if ((_hasBits0 & 2) != 0) { return vcuVehDrvModG_; } else { return VcuVehDrvModGDefaultValue; } }
      set {
        _hasBits0 |= 2;
        vcuVehDrvModG_ = value;
      }
    }
    /// <summary>Gets whether the "vcu_veh_drv_mod_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVcuVehDrvModG {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "vcu_veh_drv_mod_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVcuVehDrvModG() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "vcu_veh_rdy_st_g" field.</summary>
    public const int VcuVehRdyStGFieldNumber = 3;
    private readonly static bool VcuVehRdyStGDefaultValue = false;

    private bool vcuVehRdyStG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VcuVehRdyStG {
      get { if ((_hasBits0 & 4) != 0) { return vcuVehRdyStG_; } else { return VcuVehRdyStGDefaultValue; } }
      set {
        _hasBits0 |= 4;
        vcuVehRdyStG_ = value;
      }
    }
    /// <summary>Gets whether the "vcu_veh_rdy_st_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVcuVehRdyStG {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "vcu_veh_rdy_st_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVcuVehRdyStG() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "vcu_dcdc_volt_lv_g" field.</summary>
    public const int VcuDcdcVoltLvGFieldNumber = 4;
    private readonly static double VcuDcdcVoltLvGDefaultValue = 0D;

    private double vcuDcdcVoltLvG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VcuDcdcVoltLvG {
      get { if ((_hasBits0 & 8) != 0) { return vcuDcdcVoltLvG_; } else { return VcuDcdcVoltLvGDefaultValue; } }
      set {
        _hasBits0 |= 8;
        vcuDcdcVoltLvG_ = value;
      }
    }
    /// <summary>Gets whether the "vcu_dcdc_volt_lv_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVcuDcdcVoltLvG {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "vcu_dcdc_volt_lv_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVcuDcdcVoltLvG() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "vcu_dcdc_curr_lv_g" field.</summary>
    public const int VcuDcdcCurrLvGFieldNumber = 5;
    private readonly static double VcuDcdcCurrLvGDefaultValue = 0D;

    private double vcuDcdcCurrLvG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VcuDcdcCurrLvG {
      get { if ((_hasBits0 & 16) != 0) { return vcuDcdcCurrLvG_; } else { return VcuDcdcCurrLvGDefaultValue; } }
      set {
        _hasBits0 |= 16;
        vcuDcdcCurrLvG_ = value;
      }
    }
    /// <summary>Gets whether the "vcu_dcdc_curr_lv_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVcuDcdcCurrLvG {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "vcu_dcdc_curr_lv_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVcuDcdcCurrLvG() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "vcu_dcdc_temp_g" field.</summary>
    public const int VcuDcdcTempGFieldNumber = 6;
    private readonly static double VcuDcdcTempGDefaultValue = 0D;

    private double vcuDcdcTempG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VcuDcdcTempG {
      get { if ((_hasBits0 & 32) != 0) { return vcuDcdcTempG_; } else { return VcuDcdcTempGDefaultValue; } }
      set {
        _hasBits0 |= 32;
        vcuDcdcTempG_ = value;
      }
    }
    /// <summary>Gets whether the "vcu_dcdc_temp_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVcuDcdcTempG {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "vcu_dcdc_temp_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVcuDcdcTempG() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "vcu_dcdc_mode_st_g" field.</summary>
    public const int VcuDcdcModeStGFieldNumber = 7;
    private readonly static uint VcuDcdcModeStGDefaultValue = 0;

    private uint vcuDcdcModeStG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VcuDcdcModeStG {
      get { if ((_hasBits0 & 64) != 0) { return vcuDcdcModeStG_; } else { return VcuDcdcModeStGDefaultValue; } }
      set {
        _hasBits0 |= 64;
        vcuDcdcModeStG_ = value;
      }
    }
    /// <summary>Gets whether the "vcu_dcdc_mode_st_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVcuDcdcModeStG {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "vcu_dcdc_mode_st_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVcuDcdcModeStG() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "vcu_batt_so_c_disp_g" field.</summary>
    public const int VcuBattSoCDispGFieldNumber = 8;
    private readonly static double VcuBattSoCDispGDefaultValue = 0D;

    private double vcuBattSoCDispG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VcuBattSoCDispG {
      get { if ((_hasBits0 & 128) != 0) { return vcuBattSoCDispG_; } else { return VcuBattSoCDispGDefaultValue; } }
      set {
        _hasBits0 |= 128;
        vcuBattSoCDispG_ = value;
      }
    }
    /// <summary>Gets whether the "vcu_batt_so_c_disp_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVcuBattSoCDispG {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "vcu_batt_so_c_disp_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVcuBattSoCDispG() {
      _hasBits0 &= ~128;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Scu14);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Scu14 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VcuVehRngG, other.VcuVehRngG)) return false;
      if (VcuVehDrvModG != other.VcuVehDrvModG) return false;
      if (VcuVehRdyStG != other.VcuVehRdyStG) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VcuDcdcVoltLvG, other.VcuDcdcVoltLvG)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VcuDcdcCurrLvG, other.VcuDcdcCurrLvG)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VcuDcdcTempG, other.VcuDcdcTempG)) return false;
      if (VcuDcdcModeStG != other.VcuDcdcModeStG) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VcuBattSoCDispG, other.VcuBattSoCDispG)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasVcuVehRngG) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VcuVehRngG);
      if (HasVcuVehDrvModG) hash ^= VcuVehDrvModG.GetHashCode();
      if (HasVcuVehRdyStG) hash ^= VcuVehRdyStG.GetHashCode();
      if (HasVcuDcdcVoltLvG) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VcuDcdcVoltLvG);
      if (HasVcuDcdcCurrLvG) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VcuDcdcCurrLvG);
      if (HasVcuDcdcTempG) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VcuDcdcTempG);
      if (HasVcuDcdcModeStG) hash ^= VcuDcdcModeStG.GetHashCode();
      if (HasVcuBattSoCDispG) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VcuBattSoCDispG);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasVcuVehRngG) {
        output.WriteRawTag(9);
        output.WriteDouble(VcuVehRngG);
      }
      if (HasVcuVehDrvModG) {
        output.WriteRawTag(16);
        output.WriteUInt32(VcuVehDrvModG);
      }
      if (HasVcuVehRdyStG) {
        output.WriteRawTag(24);
        output.WriteBool(VcuVehRdyStG);
      }
      if (HasVcuDcdcVoltLvG) {
        output.WriteRawTag(33);
        output.WriteDouble(VcuDcdcVoltLvG);
      }
      if (HasVcuDcdcCurrLvG) {
        output.WriteRawTag(41);
        output.WriteDouble(VcuDcdcCurrLvG);
      }
      if (HasVcuDcdcTempG) {
        output.WriteRawTag(49);
        output.WriteDouble(VcuDcdcTempG);
      }
      if (HasVcuDcdcModeStG) {
        output.WriteRawTag(56);
        output.WriteUInt32(VcuDcdcModeStG);
      }
      if (HasVcuBattSoCDispG) {
        output.WriteRawTag(65);
        output.WriteDouble(VcuBattSoCDispG);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasVcuVehRngG) {
        size += 1 + 8;
      }
      if (HasVcuVehDrvModG) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VcuVehDrvModG);
      }
      if (HasVcuVehRdyStG) {
        size += 1 + 1;
      }
      if (HasVcuDcdcVoltLvG) {
        size += 1 + 8;
      }
      if (HasVcuDcdcCurrLvG) {
        size += 1 + 8;
      }
      if (HasVcuDcdcTempG) {
        size += 1 + 8;
      }
      if (HasVcuDcdcModeStG) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VcuDcdcModeStG);
      }
      if (HasVcuBattSoCDispG) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Scu14 other) {
      if (other == null) {
        return;
      }
      if (other.HasVcuVehRngG) {
        VcuVehRngG = other.VcuVehRngG;
      }
      if (other.HasVcuVehDrvModG) {
        VcuVehDrvModG = other.VcuVehDrvModG;
      }
      if (other.HasVcuVehRdyStG) {
        VcuVehRdyStG = other.VcuVehRdyStG;
      }
      if (other.HasVcuDcdcVoltLvG) {
        VcuDcdcVoltLvG = other.VcuDcdcVoltLvG;
      }
      if (other.HasVcuDcdcCurrLvG) {
        VcuDcdcCurrLvG = other.VcuDcdcCurrLvG;
      }
      if (other.HasVcuDcdcTempG) {
        VcuDcdcTempG = other.VcuDcdcTempG;
      }
      if (other.HasVcuDcdcModeStG) {
        VcuDcdcModeStG = other.VcuDcdcModeStG;
      }
      if (other.HasVcuBattSoCDispG) {
        VcuBattSoCDispG = other.VcuBattSoCDispG;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            VcuVehRngG = input.ReadDouble();
            break;
          }
          case 16: {
            VcuVehDrvModG = input.ReadUInt32();
            break;
          }
          case 24: {
            VcuVehRdyStG = input.ReadBool();
            break;
          }
          case 33: {
            VcuDcdcVoltLvG = input.ReadDouble();
            break;
          }
          case 41: {
            VcuDcdcCurrLvG = input.ReadDouble();
            break;
          }
          case 49: {
            VcuDcdcTempG = input.ReadDouble();
            break;
          }
          case 56: {
            VcuDcdcModeStG = input.ReadUInt32();
            break;
          }
          case 65: {
            VcuBattSoCDispG = input.ReadDouble();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Scu14 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Scu14VcuVehDrvModType {
        [pbr::OriginalName("INVALID")] Invalid = 0,
        [pbr::OriginalName("ECO_PLUS_MODE")] EcoPlusMode = 1,
        [pbr::OriginalName("ECO_MODE")] EcoMode = 2,
        [pbr::OriginalName("NORMAL_MODE")] NormalMode = 3,
        [pbr::OriginalName("DRIVING_MODE")] DrivingMode = 4,
        [pbr::OriginalName("SPORT_MODE")] SportMode = 5,
      }

    }
    #endregion

  }

  public sealed partial class Scu15 : pb::IMessage<Scu15> {
    private static readonly pb::MessageParser<Scu15> _parser = new pb::MessageParser<Scu15>(() => new Scu15());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Scu15> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.EngineeringReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scu15() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scu15(Scu15 other) : this() {
      _hasBits0 = other._hasBits0;
      vcuActRecpTorqStG_ = other.vcuActRecpTorqStG_;
      vcuActRecpTorqG_ = other.vcuActRecpTorqG_;
      vcuCrntGearLvlG_ = other.vcuCrntGearLvlG_;
      vcuCrntGearLvlVdG_ = other.vcuCrntGearLvlVdG_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scu15 Clone() {
      return new Scu15(this);
    }

    /// <summary>Field number for the "vcu_act_recp_torq_st_g" field.</summary>
    public const int VcuActRecpTorqStGFieldNumber = 1;
    private readonly static uint VcuActRecpTorqStGDefaultValue = 0;

    private uint vcuActRecpTorqStG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VcuActRecpTorqStG {
      get { if ((_hasBits0 & 1) != 0) { return vcuActRecpTorqStG_; } else { return VcuActRecpTorqStGDefaultValue; } }
      set {
        _hasBits0 |= 1;
        vcuActRecpTorqStG_ = value;
      }
    }
    /// <summary>Gets whether the "vcu_act_recp_torq_st_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVcuActRecpTorqStG {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "vcu_act_recp_torq_st_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVcuActRecpTorqStG() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "vcu_act_recp_torq_g" field.</summary>
    public const int VcuActRecpTorqGFieldNumber = 2;
    private readonly static double VcuActRecpTorqGDefaultValue = 0D;

    private double vcuActRecpTorqG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VcuActRecpTorqG {
      get { if ((_hasBits0 & 2) != 0) { return vcuActRecpTorqG_; } else { return VcuActRecpTorqGDefaultValue; } }
      set {
        _hasBits0 |= 2;
        vcuActRecpTorqG_ = value;
      }
    }
    /// <summary>Gets whether the "vcu_act_recp_torq_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVcuActRecpTorqG {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "vcu_act_recp_torq_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVcuActRecpTorqG() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "vcu_crnt_gear_lvl_g" field.</summary>
    public const int VcuCrntGearLvlGFieldNumber = 3;
    private readonly static uint VcuCrntGearLvlGDefaultValue = 0;

    private uint vcuCrntGearLvlG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VcuCrntGearLvlG {
      get { if ((_hasBits0 & 4) != 0) { return vcuCrntGearLvlG_; } else { return VcuCrntGearLvlGDefaultValue; } }
      set {
        _hasBits0 |= 4;
        vcuCrntGearLvlG_ = value;
      }
    }
    /// <summary>Gets whether the "vcu_crnt_gear_lvl_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVcuCrntGearLvlG {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "vcu_crnt_gear_lvl_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVcuCrntGearLvlG() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "vcu_crnt_gear_lvl_vd_g" field.</summary>
    public const int VcuCrntGearLvlVdGFieldNumber = 4;
    private readonly static bool VcuCrntGearLvlVdGDefaultValue = false;

    private bool vcuCrntGearLvlVdG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VcuCrntGearLvlVdG {
      get { if ((_hasBits0 & 8) != 0) { return vcuCrntGearLvlVdG_; } else { return VcuCrntGearLvlVdGDefaultValue; } }
      set {
        _hasBits0 |= 8;
        vcuCrntGearLvlVdG_ = value;
      }
    }
    /// <summary>Gets whether the "vcu_crnt_gear_lvl_vd_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVcuCrntGearLvlVdG {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "vcu_crnt_gear_lvl_vd_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVcuCrntGearLvlVdG() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Scu15);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Scu15 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VcuActRecpTorqStG != other.VcuActRecpTorqStG) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VcuActRecpTorqG, other.VcuActRecpTorqG)) return false;
      if (VcuCrntGearLvlG != other.VcuCrntGearLvlG) return false;
      if (VcuCrntGearLvlVdG != other.VcuCrntGearLvlVdG) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasVcuActRecpTorqStG) hash ^= VcuActRecpTorqStG.GetHashCode();
      if (HasVcuActRecpTorqG) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VcuActRecpTorqG);
      if (HasVcuCrntGearLvlG) hash ^= VcuCrntGearLvlG.GetHashCode();
      if (HasVcuCrntGearLvlVdG) hash ^= VcuCrntGearLvlVdG.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasVcuActRecpTorqStG) {
        output.WriteRawTag(8);
        output.WriteUInt32(VcuActRecpTorqStG);
      }
      if (HasVcuActRecpTorqG) {
        output.WriteRawTag(17);
        output.WriteDouble(VcuActRecpTorqG);
      }
      if (HasVcuCrntGearLvlG) {
        output.WriteRawTag(24);
        output.WriteUInt32(VcuCrntGearLvlG);
      }
      if (HasVcuCrntGearLvlVdG) {
        output.WriteRawTag(32);
        output.WriteBool(VcuCrntGearLvlVdG);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasVcuActRecpTorqStG) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VcuActRecpTorqStG);
      }
      if (HasVcuActRecpTorqG) {
        size += 1 + 8;
      }
      if (HasVcuCrntGearLvlG) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VcuCrntGearLvlG);
      }
      if (HasVcuCrntGearLvlVdG) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Scu15 other) {
      if (other == null) {
        return;
      }
      if (other.HasVcuActRecpTorqStG) {
        VcuActRecpTorqStG = other.VcuActRecpTorqStG;
      }
      if (other.HasVcuActRecpTorqG) {
        VcuActRecpTorqG = other.VcuActRecpTorqG;
      }
      if (other.HasVcuCrntGearLvlG) {
        VcuCrntGearLvlG = other.VcuCrntGearLvlG;
      }
      if (other.HasVcuCrntGearLvlVdG) {
        VcuCrntGearLvlVdG = other.VcuCrntGearLvlVdG;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            VcuActRecpTorqStG = input.ReadUInt32();
            break;
          }
          case 17: {
            VcuActRecpTorqG = input.ReadDouble();
            break;
          }
          case 24: {
            VcuCrntGearLvlG = input.ReadUInt32();
            break;
          }
          case 32: {
            VcuCrntGearLvlVdG = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Scu15 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum GearCurrentPosition {
        [pbr::OriginalName("GEAR_CURRENT_INVALID")] GearCurrentInvalid = 0,
        [pbr::OriginalName("GEAR_CURRENT_DRIVE")] GearCurrentDrive = 1,
        [pbr::OriginalName("GEAR_CURRENT_NEUTRAL")] GearCurrentNeutral = 2,
        [pbr::OriginalName("GEAR_CURRENT_REVERSE")] GearCurrentReverse = 3,
        [pbr::OriginalName("GEAR_CURRENT_PARK")] GearCurrentPark = 4,
      }

    }
    #endregion

  }

  /// <summary>
  /// aionlx Scu16
  /// </summary>
  public sealed partial class Scu16 : pb::IMessage<Scu16> {
    private static readonly pb::MessageParser<Scu16> _parser = new pb::MessageParser<Scu16>(() => new Scu16());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Scu16> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.EngineeringReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scu16() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scu16(Scu16 other) : this() {
      _hasBits0 = other._hasBits0;
      vcuAccMaxRecpDecelG_ = other.vcuAccMaxRecpDecelG_;
      vcuLateralAssistBtnInfoVdG_ = other.vcuLateralAssistBtnInfoVdG_;
      vcuLateralAssistBtnInfoG_ = other.vcuLateralAssistBtnInfoG_;
      vcuAccMaxRecpDecelVdG_ = other.vcuAccMaxRecpDecelVdG_;
      vcuActVehWheelTorqG_ = other.vcuActVehWheelTorqG_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scu16 Clone() {
      return new Scu16(this);
    }

    /// <summary>Field number for the "vcu_acc_max_recp_decel_g" field.</summary>
    public const int VcuAccMaxRecpDecelGFieldNumber = 1;
    private readonly static double VcuAccMaxRecpDecelGDefaultValue = 0D;

    private double vcuAccMaxRecpDecelG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VcuAccMaxRecpDecelG {
      get { if ((_hasBits0 & 1) != 0) { return vcuAccMaxRecpDecelG_; } else { return VcuAccMaxRecpDecelGDefaultValue; } }
      set {
        _hasBits0 |= 1;
        vcuAccMaxRecpDecelG_ = value;
      }
    }
    /// <summary>Gets whether the "vcu_acc_max_recp_decel_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVcuAccMaxRecpDecelG {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "vcu_acc_max_recp_decel_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVcuAccMaxRecpDecelG() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "vcu_lateral_assist_btn_info_vd_g" field.</summary>
    public const int VcuLateralAssistBtnInfoVdGFieldNumber = 2;
    private readonly static bool VcuLateralAssistBtnInfoVdGDefaultValue = false;

    private bool vcuLateralAssistBtnInfoVdG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VcuLateralAssistBtnInfoVdG {
      get { if ((_hasBits0 & 2) != 0) { return vcuLateralAssistBtnInfoVdG_; } else { return VcuLateralAssistBtnInfoVdGDefaultValue; } }
      set {
        _hasBits0 |= 2;
        vcuLateralAssistBtnInfoVdG_ = value;
      }
    }
    /// <summary>Gets whether the "vcu_lateral_assist_btn_info_vd_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVcuLateralAssistBtnInfoVdG {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "vcu_lateral_assist_btn_info_vd_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVcuLateralAssistBtnInfoVdG() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "vcu_lateral_assist_btn_info_g" field.</summary>
    public const int VcuLateralAssistBtnInfoGFieldNumber = 3;
    private readonly static bool VcuLateralAssistBtnInfoGDefaultValue = false;

    private bool vcuLateralAssistBtnInfoG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VcuLateralAssistBtnInfoG {
      get { if ((_hasBits0 & 4) != 0) { return vcuLateralAssistBtnInfoG_; } else { return VcuLateralAssistBtnInfoGDefaultValue; } }
      set {
        _hasBits0 |= 4;
        vcuLateralAssistBtnInfoG_ = value;
      }
    }
    /// <summary>Gets whether the "vcu_lateral_assist_btn_info_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVcuLateralAssistBtnInfoG {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "vcu_lateral_assist_btn_info_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVcuLateralAssistBtnInfoG() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "vcu_acc_max_recp_decel_vd_g" field.</summary>
    public const int VcuAccMaxRecpDecelVdGFieldNumber = 4;
    private readonly static bool VcuAccMaxRecpDecelVdGDefaultValue = false;

    private bool vcuAccMaxRecpDecelVdG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VcuAccMaxRecpDecelVdG {
      get { if ((_hasBits0 & 8) != 0) { return vcuAccMaxRecpDecelVdG_; } else { return VcuAccMaxRecpDecelVdGDefaultValue; } }
      set {
        _hasBits0 |= 8;
        vcuAccMaxRecpDecelVdG_ = value;
      }
    }
    /// <summary>Gets whether the "vcu_acc_max_recp_decel_vd_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVcuAccMaxRecpDecelVdG {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "vcu_acc_max_recp_decel_vd_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVcuAccMaxRecpDecelVdG() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "vcu_act_veh_wheel_torq_g" field.</summary>
    public const int VcuActVehWheelTorqGFieldNumber = 5;
    private readonly static double VcuActVehWheelTorqGDefaultValue = 0D;

    private double vcuActVehWheelTorqG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VcuActVehWheelTorqG {
      get { if ((_hasBits0 & 16) != 0) { return vcuActVehWheelTorqG_; } else { return VcuActVehWheelTorqGDefaultValue; } }
      set {
        _hasBits0 |= 16;
        vcuActVehWheelTorqG_ = value;
      }
    }
    /// <summary>Gets whether the "vcu_act_veh_wheel_torq_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVcuActVehWheelTorqG {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "vcu_act_veh_wheel_torq_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVcuActVehWheelTorqG() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Scu16);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Scu16 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VcuAccMaxRecpDecelG, other.VcuAccMaxRecpDecelG)) return false;
      if (VcuLateralAssistBtnInfoVdG != other.VcuLateralAssistBtnInfoVdG) return false;
      if (VcuLateralAssistBtnInfoG != other.VcuLateralAssistBtnInfoG) return false;
      if (VcuAccMaxRecpDecelVdG != other.VcuAccMaxRecpDecelVdG) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VcuActVehWheelTorqG, other.VcuActVehWheelTorqG)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasVcuAccMaxRecpDecelG) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VcuAccMaxRecpDecelG);
      if (HasVcuLateralAssistBtnInfoVdG) hash ^= VcuLateralAssistBtnInfoVdG.GetHashCode();
      if (HasVcuLateralAssistBtnInfoG) hash ^= VcuLateralAssistBtnInfoG.GetHashCode();
      if (HasVcuAccMaxRecpDecelVdG) hash ^= VcuAccMaxRecpDecelVdG.GetHashCode();
      if (HasVcuActVehWheelTorqG) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VcuActVehWheelTorqG);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasVcuAccMaxRecpDecelG) {
        output.WriteRawTag(9);
        output.WriteDouble(VcuAccMaxRecpDecelG);
      }
      if (HasVcuLateralAssistBtnInfoVdG) {
        output.WriteRawTag(16);
        output.WriteBool(VcuLateralAssistBtnInfoVdG);
      }
      if (HasVcuLateralAssistBtnInfoG) {
        output.WriteRawTag(24);
        output.WriteBool(VcuLateralAssistBtnInfoG);
      }
      if (HasVcuAccMaxRecpDecelVdG) {
        output.WriteRawTag(32);
        output.WriteBool(VcuAccMaxRecpDecelVdG);
      }
      if (HasVcuActVehWheelTorqG) {
        output.WriteRawTag(41);
        output.WriteDouble(VcuActVehWheelTorqG);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasVcuAccMaxRecpDecelG) {
        size += 1 + 8;
      }
      if (HasVcuLateralAssistBtnInfoVdG) {
        size += 1 + 1;
      }
      if (HasVcuLateralAssistBtnInfoG) {
        size += 1 + 1;
      }
      if (HasVcuAccMaxRecpDecelVdG) {
        size += 1 + 1;
      }
      if (HasVcuActVehWheelTorqG) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Scu16 other) {
      if (other == null) {
        return;
      }
      if (other.HasVcuAccMaxRecpDecelG) {
        VcuAccMaxRecpDecelG = other.VcuAccMaxRecpDecelG;
      }
      if (other.HasVcuLateralAssistBtnInfoVdG) {
        VcuLateralAssistBtnInfoVdG = other.VcuLateralAssistBtnInfoVdG;
      }
      if (other.HasVcuLateralAssistBtnInfoG) {
        VcuLateralAssistBtnInfoG = other.VcuLateralAssistBtnInfoG;
      }
      if (other.HasVcuAccMaxRecpDecelVdG) {
        VcuAccMaxRecpDecelVdG = other.VcuAccMaxRecpDecelVdG;
      }
      if (other.HasVcuActVehWheelTorqG) {
        VcuActVehWheelTorqG = other.VcuActVehWheelTorqG;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            VcuAccMaxRecpDecelG = input.ReadDouble();
            break;
          }
          case 16: {
            VcuLateralAssistBtnInfoVdG = input.ReadBool();
            break;
          }
          case 24: {
            VcuLateralAssistBtnInfoG = input.ReadBool();
            break;
          }
          case 32: {
            VcuAccMaxRecpDecelVdG = input.ReadBool();
            break;
          }
          case 41: {
            VcuActVehWheelTorqG = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Scu19 : pb::IMessage<Scu19> {
    private static readonly pb::MessageParser<Scu19> _parser = new pb::MessageParser<Scu19>(() => new Scu19());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Scu19> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.EngineeringReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scu19() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scu19(Scu19 other) : this() {
      _hasBits0 = other._hasBits0;
      scuVinDataPackageNum_ = other.scuVinDataPackageNum_;
      scuVinByte1_ = other.scuVinByte1_;
      scuVinByte2_ = other.scuVinByte2_;
      scuVinByte3_ = other.scuVinByte3_;
      scuVinByte4_ = other.scuVinByte4_;
      scuVinByte5_ = other.scuVinByte5_;
      scuVinByte6_ = other.scuVinByte6_;
      scuVinByte7_ = other.scuVinByte7_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scu19 Clone() {
      return new Scu19(this);
    }

    /// <summary>Field number for the "scu_vin_data_package_num" field.</summary>
    public const int ScuVinDataPackageNumFieldNumber = 1;
    private readonly static uint ScuVinDataPackageNumDefaultValue = 0;

    private uint scuVinDataPackageNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScuVinDataPackageNum {
      get { if ((_hasBits0 & 1) != 0) { return scuVinDataPackageNum_; } else { return ScuVinDataPackageNumDefaultValue; } }
      set {
        _hasBits0 |= 1;
        scuVinDataPackageNum_ = value;
      }
    }
    /// <summary>Gets whether the "scu_vin_data_package_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScuVinDataPackageNum {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "scu_vin_data_package_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScuVinDataPackageNum() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "scu_vin_byte1" field.</summary>
    public const int ScuVinByte1FieldNumber = 2;
    private readonly static uint ScuVinByte1DefaultValue = 0;

    private uint scuVinByte1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScuVinByte1 {
      get { if ((_hasBits0 & 2) != 0) { return scuVinByte1_; } else { return ScuVinByte1DefaultValue; } }
      set {
        _hasBits0 |= 2;
        scuVinByte1_ = value;
      }
    }
    /// <summary>Gets whether the "scu_vin_byte1" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScuVinByte1 {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "scu_vin_byte1" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScuVinByte1() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "scu_vin_byte2" field.</summary>
    public const int ScuVinByte2FieldNumber = 3;
    private readonly static uint ScuVinByte2DefaultValue = 0;

    private uint scuVinByte2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScuVinByte2 {
      get { if ((_hasBits0 & 4) != 0) { return scuVinByte2_; } else { return ScuVinByte2DefaultValue; } }
      set {
        _hasBits0 |= 4;
        scuVinByte2_ = value;
      }
    }
    /// <summary>Gets whether the "scu_vin_byte2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScuVinByte2 {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "scu_vin_byte2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScuVinByte2() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "scu_vin_byte3" field.</summary>
    public const int ScuVinByte3FieldNumber = 4;
    private readonly static uint ScuVinByte3DefaultValue = 0;

    private uint scuVinByte3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScuVinByte3 {
      get { if ((_hasBits0 & 8) != 0) { return scuVinByte3_; } else { return ScuVinByte3DefaultValue; } }
      set {
        _hasBits0 |= 8;
        scuVinByte3_ = value;
      }
    }
    /// <summary>Gets whether the "scu_vin_byte3" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScuVinByte3 {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "scu_vin_byte3" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScuVinByte3() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "scu_vin_byte4" field.</summary>
    public const int ScuVinByte4FieldNumber = 5;
    private readonly static uint ScuVinByte4DefaultValue = 0;

    private uint scuVinByte4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScuVinByte4 {
      get { if ((_hasBits0 & 16) != 0) { return scuVinByte4_; } else { return ScuVinByte4DefaultValue; } }
      set {
        _hasBits0 |= 16;
        scuVinByte4_ = value;
      }
    }
    /// <summary>Gets whether the "scu_vin_byte4" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScuVinByte4 {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "scu_vin_byte4" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScuVinByte4() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "scu_vin_byte5" field.</summary>
    public const int ScuVinByte5FieldNumber = 6;
    private readonly static uint ScuVinByte5DefaultValue = 0;

    private uint scuVinByte5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScuVinByte5 {
      get { if ((_hasBits0 & 32) != 0) { return scuVinByte5_; } else { return ScuVinByte5DefaultValue; } }
      set {
        _hasBits0 |= 32;
        scuVinByte5_ = value;
      }
    }
    /// <summary>Gets whether the "scu_vin_byte5" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScuVinByte5 {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "scu_vin_byte5" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScuVinByte5() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "scu_vin_byte6" field.</summary>
    public const int ScuVinByte6FieldNumber = 7;
    private readonly static uint ScuVinByte6DefaultValue = 0;

    private uint scuVinByte6_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScuVinByte6 {
      get { if ((_hasBits0 & 64) != 0) { return scuVinByte6_; } else { return ScuVinByte6DefaultValue; } }
      set {
        _hasBits0 |= 64;
        scuVinByte6_ = value;
      }
    }
    /// <summary>Gets whether the "scu_vin_byte6" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScuVinByte6 {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "scu_vin_byte6" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScuVinByte6() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "scu_vin_byte7" field.</summary>
    public const int ScuVinByte7FieldNumber = 8;
    private readonly static uint ScuVinByte7DefaultValue = 0;

    private uint scuVinByte7_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScuVinByte7 {
      get { if ((_hasBits0 & 128) != 0) { return scuVinByte7_; } else { return ScuVinByte7DefaultValue; } }
      set {
        _hasBits0 |= 128;
        scuVinByte7_ = value;
      }
    }
    /// <summary>Gets whether the "scu_vin_byte7" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScuVinByte7 {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "scu_vin_byte7" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScuVinByte7() {
      _hasBits0 &= ~128;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Scu19);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Scu19 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ScuVinDataPackageNum != other.ScuVinDataPackageNum) return false;
      if (ScuVinByte1 != other.ScuVinByte1) return false;
      if (ScuVinByte2 != other.ScuVinByte2) return false;
      if (ScuVinByte3 != other.ScuVinByte3) return false;
      if (ScuVinByte4 != other.ScuVinByte4) return false;
      if (ScuVinByte5 != other.ScuVinByte5) return false;
      if (ScuVinByte6 != other.ScuVinByte6) return false;
      if (ScuVinByte7 != other.ScuVinByte7) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasScuVinDataPackageNum) hash ^= ScuVinDataPackageNum.GetHashCode();
      if (HasScuVinByte1) hash ^= ScuVinByte1.GetHashCode();
      if (HasScuVinByte2) hash ^= ScuVinByte2.GetHashCode();
      if (HasScuVinByte3) hash ^= ScuVinByte3.GetHashCode();
      if (HasScuVinByte4) hash ^= ScuVinByte4.GetHashCode();
      if (HasScuVinByte5) hash ^= ScuVinByte5.GetHashCode();
      if (HasScuVinByte6) hash ^= ScuVinByte6.GetHashCode();
      if (HasScuVinByte7) hash ^= ScuVinByte7.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasScuVinDataPackageNum) {
        output.WriteRawTag(8);
        output.WriteUInt32(ScuVinDataPackageNum);
      }
      if (HasScuVinByte1) {
        output.WriteRawTag(16);
        output.WriteUInt32(ScuVinByte1);
      }
      if (HasScuVinByte2) {
        output.WriteRawTag(24);
        output.WriteUInt32(ScuVinByte2);
      }
      if (HasScuVinByte3) {
        output.WriteRawTag(32);
        output.WriteUInt32(ScuVinByte3);
      }
      if (HasScuVinByte4) {
        output.WriteRawTag(40);
        output.WriteUInt32(ScuVinByte4);
      }
      if (HasScuVinByte5) {
        output.WriteRawTag(48);
        output.WriteUInt32(ScuVinByte5);
      }
      if (HasScuVinByte6) {
        output.WriteRawTag(56);
        output.WriteUInt32(ScuVinByte6);
      }
      if (HasScuVinByte7) {
        output.WriteRawTag(64);
        output.WriteUInt32(ScuVinByte7);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasScuVinDataPackageNum) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScuVinDataPackageNum);
      }
      if (HasScuVinByte1) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScuVinByte1);
      }
      if (HasScuVinByte2) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScuVinByte2);
      }
      if (HasScuVinByte3) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScuVinByte3);
      }
      if (HasScuVinByte4) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScuVinByte4);
      }
      if (HasScuVinByte5) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScuVinByte5);
      }
      if (HasScuVinByte6) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScuVinByte6);
      }
      if (HasScuVinByte7) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScuVinByte7);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Scu19 other) {
      if (other == null) {
        return;
      }
      if (other.HasScuVinDataPackageNum) {
        ScuVinDataPackageNum = other.ScuVinDataPackageNum;
      }
      if (other.HasScuVinByte1) {
        ScuVinByte1 = other.ScuVinByte1;
      }
      if (other.HasScuVinByte2) {
        ScuVinByte2 = other.ScuVinByte2;
      }
      if (other.HasScuVinByte3) {
        ScuVinByte3 = other.ScuVinByte3;
      }
      if (other.HasScuVinByte4) {
        ScuVinByte4 = other.ScuVinByte4;
      }
      if (other.HasScuVinByte5) {
        ScuVinByte5 = other.ScuVinByte5;
      }
      if (other.HasScuVinByte6) {
        ScuVinByte6 = other.ScuVinByte6;
      }
      if (other.HasScuVinByte7) {
        ScuVinByte7 = other.ScuVinByte7;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ScuVinDataPackageNum = input.ReadUInt32();
            break;
          }
          case 16: {
            ScuVinByte1 = input.ReadUInt32();
            break;
          }
          case 24: {
            ScuVinByte2 = input.ReadUInt32();
            break;
          }
          case 32: {
            ScuVinByte3 = input.ReadUInt32();
            break;
          }
          case 40: {
            ScuVinByte4 = input.ReadUInt32();
            break;
          }
          case 48: {
            ScuVinByte5 = input.ReadUInt32();
            break;
          }
          case 56: {
            ScuVinByte6 = input.ReadUInt32();
            break;
          }
          case 64: {
            ScuVinByte7 = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Safety : pb::IMessage<Safety> {
    private static readonly pb::MessageParser<Safety> _parser = new pb::MessageParser<Safety>(() => new Safety());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Safety> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.EngineeringReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Safety() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Safety(Safety other) : this() {
      _hasBits0 = other._hasBits0;
      isDriverBuckled_ = other.isDriverBuckled_;
      isPassengerDetected_ = other.isPassengerDetected_;
      isPassengerBuckled_ = other.isPassengerBuckled_;
      isDriverDoorOpen_ = other.isDriverDoorOpen_;
      isPassengerDoorOpen_ = other.isPassengerDoorOpen_;
      isRearleftDoorOpen_ = other.isRearleftDoorOpen_;
      isRearrightDoorOpen_ = other.isRearrightDoorOpen_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Safety Clone() {
      return new Safety(this);
    }

    /// <summary>Field number for the "is_driver_buckled" field.</summary>
    public const int IsDriverBuckledFieldNumber = 1;
    private readonly static bool IsDriverBuckledDefaultValue = false;

    private bool isDriverBuckled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDriverBuckled {
      get { if ((_hasBits0 & 1) != 0) { return isDriverBuckled_; } else { return IsDriverBuckledDefaultValue; } }
      set {
        _hasBits0 |= 1;
        isDriverBuckled_ = value;
      }
    }
    /// <summary>Gets whether the "is_driver_buckled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsDriverBuckled {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "is_driver_buckled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsDriverBuckled() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "is_passenger_detected" field.</summary>
    public const int IsPassengerDetectedFieldNumber = 2;
    private readonly static bool IsPassengerDetectedDefaultValue = false;

    private bool isPassengerDetected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPassengerDetected {
      get { if ((_hasBits0 & 2) != 0) { return isPassengerDetected_; } else { return IsPassengerDetectedDefaultValue; } }
      set {
        _hasBits0 |= 2;
        isPassengerDetected_ = value;
      }
    }
    /// <summary>Gets whether the "is_passenger_detected" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsPassengerDetected {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "is_passenger_detected" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsPassengerDetected() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "is_passenger_buckled" field.</summary>
    public const int IsPassengerBuckledFieldNumber = 3;
    private readonly static bool IsPassengerBuckledDefaultValue = false;

    private bool isPassengerBuckled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPassengerBuckled {
      get { if ((_hasBits0 & 4) != 0) { return isPassengerBuckled_; } else { return IsPassengerBuckledDefaultValue; } }
      set {
        _hasBits0 |= 4;
        isPassengerBuckled_ = value;
      }
    }
    /// <summary>Gets whether the "is_passenger_buckled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsPassengerBuckled {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "is_passenger_buckled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsPassengerBuckled() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "is_driver_door_open" field.</summary>
    public const int IsDriverDoorOpenFieldNumber = 4;
    private readonly static bool IsDriverDoorOpenDefaultValue = false;

    private bool isDriverDoorOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDriverDoorOpen {
      get { if ((_hasBits0 & 8) != 0) { return isDriverDoorOpen_; } else { return IsDriverDoorOpenDefaultValue; } }
      set {
        _hasBits0 |= 8;
        isDriverDoorOpen_ = value;
      }
    }
    /// <summary>Gets whether the "is_driver_door_open" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsDriverDoorOpen {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "is_driver_door_open" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsDriverDoorOpen() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "is_passenger_door_open" field.</summary>
    public const int IsPassengerDoorOpenFieldNumber = 5;
    private readonly static bool IsPassengerDoorOpenDefaultValue = false;

    private bool isPassengerDoorOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPassengerDoorOpen {
      get { if ((_hasBits0 & 16) != 0) { return isPassengerDoorOpen_; } else { return IsPassengerDoorOpenDefaultValue; } }
      set {
        _hasBits0 |= 16;
        isPassengerDoorOpen_ = value;
      }
    }
    /// <summary>Gets whether the "is_passenger_door_open" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsPassengerDoorOpen {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "is_passenger_door_open" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsPassengerDoorOpen() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "is_rearleft_door_open" field.</summary>
    public const int IsRearleftDoorOpenFieldNumber = 6;
    private readonly static bool IsRearleftDoorOpenDefaultValue = false;

    private bool isRearleftDoorOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRearleftDoorOpen {
      get { if ((_hasBits0 & 32) != 0) { return isRearleftDoorOpen_; } else { return IsRearleftDoorOpenDefaultValue; } }
      set {
        _hasBits0 |= 32;
        isRearleftDoorOpen_ = value;
      }
    }
    /// <summary>Gets whether the "is_rearleft_door_open" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsRearleftDoorOpen {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "is_rearleft_door_open" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsRearleftDoorOpen() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "is_rearright_door_open" field.</summary>
    public const int IsRearrightDoorOpenFieldNumber = 7;
    private readonly static bool IsRearrightDoorOpenDefaultValue = false;

    private bool isRearrightDoorOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRearrightDoorOpen {
      get { if ((_hasBits0 & 64) != 0) { return isRearrightDoorOpen_; } else { return IsRearrightDoorOpenDefaultValue; } }
      set {
        _hasBits0 |= 64;
        isRearrightDoorOpen_ = value;
      }
    }
    /// <summary>Gets whether the "is_rearright_door_open" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsRearrightDoorOpen {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "is_rearright_door_open" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsRearrightDoorOpen() {
      _hasBits0 &= ~64;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Safety);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Safety other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsDriverBuckled != other.IsDriverBuckled) return false;
      if (IsPassengerDetected != other.IsPassengerDetected) return false;
      if (IsPassengerBuckled != other.IsPassengerBuckled) return false;
      if (IsDriverDoorOpen != other.IsDriverDoorOpen) return false;
      if (IsPassengerDoorOpen != other.IsPassengerDoorOpen) return false;
      if (IsRearleftDoorOpen != other.IsRearleftDoorOpen) return false;
      if (IsRearrightDoorOpen != other.IsRearrightDoorOpen) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIsDriverBuckled) hash ^= IsDriverBuckled.GetHashCode();
      if (HasIsPassengerDetected) hash ^= IsPassengerDetected.GetHashCode();
      if (HasIsPassengerBuckled) hash ^= IsPassengerBuckled.GetHashCode();
      if (HasIsDriverDoorOpen) hash ^= IsDriverDoorOpen.GetHashCode();
      if (HasIsPassengerDoorOpen) hash ^= IsPassengerDoorOpen.GetHashCode();
      if (HasIsRearleftDoorOpen) hash ^= IsRearleftDoorOpen.GetHashCode();
      if (HasIsRearrightDoorOpen) hash ^= IsRearrightDoorOpen.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasIsDriverBuckled) {
        output.WriteRawTag(8);
        output.WriteBool(IsDriverBuckled);
      }
      if (HasIsPassengerDetected) {
        output.WriteRawTag(16);
        output.WriteBool(IsPassengerDetected);
      }
      if (HasIsPassengerBuckled) {
        output.WriteRawTag(24);
        output.WriteBool(IsPassengerBuckled);
      }
      if (HasIsDriverDoorOpen) {
        output.WriteRawTag(32);
        output.WriteBool(IsDriverDoorOpen);
      }
      if (HasIsPassengerDoorOpen) {
        output.WriteRawTag(40);
        output.WriteBool(IsPassengerDoorOpen);
      }
      if (HasIsRearleftDoorOpen) {
        output.WriteRawTag(48);
        output.WriteBool(IsRearleftDoorOpen);
      }
      if (HasIsRearrightDoorOpen) {
        output.WriteRawTag(56);
        output.WriteBool(IsRearrightDoorOpen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasIsDriverBuckled) {
        size += 1 + 1;
      }
      if (HasIsPassengerDetected) {
        size += 1 + 1;
      }
      if (HasIsPassengerBuckled) {
        size += 1 + 1;
      }
      if (HasIsDriverDoorOpen) {
        size += 1 + 1;
      }
      if (HasIsPassengerDoorOpen) {
        size += 1 + 1;
      }
      if (HasIsRearleftDoorOpen) {
        size += 1 + 1;
      }
      if (HasIsRearrightDoorOpen) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Safety other) {
      if (other == null) {
        return;
      }
      if (other.HasIsDriverBuckled) {
        IsDriverBuckled = other.IsDriverBuckled;
      }
      if (other.HasIsPassengerDetected) {
        IsPassengerDetected = other.IsPassengerDetected;
      }
      if (other.HasIsPassengerBuckled) {
        IsPassengerBuckled = other.IsPassengerBuckled;
      }
      if (other.HasIsDriverDoorOpen) {
        IsDriverDoorOpen = other.IsDriverDoorOpen;
      }
      if (other.HasIsPassengerDoorOpen) {
        IsPassengerDoorOpen = other.IsPassengerDoorOpen;
      }
      if (other.HasIsRearleftDoorOpen) {
        IsRearleftDoorOpen = other.IsRearleftDoorOpen;
      }
      if (other.HasIsRearrightDoorOpen) {
        IsRearrightDoorOpen = other.IsRearrightDoorOpen;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsDriverBuckled = input.ReadBool();
            break;
          }
          case 16: {
            IsPassengerDetected = input.ReadBool();
            break;
          }
          case 24: {
            IsPassengerBuckled = input.ReadBool();
            break;
          }
          case 32: {
            IsDriverDoorOpen = input.ReadBool();
            break;
          }
          case 40: {
            IsPassengerDoorOpen = input.ReadBool();
            break;
          }
          case 48: {
            IsRearleftDoorOpen = input.ReadBool();
            break;
          }
          case 56: {
            IsRearrightDoorOpen = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChassisDetail : pb::IMessage<ChassisDetail> {
    private static readonly pb::MessageParser<ChassisDetail> _parser = new pb::MessageParser<ChassisDetail>(() => new ChassisDetail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChassisDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.EngineeringReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChassisDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChassisDetail(ChassisDetail other) : this() {
      scu1_ = other.scu1_ != null ? other.scu1_.Clone() : null;
      scu8_ = other.scu8_ != null ? other.scu8_.Clone() : null;
      scu10_ = other.scu10_ != null ? other.scu10_.Clone() : null;
      scu13_ = other.scu13_ != null ? other.scu13_.Clone() : null;
      scu14_ = other.scu14_ != null ? other.scu14_.Clone() : null;
      scu15_ = other.scu15_ != null ? other.scu15_.Clone() : null;
      scu16_ = other.scu16_ != null ? other.scu16_.Clone() : null;
      scu19_ = other.scu19_ != null ? other.scu19_.Clone() : null;
      safety_ = other.safety_ != null ? other.safety_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChassisDetail Clone() {
      return new ChassisDetail(this);
    }

    /// <summary>Field number for the "scu_1" field.</summary>
    public const int Scu1FieldNumber = 2;
    private global::Xviewer.Scu1 scu1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Scu1 Scu1 {
      get { return scu1_; }
      set {
        scu1_ = value;
      }
    }

    /// <summary>Field number for the "scu_8" field.</summary>
    public const int Scu8FieldNumber = 3;
    private global::Xviewer.Scu8 scu8_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Scu8 Scu8 {
      get { return scu8_; }
      set {
        scu8_ = value;
      }
    }

    /// <summary>Field number for the "scu_10" field.</summary>
    public const int Scu10FieldNumber = 4;
    private global::Xviewer.Scu10 scu10_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Scu10 Scu10 {
      get { return scu10_; }
      set {
        scu10_ = value;
      }
    }

    /// <summary>Field number for the "scu_13" field.</summary>
    public const int Scu13FieldNumber = 5;
    private global::Xviewer.Scu13 scu13_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Scu13 Scu13 {
      get { return scu13_; }
      set {
        scu13_ = value;
      }
    }

    /// <summary>Field number for the "scu_14" field.</summary>
    public const int Scu14FieldNumber = 6;
    private global::Xviewer.Scu14 scu14_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Scu14 Scu14 {
      get { return scu14_; }
      set {
        scu14_ = value;
      }
    }

    /// <summary>Field number for the "scu_15" field.</summary>
    public const int Scu15FieldNumber = 7;
    private global::Xviewer.Scu15 scu15_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Scu15 Scu15 {
      get { return scu15_; }
      set {
        scu15_ = value;
      }
    }

    /// <summary>Field number for the "scu_16" field.</summary>
    public const int Scu16FieldNumber = 8;
    private global::Xviewer.Scu16 scu16_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Scu16 Scu16 {
      get { return scu16_; }
      set {
        scu16_ = value;
      }
    }

    /// <summary>Field number for the "scu_19" field.</summary>
    public const int Scu19FieldNumber = 9;
    private global::Xviewer.Scu19 scu19_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Scu19 Scu19 {
      get { return scu19_; }
      set {
        scu19_ = value;
      }
    }

    /// <summary>Field number for the "safety" field.</summary>
    public const int SafetyFieldNumber = 10;
    private global::Xviewer.Safety safety_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Safety Safety {
      get { return safety_; }
      set {
        safety_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChassisDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChassisDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Scu1, other.Scu1)) return false;
      if (!object.Equals(Scu8, other.Scu8)) return false;
      if (!object.Equals(Scu10, other.Scu10)) return false;
      if (!object.Equals(Scu13, other.Scu13)) return false;
      if (!object.Equals(Scu14, other.Scu14)) return false;
      if (!object.Equals(Scu15, other.Scu15)) return false;
      if (!object.Equals(Scu16, other.Scu16)) return false;
      if (!object.Equals(Scu19, other.Scu19)) return false;
      if (!object.Equals(Safety, other.Safety)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (scu1_ != null) hash ^= Scu1.GetHashCode();
      if (scu8_ != null) hash ^= Scu8.GetHashCode();
      if (scu10_ != null) hash ^= Scu10.GetHashCode();
      if (scu13_ != null) hash ^= Scu13.GetHashCode();
      if (scu14_ != null) hash ^= Scu14.GetHashCode();
      if (scu15_ != null) hash ^= Scu15.GetHashCode();
      if (scu16_ != null) hash ^= Scu16.GetHashCode();
      if (scu19_ != null) hash ^= Scu19.GetHashCode();
      if (safety_ != null) hash ^= Safety.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (scu1_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Scu1);
      }
      if (scu8_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Scu8);
      }
      if (scu10_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Scu10);
      }
      if (scu13_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Scu13);
      }
      if (scu14_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Scu14);
      }
      if (scu15_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Scu15);
      }
      if (scu16_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Scu16);
      }
      if (scu19_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Scu19);
      }
      if (safety_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Safety);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (scu1_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scu1);
      }
      if (scu8_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scu8);
      }
      if (scu10_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scu10);
      }
      if (scu13_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scu13);
      }
      if (scu14_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scu14);
      }
      if (scu15_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scu15);
      }
      if (scu16_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scu16);
      }
      if (scu19_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scu19);
      }
      if (safety_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Safety);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChassisDetail other) {
      if (other == null) {
        return;
      }
      if (other.scu1_ != null) {
        if (scu1_ == null) {
          Scu1 = new global::Xviewer.Scu1();
        }
        Scu1.MergeFrom(other.Scu1);
      }
      if (other.scu8_ != null) {
        if (scu8_ == null) {
          Scu8 = new global::Xviewer.Scu8();
        }
        Scu8.MergeFrom(other.Scu8);
      }
      if (other.scu10_ != null) {
        if (scu10_ == null) {
          Scu10 = new global::Xviewer.Scu10();
        }
        Scu10.MergeFrom(other.Scu10);
      }
      if (other.scu13_ != null) {
        if (scu13_ == null) {
          Scu13 = new global::Xviewer.Scu13();
        }
        Scu13.MergeFrom(other.Scu13);
      }
      if (other.scu14_ != null) {
        if (scu14_ == null) {
          Scu14 = new global::Xviewer.Scu14();
        }
        Scu14.MergeFrom(other.Scu14);
      }
      if (other.scu15_ != null) {
        if (scu15_ == null) {
          Scu15 = new global::Xviewer.Scu15();
        }
        Scu15.MergeFrom(other.Scu15);
      }
      if (other.scu16_ != null) {
        if (scu16_ == null) {
          Scu16 = new global::Xviewer.Scu16();
        }
        Scu16.MergeFrom(other.Scu16);
      }
      if (other.scu19_ != null) {
        if (scu19_ == null) {
          Scu19 = new global::Xviewer.Scu19();
        }
        Scu19.MergeFrom(other.Scu19);
      }
      if (other.safety_ != null) {
        if (safety_ == null) {
          Safety = new global::Xviewer.Safety();
        }
        Safety.MergeFrom(other.Safety);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            if (scu1_ == null) {
              Scu1 = new global::Xviewer.Scu1();
            }
            input.ReadMessage(Scu1);
            break;
          }
          case 26: {
            if (scu8_ == null) {
              Scu8 = new global::Xviewer.Scu8();
            }
            input.ReadMessage(Scu8);
            break;
          }
          case 34: {
            if (scu10_ == null) {
              Scu10 = new global::Xviewer.Scu10();
            }
            input.ReadMessage(Scu10);
            break;
          }
          case 42: {
            if (scu13_ == null) {
              Scu13 = new global::Xviewer.Scu13();
            }
            input.ReadMessage(Scu13);
            break;
          }
          case 50: {
            if (scu14_ == null) {
              Scu14 = new global::Xviewer.Scu14();
            }
            input.ReadMessage(Scu14);
            break;
          }
          case 58: {
            if (scu15_ == null) {
              Scu15 = new global::Xviewer.Scu15();
            }
            input.ReadMessage(Scu15);
            break;
          }
          case 66: {
            if (scu16_ == null) {
              Scu16 = new global::Xviewer.Scu16();
            }
            input.ReadMessage(Scu16);
            break;
          }
          case 74: {
            if (scu19_ == null) {
              Scu19 = new global::Xviewer.Scu19();
            }
            input.ReadMessage(Scu19);
            break;
          }
          case 82: {
            if (safety_ == null) {
              Safety = new global::Xviewer.Safety();
            }
            input.ReadMessage(Safety);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Chassis : pb::IMessage<Chassis> {
    private static readonly pb::MessageParser<Chassis> _parser = new pb::MessageParser<Chassis>(() => new Chassis());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Chassis> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.EngineeringReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chassis() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chassis(Chassis other) : this() {
      _hasBits0 = other._hasBits0;
      bcsVehSpdG_ = other.bcsVehSpdG_;
      bcsActVehLaltrlAccelG_ = other.bcsActVehLaltrlAccelG_;
      bcsActVehLongAccelG_ = other.bcsActVehLongAccelG_;
      epsSteeringAngleG_ = other.epsSteeringAngleG_;
      epsSteeringAngleSpdG_ = other.epsSteeringAngleSpdG_;
      scuLatCtrlMode_ = other.scuLatCtrlMode_;
      scuLngCtrlMode_ = other.scuLngCtrlMode_;
      scuLatQuitReport_ = other.scuLatQuitReport_;
      scuLngQuitReport_ = other.scuLngQuitReport_;
      vcuCrntGearLvlG_ = other.vcuCrntGearLvlG_;
      vcuActVehWheelTorqG_ = other.vcuActVehWheelTorqG_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chassis Clone() {
      return new Chassis(this);
    }

    /// <summary>Field number for the "bcs_veh_spd_g" field.</summary>
    public const int BcsVehSpdGFieldNumber = 1;
    private readonly static double BcsVehSpdGDefaultValue = 0D;

    private double bcsVehSpdG_;
    /// <summary>
    /// from scu_1, actual speed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BcsVehSpdG {
      get { if ((_hasBits0 & 1) != 0) { return bcsVehSpdG_; } else { return BcsVehSpdGDefaultValue; } }
      set {
        _hasBits0 |= 1;
        bcsVehSpdG_ = value;
      }
    }
    /// <summary>Gets whether the "bcs_veh_spd_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBcsVehSpdG {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "bcs_veh_spd_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBcsVehSpdG() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "bcs_act_veh_laltrl_accel_g" field.</summary>
    public const int BcsActVehLaltrlAccelGFieldNumber = 2;
    private readonly static double BcsActVehLaltrlAccelGDefaultValue = 0D;

    private double bcsActVehLaltrlAccelG_;
    /// <summary>
    /// from scu_8, actual lat accel
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BcsActVehLaltrlAccelG {
      get { if ((_hasBits0 & 2) != 0) { return bcsActVehLaltrlAccelG_; } else { return BcsActVehLaltrlAccelGDefaultValue; } }
      set {
        _hasBits0 |= 2;
        bcsActVehLaltrlAccelG_ = value;
      }
    }
    /// <summary>Gets whether the "bcs_act_veh_laltrl_accel_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBcsActVehLaltrlAccelG {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "bcs_act_veh_laltrl_accel_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBcsActVehLaltrlAccelG() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "bcs_act_veh_long_accel_g" field.</summary>
    public const int BcsActVehLongAccelGFieldNumber = 3;
    private readonly static double BcsActVehLongAccelGDefaultValue = 0D;

    private double bcsActVehLongAccelG_;
    /// <summary>
    /// from scu_8, actual  lng accel
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BcsActVehLongAccelG {
      get { if ((_hasBits0 & 4) != 0) { return bcsActVehLongAccelG_; } else { return BcsActVehLongAccelGDefaultValue; } }
      set {
        _hasBits0 |= 4;
        bcsActVehLongAccelG_ = value;
      }
    }
    /// <summary>Gets whether the "bcs_act_veh_long_accel_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBcsActVehLongAccelG {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "bcs_act_veh_long_accel_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBcsActVehLongAccelG() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "eps_steering_angle_g" field.</summary>
    public const int EpsSteeringAngleGFieldNumber = 4;
    private readonly static double EpsSteeringAngleGDefaultValue = 0D;

    private double epsSteeringAngleG_;
    /// <summary>
    /// from scu_10, actual steer angle
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EpsSteeringAngleG {
      get { if ((_hasBits0 & 8) != 0) { return epsSteeringAngleG_; } else { return EpsSteeringAngleGDefaultValue; } }
      set {
        _hasBits0 |= 8;
        epsSteeringAngleG_ = value;
      }
    }
    /// <summary>Gets whether the "eps_steering_angle_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEpsSteeringAngleG {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "eps_steering_angle_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEpsSteeringAngleG() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "eps_steering_angle_spd_g" field.</summary>
    public const int EpsSteeringAngleSpdGFieldNumber = 5;
    private readonly static double EpsSteeringAngleSpdGDefaultValue = 0D;

    private double epsSteeringAngleSpdG_;
    /// <summary>
    /// from scu_10, actual steer angle_speed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EpsSteeringAngleSpdG {
      get { if ((_hasBits0 & 16) != 0) { return epsSteeringAngleSpdG_; } else { return EpsSteeringAngleSpdGDefaultValue; } }
      set {
        _hasBits0 |= 16;
        epsSteeringAngleSpdG_ = value;
      }
    }
    /// <summary>Gets whether the "eps_steering_angle_spd_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEpsSteeringAngleSpdG {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "eps_steering_angle_spd_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEpsSteeringAngleSpdG() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "scu_lat_ctrl_mode" field.</summary>
    public const int ScuLatCtrlModeFieldNumber = 6;
    private readonly static uint ScuLatCtrlModeDefaultValue = 0;

    private uint scuLatCtrlMode_;
    /// <summary>
    /// from scu_13, lat mode
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScuLatCtrlMode {
      get { if ((_hasBits0 & 32) != 0) { return scuLatCtrlMode_; } else { return ScuLatCtrlModeDefaultValue; } }
      set {
        _hasBits0 |= 32;
        scuLatCtrlMode_ = value;
      }
    }
    /// <summary>Gets whether the "scu_lat_ctrl_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScuLatCtrlMode {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "scu_lat_ctrl_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScuLatCtrlMode() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "scu_lng_ctrl_mode" field.</summary>
    public const int ScuLngCtrlModeFieldNumber = 7;
    private readonly static uint ScuLngCtrlModeDefaultValue = 0;

    private uint scuLngCtrlMode_;
    /// <summary>
    /// from scu_13, lng mode
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScuLngCtrlMode {
      get { if ((_hasBits0 & 64) != 0) { return scuLngCtrlMode_; } else { return ScuLngCtrlModeDefaultValue; } }
      set {
        _hasBits0 |= 64;
        scuLngCtrlMode_ = value;
      }
    }
    /// <summary>Gets whether the "scu_lng_ctrl_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScuLngCtrlMode {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "scu_lng_ctrl_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScuLngCtrlMode() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "scu_lat_quit_report" field.</summary>
    public const int ScuLatQuitReportFieldNumber = 8;
    private readonly static uint ScuLatQuitReportDefaultValue = 0;

    private uint scuLatQuitReport_;
    /// <summary>
    /// from scu_13, Lat quit report 横向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScuLatQuitReport {
      get { if ((_hasBits0 & 128) != 0) { return scuLatQuitReport_; } else { return ScuLatQuitReportDefaultValue; } }
      set {
        _hasBits0 |= 128;
        scuLatQuitReport_ = value;
      }
    }
    /// <summary>Gets whether the "scu_lat_quit_report" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScuLatQuitReport {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "scu_lat_quit_report" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScuLatQuitReport() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "scu_lng_quit_report" field.</summary>
    public const int ScuLngQuitReportFieldNumber = 9;
    private readonly static uint ScuLngQuitReportDefaultValue = 0;

    private uint scuLngQuitReport_;
    /// <summary>
    /// from scu_13, lng quit report 纵向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScuLngQuitReport {
      get { if ((_hasBits0 & 256) != 0) { return scuLngQuitReport_; } else { return ScuLngQuitReportDefaultValue; } }
      set {
        _hasBits0 |= 256;
        scuLngQuitReport_ = value;
      }
    }
    /// <summary>Gets whether the "scu_lng_quit_report" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScuLngQuitReport {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "scu_lng_quit_report" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScuLngQuitReport() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "vcu_crnt_gear_lvl_g" field.</summary>
    public const int VcuCrntGearLvlGFieldNumber = 10;
    private readonly static uint VcuCrntGearLvlGDefaultValue = 0;

    private uint vcuCrntGearLvlG_;
    /// <summary>
    /// from scu_15, actual gear lvl 0=No request,1=Drive,2=Neutral,3=Reversed,4=Park 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VcuCrntGearLvlG {
      get { if ((_hasBits0 & 512) != 0) { return vcuCrntGearLvlG_; } else { return VcuCrntGearLvlGDefaultValue; } }
      set {
        _hasBits0 |= 512;
        vcuCrntGearLvlG_ = value;
      }
    }
    /// <summary>Gets whether the "vcu_crnt_gear_lvl_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVcuCrntGearLvlG {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "vcu_crnt_gear_lvl_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVcuCrntGearLvlG() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "vcu_act_veh_wheel_torq_g" field.</summary>
    public const int VcuActVehWheelTorqGFieldNumber = 11;
    private readonly static double VcuActVehWheelTorqGDefaultValue = 0D;

    private double vcuActVehWheelTorqG_;
    /// <summary>
    /// from scu_16, actual Torque
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VcuActVehWheelTorqG {
      get { if ((_hasBits0 & 1024) != 0) { return vcuActVehWheelTorqG_; } else { return VcuActVehWheelTorqGDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        vcuActVehWheelTorqG_ = value;
      }
    }
    /// <summary>Gets whether the "vcu_act_veh_wheel_torq_g" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVcuActVehWheelTorqG {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "vcu_act_veh_wheel_torq_g" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVcuActVehWheelTorqG() {
      _hasBits0 &= ~1024;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Chassis);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Chassis other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BcsVehSpdG, other.BcsVehSpdG)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BcsActVehLaltrlAccelG, other.BcsActVehLaltrlAccelG)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BcsActVehLongAccelG, other.BcsActVehLongAccelG)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EpsSteeringAngleG, other.EpsSteeringAngleG)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EpsSteeringAngleSpdG, other.EpsSteeringAngleSpdG)) return false;
      if (ScuLatCtrlMode != other.ScuLatCtrlMode) return false;
      if (ScuLngCtrlMode != other.ScuLngCtrlMode) return false;
      if (ScuLatQuitReport != other.ScuLatQuitReport) return false;
      if (ScuLngQuitReport != other.ScuLngQuitReport) return false;
      if (VcuCrntGearLvlG != other.VcuCrntGearLvlG) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VcuActVehWheelTorqG, other.VcuActVehWheelTorqG)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBcsVehSpdG) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BcsVehSpdG);
      if (HasBcsActVehLaltrlAccelG) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BcsActVehLaltrlAccelG);
      if (HasBcsActVehLongAccelG) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BcsActVehLongAccelG);
      if (HasEpsSteeringAngleG) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EpsSteeringAngleG);
      if (HasEpsSteeringAngleSpdG) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EpsSteeringAngleSpdG);
      if (HasScuLatCtrlMode) hash ^= ScuLatCtrlMode.GetHashCode();
      if (HasScuLngCtrlMode) hash ^= ScuLngCtrlMode.GetHashCode();
      if (HasScuLatQuitReport) hash ^= ScuLatQuitReport.GetHashCode();
      if (HasScuLngQuitReport) hash ^= ScuLngQuitReport.GetHashCode();
      if (HasVcuCrntGearLvlG) hash ^= VcuCrntGearLvlG.GetHashCode();
      if (HasVcuActVehWheelTorqG) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VcuActVehWheelTorqG);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasBcsVehSpdG) {
        output.WriteRawTag(9);
        output.WriteDouble(BcsVehSpdG);
      }
      if (HasBcsActVehLaltrlAccelG) {
        output.WriteRawTag(17);
        output.WriteDouble(BcsActVehLaltrlAccelG);
      }
      if (HasBcsActVehLongAccelG) {
        output.WriteRawTag(25);
        output.WriteDouble(BcsActVehLongAccelG);
      }
      if (HasEpsSteeringAngleG) {
        output.WriteRawTag(33);
        output.WriteDouble(EpsSteeringAngleG);
      }
      if (HasEpsSteeringAngleSpdG) {
        output.WriteRawTag(41);
        output.WriteDouble(EpsSteeringAngleSpdG);
      }
      if (HasScuLatCtrlMode) {
        output.WriteRawTag(48);
        output.WriteUInt32(ScuLatCtrlMode);
      }
      if (HasScuLngCtrlMode) {
        output.WriteRawTag(56);
        output.WriteUInt32(ScuLngCtrlMode);
      }
      if (HasScuLatQuitReport) {
        output.WriteRawTag(64);
        output.WriteUInt32(ScuLatQuitReport);
      }
      if (HasScuLngQuitReport) {
        output.WriteRawTag(72);
        output.WriteUInt32(ScuLngQuitReport);
      }
      if (HasVcuCrntGearLvlG) {
        output.WriteRawTag(80);
        output.WriteUInt32(VcuCrntGearLvlG);
      }
      if (HasVcuActVehWheelTorqG) {
        output.WriteRawTag(89);
        output.WriteDouble(VcuActVehWheelTorqG);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasBcsVehSpdG) {
        size += 1 + 8;
      }
      if (HasBcsActVehLaltrlAccelG) {
        size += 1 + 8;
      }
      if (HasBcsActVehLongAccelG) {
        size += 1 + 8;
      }
      if (HasEpsSteeringAngleG) {
        size += 1 + 8;
      }
      if (HasEpsSteeringAngleSpdG) {
        size += 1 + 8;
      }
      if (HasScuLatCtrlMode) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScuLatCtrlMode);
      }
      if (HasScuLngCtrlMode) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScuLngCtrlMode);
      }
      if (HasScuLatQuitReport) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScuLatQuitReport);
      }
      if (HasScuLngQuitReport) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScuLngQuitReport);
      }
      if (HasVcuCrntGearLvlG) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VcuCrntGearLvlG);
      }
      if (HasVcuActVehWheelTorqG) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Chassis other) {
      if (other == null) {
        return;
      }
      if (other.HasBcsVehSpdG) {
        BcsVehSpdG = other.BcsVehSpdG;
      }
      if (other.HasBcsActVehLaltrlAccelG) {
        BcsActVehLaltrlAccelG = other.BcsActVehLaltrlAccelG;
      }
      if (other.HasBcsActVehLongAccelG) {
        BcsActVehLongAccelG = other.BcsActVehLongAccelG;
      }
      if (other.HasEpsSteeringAngleG) {
        EpsSteeringAngleG = other.EpsSteeringAngleG;
      }
      if (other.HasEpsSteeringAngleSpdG) {
        EpsSteeringAngleSpdG = other.EpsSteeringAngleSpdG;
      }
      if (other.HasScuLatCtrlMode) {
        ScuLatCtrlMode = other.ScuLatCtrlMode;
      }
      if (other.HasScuLngCtrlMode) {
        ScuLngCtrlMode = other.ScuLngCtrlMode;
      }
      if (other.HasScuLatQuitReport) {
        ScuLatQuitReport = other.ScuLatQuitReport;
      }
      if (other.HasScuLngQuitReport) {
        ScuLngQuitReport = other.ScuLngQuitReport;
      }
      if (other.HasVcuCrntGearLvlG) {
        VcuCrntGearLvlG = other.VcuCrntGearLvlG;
      }
      if (other.HasVcuActVehWheelTorqG) {
        VcuActVehWheelTorqG = other.VcuActVehWheelTorqG;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            BcsVehSpdG = input.ReadDouble();
            break;
          }
          case 17: {
            BcsActVehLaltrlAccelG = input.ReadDouble();
            break;
          }
          case 25: {
            BcsActVehLongAccelG = input.ReadDouble();
            break;
          }
          case 33: {
            EpsSteeringAngleG = input.ReadDouble();
            break;
          }
          case 41: {
            EpsSteeringAngleSpdG = input.ReadDouble();
            break;
          }
          case 48: {
            ScuLatCtrlMode = input.ReadUInt32();
            break;
          }
          case 56: {
            ScuLngCtrlMode = input.ReadUInt32();
            break;
          }
          case 64: {
            ScuLatQuitReport = input.ReadUInt32();
            break;
          }
          case 72: {
            ScuLngQuitReport = input.ReadUInt32();
            break;
          }
          case 80: {
            VcuCrntGearLvlG = input.ReadUInt32();
            break;
          }
          case 89: {
            VcuActVehWheelTorqG = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FatalReport : pb::IMessage<FatalReport> {
    private static readonly pb::MessageParser<FatalReport> _parser = new pb::MessageParser<FatalReport>(() => new FatalReport());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FatalReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.EngineeringReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FatalReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FatalReport(FatalReport other) : this() {
      _hasBits0 = other._hasBits0;
      systemFailure_ = other.systemFailure_;
      modulesDiagnosis_ = other.modulesDiagnosis_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FatalReport Clone() {
      return new FatalReport(this);
    }

    /// <summary>Field number for the "system_failure" field.</summary>
    public const int SystemFailureFieldNumber = 1;
    private readonly static bool SystemFailureDefaultValue = false;

    private bool systemFailure_;
    /// <summary>
    /// 系统错误: 正常false，异常true
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SystemFailure {
      get { if ((_hasBits0 & 1) != 0) { return systemFailure_; } else { return SystemFailureDefaultValue; } }
      set {
        _hasBits0 |= 1;
        systemFailure_ = value;
      }
    }
    /// <summary>Gets whether the "system_failure" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSystemFailure {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "system_failure" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSystemFailure() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "modules_diagnosis" field.</summary>
    public const int ModulesDiagnosisFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xviewer.XDiagnosis> _repeated_modulesDiagnosis_codec
        = pb::FieldCodec.ForMessage(18, global::Xviewer.XDiagnosis.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.XDiagnosis> modulesDiagnosis_ = new pbc::RepeatedField<global::Xviewer.XDiagnosis>();
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.XDiagnosis> ModulesDiagnosis {
      get { return modulesDiagnosis_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FatalReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FatalReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SystemFailure != other.SystemFailure) return false;
      if(!modulesDiagnosis_.Equals(other.modulesDiagnosis_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSystemFailure) hash ^= SystemFailure.GetHashCode();
      hash ^= modulesDiagnosis_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasSystemFailure) {
        output.WriteRawTag(8);
        output.WriteBool(SystemFailure);
      }
      modulesDiagnosis_.WriteTo(output, _repeated_modulesDiagnosis_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSystemFailure) {
        size += 1 + 1;
      }
      size += modulesDiagnosis_.CalculateSize(_repeated_modulesDiagnosis_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FatalReport other) {
      if (other == null) {
        return;
      }
      if (other.HasSystemFailure) {
        SystemFailure = other.SystemFailure;
      }
      modulesDiagnosis_.Add(other.modulesDiagnosis_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SystemFailure = input.ReadBool();
            break;
          }
          case 18: {
            modulesDiagnosis_.AddEntriesFrom(input, _repeated_modulesDiagnosis_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Engineering : pb::IMessage<Engineering> {
    private static readonly pb::MessageParser<Engineering> _parser = new pb::MessageParser<Engineering>(() => new Engineering());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Engineering> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.EngineeringReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Engineering() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Engineering(Engineering other) : this() {
      _hasBits0 = other._hasBits0;
      uiCommunicate_ = other.uiCommunicate_ != null ? other.uiCommunicate_.Clone() : null;
      monitor_ = other.monitor_ != null ? other.monitor_.Clone() : null;
      rtkStatus_ = other.rtkStatus_;
      systemFailure_ = other.systemFailure_;
      chassis_ = other.chassis_ != null ? other.chassis_.Clone() : null;
      chassisDetail_ = other.chassisDetail_ != null ? other.chassisDetail_.Clone() : null;
      controlCommand_ = other.controlCommand_ != null ? other.controlCommand_.Clone() : null;
      guardian_ = other.guardian_ != null ? other.guardian_.Clone() : null;
      fatalReport_ = other.fatalReport_ != null ? other.fatalReport_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Engineering Clone() {
      return new Engineering(this);
    }

    /// <summary>Field number for the "ui_communicate" field.</summary>
    public const int UiCommunicateFieldNumber = 1;
    private global::Xviewer.UICommunicate uiCommunicate_;
    /// <summary>
    /// 诊断消息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.UICommunicate UiCommunicate {
      get { return uiCommunicate_; }
      set {
        uiCommunicate_ = value;
      }
    }

    /// <summary>Field number for the "monitor" field.</summary>
    public const int MonitorFieldNumber = 2;
    private global::Xviewer.Monitor monitor_;
    /// <summary>
    /// 性能监控
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Monitor Monitor {
      get { return monitor_; }
      set {
        monitor_ = value;
      }
    }

    /// <summary>Field number for the "rtk_status" field.</summary>
    public const int RtkStatusFieldNumber = 3;
    private readonly static uint RtkStatusDefaultValue = 0;

    private uint rtkStatus_;
    /// <summary>
    /// RTK status: 1- abnormal; 2- normal; 3- alert;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RtkStatus {
      get { if ((_hasBits0 & 1) != 0) { return rtkStatus_; } else { return RtkStatusDefaultValue; } }
      set {
        _hasBits0 |= 1;
        rtkStatus_ = value;
      }
    }
    /// <summary>Gets whether the "rtk_status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRtkStatus {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "rtk_status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRtkStatus() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "system_failure" field.</summary>
    public const int SystemFailureFieldNumber = 4;
    private readonly static bool SystemFailureDefaultValue = false;

    private bool systemFailure_;
    /// <summary>
    /// 系统错误: 正常false，异常true
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SystemFailure {
      get { if ((_hasBits0 & 2) != 0) { return systemFailure_; } else { return SystemFailureDefaultValue; } }
      set {
        _hasBits0 |= 2;
        systemFailure_ = value;
      }
    }
    /// <summary>Gets whether the "system_failure" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSystemFailure {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "system_failure" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSystemFailure() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "chassis" field.</summary>
    public const int ChassisFieldNumber = 5;
    private global::Xviewer.Chassis chassis_;
    /// <summary>
    /// SCU VCU
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Chassis Chassis {
      get { return chassis_; }
      set {
        chassis_ = value;
      }
    }

    /// <summary>Field number for the "chassis_detail" field.</summary>
    public const int ChassisDetailFieldNumber = 6;
    private global::Xviewer.ChassisDetail chassisDetail_;
    /// <summary>
    /// chassis detail
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.ChassisDetail ChassisDetail {
      get { return chassisDetail_; }
      set {
        chassisDetail_ = value;
      }
    }

    /// <summary>Field number for the "control_command" field.</summary>
    public const int ControlCommandFieldNumber = 7;
    private global::Xviewer.XControlCommand controlCommand_;
    /// <summary>
    /// ADCU
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.XControlCommand ControlCommand {
      get { return controlCommand_; }
      set {
        controlCommand_ = value;
      }
    }

    /// <summary>Field number for the "guardian" field.</summary>
    public const int GuardianFieldNumber = 8;
    private global::Xviewer.Guardian guardian_;
    /// <summary>
    /// 守护系统
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Guardian Guardian {
      get { return guardian_; }
      set {
        guardian_ = value;
      }
    }

    /// <summary>Field number for the "fatal_report" field.</summary>
    public const int FatalReportFieldNumber = 9;
    private global::Xviewer.FatalReport fatalReport_;
    /// <summary>
    /// 系统错误
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.FatalReport FatalReport {
      get { return fatalReport_; }
      set {
        fatalReport_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Engineering);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Engineering other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UiCommunicate, other.UiCommunicate)) return false;
      if (!object.Equals(Monitor, other.Monitor)) return false;
      if (RtkStatus != other.RtkStatus) return false;
      if (SystemFailure != other.SystemFailure) return false;
      if (!object.Equals(Chassis, other.Chassis)) return false;
      if (!object.Equals(ChassisDetail, other.ChassisDetail)) return false;
      if (!object.Equals(ControlCommand, other.ControlCommand)) return false;
      if (!object.Equals(Guardian, other.Guardian)) return false;
      if (!object.Equals(FatalReport, other.FatalReport)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (uiCommunicate_ != null) hash ^= UiCommunicate.GetHashCode();
      if (monitor_ != null) hash ^= Monitor.GetHashCode();
      if (HasRtkStatus) hash ^= RtkStatus.GetHashCode();
      if (HasSystemFailure) hash ^= SystemFailure.GetHashCode();
      if (chassis_ != null) hash ^= Chassis.GetHashCode();
      if (chassisDetail_ != null) hash ^= ChassisDetail.GetHashCode();
      if (controlCommand_ != null) hash ^= ControlCommand.GetHashCode();
      if (guardian_ != null) hash ^= Guardian.GetHashCode();
      if (fatalReport_ != null) hash ^= FatalReport.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (uiCommunicate_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UiCommunicate);
      }
      if (monitor_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Monitor);
      }
      if (HasRtkStatus) {
        output.WriteRawTag(24);
        output.WriteUInt32(RtkStatus);
      }
      if (HasSystemFailure) {
        output.WriteRawTag(32);
        output.WriteBool(SystemFailure);
      }
      if (chassis_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Chassis);
      }
      if (chassisDetail_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ChassisDetail);
      }
      if (controlCommand_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ControlCommand);
      }
      if (guardian_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Guardian);
      }
      if (fatalReport_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(FatalReport);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (uiCommunicate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UiCommunicate);
      }
      if (monitor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Monitor);
      }
      if (HasRtkStatus) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RtkStatus);
      }
      if (HasSystemFailure) {
        size += 1 + 1;
      }
      if (chassis_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Chassis);
      }
      if (chassisDetail_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChassisDetail);
      }
      if (controlCommand_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ControlCommand);
      }
      if (guardian_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Guardian);
      }
      if (fatalReport_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FatalReport);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Engineering other) {
      if (other == null) {
        return;
      }
      if (other.uiCommunicate_ != null) {
        if (uiCommunicate_ == null) {
          UiCommunicate = new global::Xviewer.UICommunicate();
        }
        UiCommunicate.MergeFrom(other.UiCommunicate);
      }
      if (other.monitor_ != null) {
        if (monitor_ == null) {
          Monitor = new global::Xviewer.Monitor();
        }
        Monitor.MergeFrom(other.Monitor);
      }
      if (other.HasRtkStatus) {
        RtkStatus = other.RtkStatus;
      }
      if (other.HasSystemFailure) {
        SystemFailure = other.SystemFailure;
      }
      if (other.chassis_ != null) {
        if (chassis_ == null) {
          Chassis = new global::Xviewer.Chassis();
        }
        Chassis.MergeFrom(other.Chassis);
      }
      if (other.chassisDetail_ != null) {
        if (chassisDetail_ == null) {
          ChassisDetail = new global::Xviewer.ChassisDetail();
        }
        ChassisDetail.MergeFrom(other.ChassisDetail);
      }
      if (other.controlCommand_ != null) {
        if (controlCommand_ == null) {
          ControlCommand = new global::Xviewer.XControlCommand();
        }
        ControlCommand.MergeFrom(other.ControlCommand);
      }
      if (other.guardian_ != null) {
        if (guardian_ == null) {
          Guardian = new global::Xviewer.Guardian();
        }
        Guardian.MergeFrom(other.Guardian);
      }
      if (other.fatalReport_ != null) {
        if (fatalReport_ == null) {
          FatalReport = new global::Xviewer.FatalReport();
        }
        FatalReport.MergeFrom(other.FatalReport);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (uiCommunicate_ == null) {
              UiCommunicate = new global::Xviewer.UICommunicate();
            }
            input.ReadMessage(UiCommunicate);
            break;
          }
          case 18: {
            if (monitor_ == null) {
              Monitor = new global::Xviewer.Monitor();
            }
            input.ReadMessage(Monitor);
            break;
          }
          case 24: {
            RtkStatus = input.ReadUInt32();
            break;
          }
          case 32: {
            SystemFailure = input.ReadBool();
            break;
          }
          case 42: {
            if (chassis_ == null) {
              Chassis = new global::Xviewer.Chassis();
            }
            input.ReadMessage(Chassis);
            break;
          }
          case 50: {
            if (chassisDetail_ == null) {
              ChassisDetail = new global::Xviewer.ChassisDetail();
            }
            input.ReadMessage(ChassisDetail);
            break;
          }
          case 58: {
            if (controlCommand_ == null) {
              ControlCommand = new global::Xviewer.XControlCommand();
            }
            input.ReadMessage(ControlCommand);
            break;
          }
          case 66: {
            if (guardian_ == null) {
              Guardian = new global::Xviewer.Guardian();
            }
            input.ReadMessage(Guardian);
            break;
          }
          case 74: {
            if (fatalReport_ == null) {
              FatalReport = new global::Xviewer.FatalReport();
            }
            input.ReadMessage(FatalReport);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
