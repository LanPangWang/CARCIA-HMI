// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mem.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Xviewer {

  /// <summary>Holder for reflection information generated from mem.proto</summary>
  public static partial class MemReflection {

    #region Descriptor
    /// <summary>File descriptor for mem.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MemReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgltZW0ucHJvdG8SB3h2aWV3ZXIaDGJhc2ljcy5wcm90byJEChBNZW1Hcm91",
            "bmRFbGVtZW50EgwKBHR5cGUYASABKA0SIgoKcG9pbnRzX3V0bRgCIAMoCzIO",
            "Lnh2aWV3ZXIuUG9pbnQiXwoPTWVtVHJhZmZpY0xpZ2h0EhoKEnRyYWZmaWNf",
            "bGlnaHRfdHlwZRgBIAEoDRIwChh0cmFmZmljX2xpZ2h0X3BvaW50c191dG0Y",
            "AiADKAsyDi54dmlld2VyLlBvaW50IlcKFk1lbUNvbnN0cnVjdGlvblNlY3Rp",
            "b24SDAoEdHlwZRgBIAEoDRIvChdjb25zdHJ1Y3Rpb25fcG9pbnRzX3V0bRgC",
            "IAMoCzIOLnh2aWV3ZXIuUG9pbnQiSQoLTWVtU3RvcExpbmUSDAoEdHlwZRgB",
            "IAEoDRIsChRzdG9wX2xpbmVfcG9pbnRzX3V0bRgCIAMoCzIOLnh2aWV3ZXIu",
            "UG9pbnQiswEKF01lbUxhbmVBdHRyaWJ1dGVDb250b3VyEisKE3JlZmVyZW5j",
            "ZV9wb2ludF91dG0YASABKAsyDi54dmlld2VyLlBvaW50Eg0KBXdpZHRoGAIg",
            "ASgCEg4KBmhlaWdodBgDIAEoAhIOCgZsZW5ndGgYBCABKAISEQoJeWF3X2Fu",
            "Z2xlGAUgASgCEikKEWNvbnRvdXJfcG9pbnRfdXRtGAYgAygLMg4ueHZpZXdl",
            "ci5Qb2ludCL+AgoHTWVtTGFuZRIPCgdsYW5lX2lkGAEgASgFEhcKD2xhbmVf",
            "YXR0cmlidXRlcxgCIAMoDRIxChlsYW5lX2F0dHJpYnV0ZV9wb2ludHNfdXRt",
            "GAMgAygLMg4ueHZpZXdlci5Qb2ludBJBChdsYW5lX2F0dHJpYnV0ZV9jb250",
            "b3VycxgEIAMoCzIgLnh2aWV3ZXIuTWVtTGFuZUF0dHJpYnV0ZUNvbnRvdXIS",
            "HAoUbGFuZV9vdGhlcl9hdHRyaWJ1dGUYBSABKA0SFAoMbGVmdF9saW5lX2lk",
            "GAYgASgFEhUKDXJpZ2h0X2xpbmVfaWQYByABKAUSNgoNY29uc3RydWN0aW9u",
            "cxgIIAMoCzIfLnh2aWV3ZXIuTWVtQ29uc3RydWN0aW9uU2VjdGlvbhInCg9z",
            "cGxpdF9wb2ludF91dG0YCSADKAsyDi54dmlld2VyLlBvaW50EicKD21lcmdl",
            "X3BvaW50X3V0bRgKIAMoCzIOLnh2aWV3ZXIuUG9pbnQibgoLTWVtTGFuZUxp",
            "bmUSDwoHbGluZV9pZBgBIAEoBRIRCgl0eXBlX2xpc3QYAiADKA0SEgoKaW5k",
            "ZXhfbGlzdBgDIAMoBRInCg9saW5lX3BvaW50c191dG0YBCADKAsyDi54dmll",
            "d2VyLlBvaW50IrUCCgdNZW1Sb2FkEg8KB3JvYWRfaWQYASABKAUSKAoKbGFu",
            "ZV9saW5lcxgCIAMoCzIULnh2aWV3ZXIuTWVtTGFuZUxpbmUSHwoFbGFuZXMY",
            "AyADKAsyEC54dmlld2VyLk1lbUxhbmUSKAoKc3RvcF9saW5lcxgEIAMoCzIU",
            "Lnh2aWV3ZXIuTWVtU3RvcExpbmUSPgoVY29uc3RydWN0aW9uX3NlY3Rpb25z",
            "GAUgAygLMh8ueHZpZXdlci5NZW1Db25zdHJ1Y3Rpb25TZWN0aW9uEjAKDnRy",
            "YWZmaWNfbGlnaHRzGAYgAygLMhgueHZpZXdlci5NZW1UcmFmZmljTGlnaHQS",
            "MgoPZ3JvdW5kX2VsZW1lbnRzGAcgAygLMhkueHZpZXdlci5NZW1Hcm91bmRF",
            "bGVtZW50InsKEE1lbVJlZmVyZW5jZUxpbmUSCgoCaWQYASABKAUSJgoOd2F5",
            "X3BvaW50c191dG0YAiADKAsyDi54dmlld2VyLlBvaW50EhYKDm9yaWdpbl9y",
            "b2FkX2lkGAMgASgFEhsKE2Rlc3RpbmF0aW9uX3JvYWRfaWQYBCABKAUi0AEK",
            "Dk1lbVZpcnR1YWxMYW5lEg8KB2xhbmVfaWQYASABKAUSFgoOb3JpZ2luX3Jv",
            "YWRfaWQYAiABKAUSGwoTZGVzdGluYXRpb25fcm9hZF9pZBgDIAEoBRIWCg5v",
            "cmlnaW5fbGFuZV9pZBgEIAEoBRIbChNkZXN0aW5hdGlvbl9sYW5lX2lkGAUg",
            "ASgFEhQKDGxlZnRfbGluZV9pZBgGIAEoBRIVCg1yaWdodF9saW5lX2lkGAcg",
            "ASgFEhYKDmxhbmVfYXR0cmlidXRlGAggASgNIn8KDk1lbVZpcnR1YWxMaW5l",
            "Eg8KB2xpbmVfaWQYASABKAUSJwoPbGluZV9wb2ludHNfdXRtGAIgAygLMg4u",
            "eHZpZXdlci5Qb2ludBIWCg5vcmlnaW5fbGluZV9pZBgDIAEoBRIbChNkZXN0",
            "aW5hdGlvbl9saW5lX2lkGAQgASgFIr4BCg9NZW1JbnRlcnNlY3Rpb24SFwoP",
            "aW50ZXJzZWN0aW9uX2lkGAEgASgFEi4KDXZpcnR1YWxfbGFuZXMYAiADKAsy",
            "Fy54dmlld2VyLk1lbVZpcnR1YWxMYW5lEi4KDXZpcnR1YWxfbGluZXMYAyAD",
            "KAsyFy54dmlld2VyLk1lbVZpcnR1YWxMaW5lEjIKD3JlZmVyZW5jZV9saW5l",
            "cxgEIAMoCzIZLnh2aWV3ZXIuTWVtUmVmZXJlbmNlTGluZSJqCgdNZW1DdXJi",
            "Eg8KB2N1cmJfaWQYASABKAUSEQoJdHlwZV9saXN0GAIgAygNEhIKCmluZGV4",
            "X2xpc3QYAyADKAUSJwoPY3VyYl9wb2ludHNfdXRtGAQgAygLMg4ueHZpZXdl",
            "ci5Qb2ludCKVAQoLTWVtUm9hZEluZm8SEwoLZWdvX3JvYWRfaWQYASABKAUS",
            "HwoFcm9hZHMYAiADKAsyEC54dmlld2VyLk1lbVJvYWQSLwoNaW50ZXJzZWN0",
            "aW9ucxgDIAMoCzIYLnh2aWV3ZXIuTWVtSW50ZXJzZWN0aW9uEh8KBWN1cmJz",
            "GAQgAygLMhAueHZpZXdlci5NZW1DdXJiIpABCg1Vc2VyQWN0aW9uTUVNEi8K",
            "F2NvbnN0cnVjdGlvbl9wb2ludHNfdXRtGAEgAygLMg4ueHZpZXdlci5Qb2lu",
            "dBIXCg9jb25zdHJ1Y3Rpb25faWQYAiABKAQSFAoMbGFuZXNfbnVtYmVyGAMg",
            "ASgNEh8KF2NvbnN0cnVjdGlvbl9sYW5lX3JhbmdlGAQgAygNIlcKA01lbRIn",
            "Cglyb2FkX2luZm8YASABKAsyFC54dmlld2VyLk1lbVJvYWRJbmZvEicKB2Fs",
            "bF9tZW0YAiADKAsyFi54dmlld2VyLlVzZXJBY3Rpb25NRU0="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Xviewer.BasicsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.MemGroundElement), global::Xviewer.MemGroundElement.Parser, new[]{ "Type", "PointsUtm" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.MemTrafficLight), global::Xviewer.MemTrafficLight.Parser, new[]{ "TrafficLightType", "TrafficLightPointsUtm" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.MemConstructionSection), global::Xviewer.MemConstructionSection.Parser, new[]{ "Type", "ConstructionPointsUtm" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.MemStopLine), global::Xviewer.MemStopLine.Parser, new[]{ "Type", "StopLinePointsUtm" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.MemLaneAttributeContour), global::Xviewer.MemLaneAttributeContour.Parser, new[]{ "ReferencePointUtm", "Width", "Height", "Length", "YawAngle", "ContourPointUtm" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.MemLane), global::Xviewer.MemLane.Parser, new[]{ "LaneId", "LaneAttributes", "LaneAttributePointsUtm", "LaneAttributeContours", "LaneOtherAttribute", "LeftLineId", "RightLineId", "Constructions", "SplitPointUtm", "MergePointUtm" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.MemLaneLine), global::Xviewer.MemLaneLine.Parser, new[]{ "LineId", "TypeList", "IndexList", "LinePointsUtm" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.MemRoad), global::Xviewer.MemRoad.Parser, new[]{ "RoadId", "LaneLines", "Lanes", "StopLines", "ConstructionSections", "TrafficLights", "GroundElements" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.MemReferenceLine), global::Xviewer.MemReferenceLine.Parser, new[]{ "Id", "WayPointsUtm", "OriginRoadId", "DestinationRoadId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.MemVirtualLane), global::Xviewer.MemVirtualLane.Parser, new[]{ "LaneId", "OriginRoadId", "DestinationRoadId", "OriginLaneId", "DestinationLaneId", "LeftLineId", "RightLineId", "LaneAttribute" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.MemVirtualLine), global::Xviewer.MemVirtualLine.Parser, new[]{ "LineId", "LinePointsUtm", "OriginLineId", "DestinationLineId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.MemIntersection), global::Xviewer.MemIntersection.Parser, new[]{ "IntersectionId", "VirtualLanes", "VirtualLines", "ReferenceLines" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.MemCurb), global::Xviewer.MemCurb.Parser, new[]{ "CurbId", "TypeList", "IndexList", "CurbPointsUtm" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.MemRoadInfo), global::Xviewer.MemRoadInfo.Parser, new[]{ "EgoRoadId", "Roads", "Intersections", "Curbs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.UserActionMEM), global::Xviewer.UserActionMEM.Parser, new[]{ "ConstructionPointsUtm", "ConstructionId", "LanesNumber", "ConstructionLaneRange" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.Mem), global::Xviewer.Mem.Parser, new[]{ "RoadInfo", "AllMem" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// ----------------  动态语义环境模块消息结构 --------------------//
  /// </summary>
  public sealed partial class MemGroundElement : pb::IMessage<MemGroundElement> {
    private static readonly pb::MessageParser<MemGroundElement> _parser = new pb::MessageParser<MemGroundElement>(() => new MemGroundElement());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemGroundElement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.MemReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemGroundElement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemGroundElement(MemGroundElement other) : this() {
      _hasBits0 = other._hasBits0;
      type_ = other.type_;
      pointsUtm_ = other.pointsUtm_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemGroundElement Clone() {
      return new MemGroundElement(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static uint TypeDefaultValue = 0;

    private uint type_;
    /// <summary>
    /// 元素类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "points_utm" field.</summary>
    public const int PointsUtmFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_pointsUtm_codec
        = pb::FieldCodec.ForMessage(18, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> pointsUtm_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// 元素位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> PointsUtm {
      get { return pointsUtm_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemGroundElement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemGroundElement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if(!pointsUtm_.Equals(other.pointsUtm_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      hash ^= pointsUtm_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasType) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      pointsUtm_.WriteTo(output, _repeated_pointsUtm_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      size += pointsUtm_.CalculateSize(_repeated_pointsUtm_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemGroundElement other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      pointsUtm_.Add(other.pointsUtm_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 18: {
            pointsUtm_.AddEntriesFrom(input, _repeated_pointsUtm_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MemTrafficLight : pb::IMessage<MemTrafficLight> {
    private static readonly pb::MessageParser<MemTrafficLight> _parser = new pb::MessageParser<MemTrafficLight>(() => new MemTrafficLight());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemTrafficLight> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.MemReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemTrafficLight() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemTrafficLight(MemTrafficLight other) : this() {
      _hasBits0 = other._hasBits0;
      trafficLightType_ = other.trafficLightType_;
      trafficLightPointsUtm_ = other.trafficLightPointsUtm_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemTrafficLight Clone() {
      return new MemTrafficLight(this);
    }

    /// <summary>Field number for the "traffic_light_type" field.</summary>
    public const int TrafficLightTypeFieldNumber = 1;
    private readonly static uint TrafficLightTypeDefaultValue = 0;

    private uint trafficLightType_;
    /// <summary>
    /// 红绿灯类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TrafficLightType {
      get { if ((_hasBits0 & 1) != 0) { return trafficLightType_; } else { return TrafficLightTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        trafficLightType_ = value;
      }
    }
    /// <summary>Gets whether the "traffic_light_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTrafficLightType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "traffic_light_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTrafficLightType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "traffic_light_points_utm" field.</summary>
    public const int TrafficLightPointsUtmFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_trafficLightPointsUtm_codec
        = pb::FieldCodec.ForMessage(18, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> trafficLightPointsUtm_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// 红绿灯位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> TrafficLightPointsUtm {
      get { return trafficLightPointsUtm_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemTrafficLight);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemTrafficLight other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TrafficLightType != other.TrafficLightType) return false;
      if(!trafficLightPointsUtm_.Equals(other.trafficLightPointsUtm_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTrafficLightType) hash ^= TrafficLightType.GetHashCode();
      hash ^= trafficLightPointsUtm_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTrafficLightType) {
        output.WriteRawTag(8);
        output.WriteUInt32(TrafficLightType);
      }
      trafficLightPointsUtm_.WriteTo(output, _repeated_trafficLightPointsUtm_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTrafficLightType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TrafficLightType);
      }
      size += trafficLightPointsUtm_.CalculateSize(_repeated_trafficLightPointsUtm_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemTrafficLight other) {
      if (other == null) {
        return;
      }
      if (other.HasTrafficLightType) {
        TrafficLightType = other.TrafficLightType;
      }
      trafficLightPointsUtm_.Add(other.trafficLightPointsUtm_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TrafficLightType = input.ReadUInt32();
            break;
          }
          case 18: {
            trafficLightPointsUtm_.AddEntriesFrom(input, _repeated_trafficLightPointsUtm_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MemConstructionSection : pb::IMessage<MemConstructionSection> {
    private static readonly pb::MessageParser<MemConstructionSection> _parser = new pb::MessageParser<MemConstructionSection>(() => new MemConstructionSection());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemConstructionSection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.MemReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemConstructionSection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemConstructionSection(MemConstructionSection other) : this() {
      _hasBits0 = other._hasBits0;
      type_ = other.type_;
      constructionPointsUtm_ = other.constructionPointsUtm_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemConstructionSection Clone() {
      return new MemConstructionSection(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static uint TypeDefaultValue = 0;

    private uint type_;
    /// <summary>
    /// 施工类型 0：无施工 1：临时施工 2：短期施工 3：长期施工
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "construction_points_utm" field.</summary>
    public const int ConstructionPointsUtmFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_constructionPointsUtm_codec
        = pb::FieldCodec.ForMessage(18, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> constructionPointsUtm_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// 施工地点,第一个点位起始位置，第二个点为结束位置，坐标在utm坐标系下
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> ConstructionPointsUtm {
      get { return constructionPointsUtm_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemConstructionSection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemConstructionSection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if(!constructionPointsUtm_.Equals(other.constructionPointsUtm_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      hash ^= constructionPointsUtm_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasType) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      constructionPointsUtm_.WriteTo(output, _repeated_constructionPointsUtm_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      size += constructionPointsUtm_.CalculateSize(_repeated_constructionPointsUtm_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemConstructionSection other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      constructionPointsUtm_.Add(other.constructionPointsUtm_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 18: {
            constructionPointsUtm_.AddEntriesFrom(input, _repeated_constructionPointsUtm_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MemStopLine : pb::IMessage<MemStopLine> {
    private static readonly pb::MessageParser<MemStopLine> _parser = new pb::MessageParser<MemStopLine>(() => new MemStopLine());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemStopLine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.MemReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemStopLine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemStopLine(MemStopLine other) : this() {
      _hasBits0 = other._hasBits0;
      type_ = other.type_;
      stopLinePointsUtm_ = other.stopLinePointsUtm_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemStopLine Clone() {
      return new MemStopLine(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static uint TypeDefaultValue = 0;

    private uint type_;
    /// <summary>
    /// 停止线类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "stop_line_points_utm" field.</summary>
    public const int StopLinePointsUtmFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_stopLinePointsUtm_codec
        = pb::FieldCodec.ForMessage(18, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> stopLinePointsUtm_ = new pbc::RepeatedField<global::Xviewer.Point>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> StopLinePointsUtm {
      get { return stopLinePointsUtm_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemStopLine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemStopLine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if(!stopLinePointsUtm_.Equals(other.stopLinePointsUtm_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      hash ^= stopLinePointsUtm_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasType) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      stopLinePointsUtm_.WriteTo(output, _repeated_stopLinePointsUtm_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      size += stopLinePointsUtm_.CalculateSize(_repeated_stopLinePointsUtm_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemStopLine other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      stopLinePointsUtm_.Add(other.stopLinePointsUtm_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 18: {
            stopLinePointsUtm_.AddEntriesFrom(input, _repeated_stopLinePointsUtm_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MemLaneAttributeContour : pb::IMessage<MemLaneAttributeContour> {
    private static readonly pb::MessageParser<MemLaneAttributeContour> _parser = new pb::MessageParser<MemLaneAttributeContour>(() => new MemLaneAttributeContour());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemLaneAttributeContour> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.MemReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemLaneAttributeContour() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemLaneAttributeContour(MemLaneAttributeContour other) : this() {
      _hasBits0 = other._hasBits0;
      referencePointUtm_ = other.referencePointUtm_ != null ? other.referencePointUtm_.Clone() : null;
      width_ = other.width_;
      height_ = other.height_;
      length_ = other.length_;
      yawAngle_ = other.yawAngle_;
      contourPointUtm_ = other.contourPointUtm_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemLaneAttributeContour Clone() {
      return new MemLaneAttributeContour(this);
    }

    /// <summary>Field number for the "reference_point_utm" field.</summary>
    public const int ReferencePointUtmFieldNumber = 1;
    private global::Xviewer.Point referencePointUtm_;
    /// <summary>
    /// 导流属性box的中心点，utm坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Point ReferencePointUtm {
      get { return referencePointUtm_; }
      set {
        referencePointUtm_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 2;
    private readonly static float WidthDefaultValue = 0F;

    private float width_;
    /// <summary>
    /// 目标几何尺寸，宽，高，长
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Width {
      get { if ((_hasBits0 & 1) != 0) { return width_; } else { return WidthDefaultValue; } }
      set {
        _hasBits0 |= 1;
        width_ = value;
      }
    }
    /// <summary>Gets whether the "width" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWidth {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "width" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWidth() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 3;
    private readonly static float HeightDefaultValue = 0F;

    private float height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Height {
      get { if ((_hasBits0 & 2) != 0) { return height_; } else { return HeightDefaultValue; } }
      set {
        _hasBits0 |= 2;
        height_ = value;
      }
    }
    /// <summary>Gets whether the "height" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeight {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "height" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeight() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 4;
    private readonly static float LengthDefaultValue = 0F;

    private float length_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Length {
      get { if ((_hasBits0 & 4) != 0) { return length_; } else { return LengthDefaultValue; } }
      set {
        _hasBits0 |= 4;
        length_ = value;
      }
    }
    /// <summary>Gets whether the "length" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLength {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "length" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLength() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "yaw_angle" field.</summary>
    public const int YawAngleFieldNumber = 5;
    private readonly static float YawAngleDefaultValue = 0F;

    private float yawAngle_;
    /// <summary>
    /// box的偏航角
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float YawAngle {
      get { if ((_hasBits0 & 8) != 0) { return yawAngle_; } else { return YawAngleDefaultValue; } }
      set {
        _hasBits0 |= 8;
        yawAngle_ = value;
      }
    }
    /// <summary>Gets whether the "yaw_angle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasYawAngle {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "yaw_angle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearYawAngle() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "contour_point_utm" field.</summary>
    public const int ContourPointUtmFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_contourPointUtm_codec
        = pb::FieldCodec.ForMessage(50, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> contourPointUtm_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// 轮廓点_utm坐标（为后续分割预留接口)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> ContourPointUtm {
      get { return contourPointUtm_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemLaneAttributeContour);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemLaneAttributeContour other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ReferencePointUtm, other.ReferencePointUtm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Width, other.Width)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Height, other.Height)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Length, other.Length)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(YawAngle, other.YawAngle)) return false;
      if(!contourPointUtm_.Equals(other.contourPointUtm_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (referencePointUtm_ != null) hash ^= ReferencePointUtm.GetHashCode();
      if (HasWidth) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Width);
      if (HasHeight) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Height);
      if (HasLength) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Length);
      if (HasYawAngle) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(YawAngle);
      hash ^= contourPointUtm_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (referencePointUtm_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ReferencePointUtm);
      }
      if (HasWidth) {
        output.WriteRawTag(21);
        output.WriteFloat(Width);
      }
      if (HasHeight) {
        output.WriteRawTag(29);
        output.WriteFloat(Height);
      }
      if (HasLength) {
        output.WriteRawTag(37);
        output.WriteFloat(Length);
      }
      if (HasYawAngle) {
        output.WriteRawTag(45);
        output.WriteFloat(YawAngle);
      }
      contourPointUtm_.WriteTo(output, _repeated_contourPointUtm_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (referencePointUtm_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReferencePointUtm);
      }
      if (HasWidth) {
        size += 1 + 4;
      }
      if (HasHeight) {
        size += 1 + 4;
      }
      if (HasLength) {
        size += 1 + 4;
      }
      if (HasYawAngle) {
        size += 1 + 4;
      }
      size += contourPointUtm_.CalculateSize(_repeated_contourPointUtm_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemLaneAttributeContour other) {
      if (other == null) {
        return;
      }
      if (other.referencePointUtm_ != null) {
        if (referencePointUtm_ == null) {
          ReferencePointUtm = new global::Xviewer.Point();
        }
        ReferencePointUtm.MergeFrom(other.ReferencePointUtm);
      }
      if (other.HasWidth) {
        Width = other.Width;
      }
      if (other.HasHeight) {
        Height = other.Height;
      }
      if (other.HasLength) {
        Length = other.Length;
      }
      if (other.HasYawAngle) {
        YawAngle = other.YawAngle;
      }
      contourPointUtm_.Add(other.contourPointUtm_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (referencePointUtm_ == null) {
              ReferencePointUtm = new global::Xviewer.Point();
            }
            input.ReadMessage(ReferencePointUtm);
            break;
          }
          case 21: {
            Width = input.ReadFloat();
            break;
          }
          case 29: {
            Height = input.ReadFloat();
            break;
          }
          case 37: {
            Length = input.ReadFloat();
            break;
          }
          case 45: {
            YawAngle = input.ReadFloat();
            break;
          }
          case 50: {
            contourPointUtm_.AddEntriesFrom(input, _repeated_contourPointUtm_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MemLane : pb::IMessage<MemLane> {
    private static readonly pb::MessageParser<MemLane> _parser = new pb::MessageParser<MemLane>(() => new MemLane());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemLane> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.MemReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemLane() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemLane(MemLane other) : this() {
      _hasBits0 = other._hasBits0;
      laneId_ = other.laneId_;
      laneAttributes_ = other.laneAttributes_.Clone();
      laneAttributePointsUtm_ = other.laneAttributePointsUtm_.Clone();
      laneAttributeContours_ = other.laneAttributeContours_.Clone();
      laneOtherAttribute_ = other.laneOtherAttribute_;
      leftLineId_ = other.leftLineId_;
      rightLineId_ = other.rightLineId_;
      constructions_ = other.constructions_.Clone();
      splitPointUtm_ = other.splitPointUtm_.Clone();
      mergePointUtm_ = other.mergePointUtm_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemLane Clone() {
      return new MemLane(this);
    }

    /// <summary>Field number for the "lane_id" field.</summary>
    public const int LaneIdFieldNumber = 1;
    private readonly static int LaneIdDefaultValue = 0;

    private int laneId_;
    /// <summary>
    /// 车道线id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LaneId {
      get { if ((_hasBits0 & 1) != 0) { return laneId_; } else { return LaneIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        laneId_ = value;
      }
    }
    /// <summary>Gets whether the "lane_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLaneId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "lane_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLaneId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lane_attributes" field.</summary>
    public const int LaneAttributesFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_laneAttributes_codec
        = pb::FieldCodec.ForUInt32(16);
    private readonly pbc::RepeatedField<uint> laneAttributes_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 一条车道可能存在多个导流属性，比如前段是直行，后段是左转
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> LaneAttributes {
      get { return laneAttributes_; }
    }

    /// <summary>Field number for the "lane_attribute_points_utm" field.</summary>
    public const int LaneAttributePointsUtmFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_laneAttributePointsUtm_codec
        = pb::FieldCodec.ForMessage(26, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> laneAttributePointsUtm_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// 一条车道如有多个属性，对应不同段之间的切分点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> LaneAttributePointsUtm {
      get { return laneAttributePointsUtm_; }
    }

    /// <summary>Field number for the "lane_attribute_contours" field.</summary>
    public const int LaneAttributeContoursFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Xviewer.MemLaneAttributeContour> _repeated_laneAttributeContours_codec
        = pb::FieldCodec.ForMessage(34, global::Xviewer.MemLaneAttributeContour.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.MemLaneAttributeContour> laneAttributeContours_ = new pbc::RepeatedField<global::Xviewer.MemLaneAttributeContour>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.MemLaneAttributeContour> LaneAttributeContours {
      get { return laneAttributeContours_; }
    }

    /// <summary>Field number for the "lane_other_attribute" field.</summary>
    public const int LaneOtherAttributeFieldNumber = 5;
    private readonly static uint LaneOtherAttributeDefaultValue = 0;

    private uint laneOtherAttribute_;
    /// <summary>
    /// 导流属性边框轮廓 包含：中心点，长宽高，轮廓点信息 数组长度与导流属性数组保持一致
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LaneOtherAttribute {
      get { if ((_hasBits0 & 2) != 0) { return laneOtherAttribute_; } else { return LaneOtherAttributeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        laneOtherAttribute_ = value;
      }
    }
    /// <summary>Gets whether the "lane_other_attribute" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLaneOtherAttribute {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "lane_other_attribute" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLaneOtherAttribute() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "left_line_id" field.</summary>
    public const int LeftLineIdFieldNumber = 6;
    private readonly static int LeftLineIdDefaultValue = 0;

    private int leftLineId_;
    /// <summary>
    /// 左车道线id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftLineId {
      get { if ((_hasBits0 & 4) != 0) { return leftLineId_; } else { return LeftLineIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        leftLineId_ = value;
      }
    }
    /// <summary>Gets whether the "left_line_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeftLineId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "left_line_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeftLineId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "right_line_id" field.</summary>
    public const int RightLineIdFieldNumber = 7;
    private readonly static int RightLineIdDefaultValue = 0;

    private int rightLineId_;
    /// <summary>
    /// 右车道线id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RightLineId {
      get { if ((_hasBits0 & 8) != 0) { return rightLineId_; } else { return RightLineIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        rightLineId_ = value;
      }
    }
    /// <summary>Gets whether the "right_line_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRightLineId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "right_line_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRightLineId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "constructions" field.</summary>
    public const int ConstructionsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Xviewer.MemConstructionSection> _repeated_constructions_codec
        = pb::FieldCodec.ForMessage(66, global::Xviewer.MemConstructionSection.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.MemConstructionSection> constructions_ = new pbc::RepeatedField<global::Xviewer.MemConstructionSection>();
    /// <summary>
    /// 施工信息集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.MemConstructionSection> Constructions {
      get { return constructions_; }
    }

    /// <summary>Field number for the "split_point_utm" field.</summary>
    public const int SplitPointUtmFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_splitPointUtm_codec
        = pb::FieldCodec.ForMessage(74, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> splitPointUtm_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// merge point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> SplitPointUtm {
      get { return splitPointUtm_; }
    }

    /// <summary>Field number for the "merge_point_utm" field.</summary>
    public const int MergePointUtmFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_mergePointUtm_codec
        = pb::FieldCodec.ForMessage(82, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> mergePointUtm_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// split point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> MergePointUtm {
      get { return mergePointUtm_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemLane);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemLane other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LaneId != other.LaneId) return false;
      if(!laneAttributes_.Equals(other.laneAttributes_)) return false;
      if(!laneAttributePointsUtm_.Equals(other.laneAttributePointsUtm_)) return false;
      if(!laneAttributeContours_.Equals(other.laneAttributeContours_)) return false;
      if (LaneOtherAttribute != other.LaneOtherAttribute) return false;
      if (LeftLineId != other.LeftLineId) return false;
      if (RightLineId != other.RightLineId) return false;
      if(!constructions_.Equals(other.constructions_)) return false;
      if(!splitPointUtm_.Equals(other.splitPointUtm_)) return false;
      if(!mergePointUtm_.Equals(other.mergePointUtm_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLaneId) hash ^= LaneId.GetHashCode();
      hash ^= laneAttributes_.GetHashCode();
      hash ^= laneAttributePointsUtm_.GetHashCode();
      hash ^= laneAttributeContours_.GetHashCode();
      if (HasLaneOtherAttribute) hash ^= LaneOtherAttribute.GetHashCode();
      if (HasLeftLineId) hash ^= LeftLineId.GetHashCode();
      if (HasRightLineId) hash ^= RightLineId.GetHashCode();
      hash ^= constructions_.GetHashCode();
      hash ^= splitPointUtm_.GetHashCode();
      hash ^= mergePointUtm_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasLaneId) {
        output.WriteRawTag(8);
        output.WriteInt32(LaneId);
      }
      laneAttributes_.WriteTo(output, _repeated_laneAttributes_codec);
      laneAttributePointsUtm_.WriteTo(output, _repeated_laneAttributePointsUtm_codec);
      laneAttributeContours_.WriteTo(output, _repeated_laneAttributeContours_codec);
      if (HasLaneOtherAttribute) {
        output.WriteRawTag(40);
        output.WriteUInt32(LaneOtherAttribute);
      }
      if (HasLeftLineId) {
        output.WriteRawTag(48);
        output.WriteInt32(LeftLineId);
      }
      if (HasRightLineId) {
        output.WriteRawTag(56);
        output.WriteInt32(RightLineId);
      }
      constructions_.WriteTo(output, _repeated_constructions_codec);
      splitPointUtm_.WriteTo(output, _repeated_splitPointUtm_codec);
      mergePointUtm_.WriteTo(output, _repeated_mergePointUtm_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasLaneId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LaneId);
      }
      size += laneAttributes_.CalculateSize(_repeated_laneAttributes_codec);
      size += laneAttributePointsUtm_.CalculateSize(_repeated_laneAttributePointsUtm_codec);
      size += laneAttributeContours_.CalculateSize(_repeated_laneAttributeContours_codec);
      if (HasLaneOtherAttribute) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LaneOtherAttribute);
      }
      if (HasLeftLineId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftLineId);
      }
      if (HasRightLineId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RightLineId);
      }
      size += constructions_.CalculateSize(_repeated_constructions_codec);
      size += splitPointUtm_.CalculateSize(_repeated_splitPointUtm_codec);
      size += mergePointUtm_.CalculateSize(_repeated_mergePointUtm_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemLane other) {
      if (other == null) {
        return;
      }
      if (other.HasLaneId) {
        LaneId = other.LaneId;
      }
      laneAttributes_.Add(other.laneAttributes_);
      laneAttributePointsUtm_.Add(other.laneAttributePointsUtm_);
      laneAttributeContours_.Add(other.laneAttributeContours_);
      if (other.HasLaneOtherAttribute) {
        LaneOtherAttribute = other.LaneOtherAttribute;
      }
      if (other.HasLeftLineId) {
        LeftLineId = other.LeftLineId;
      }
      if (other.HasRightLineId) {
        RightLineId = other.RightLineId;
      }
      constructions_.Add(other.constructions_);
      splitPointUtm_.Add(other.splitPointUtm_);
      mergePointUtm_.Add(other.mergePointUtm_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LaneId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            laneAttributes_.AddEntriesFrom(input, _repeated_laneAttributes_codec);
            break;
          }
          case 26: {
            laneAttributePointsUtm_.AddEntriesFrom(input, _repeated_laneAttributePointsUtm_codec);
            break;
          }
          case 34: {
            laneAttributeContours_.AddEntriesFrom(input, _repeated_laneAttributeContours_codec);
            break;
          }
          case 40: {
            LaneOtherAttribute = input.ReadUInt32();
            break;
          }
          case 48: {
            LeftLineId = input.ReadInt32();
            break;
          }
          case 56: {
            RightLineId = input.ReadInt32();
            break;
          }
          case 66: {
            constructions_.AddEntriesFrom(input, _repeated_constructions_codec);
            break;
          }
          case 74: {
            splitPointUtm_.AddEntriesFrom(input, _repeated_splitPointUtm_codec);
            break;
          }
          case 82: {
            mergePointUtm_.AddEntriesFrom(input, _repeated_mergePointUtm_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MemLaneLine : pb::IMessage<MemLaneLine> {
    private static readonly pb::MessageParser<MemLaneLine> _parser = new pb::MessageParser<MemLaneLine>(() => new MemLaneLine());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemLaneLine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.MemReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemLaneLine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemLaneLine(MemLaneLine other) : this() {
      _hasBits0 = other._hasBits0;
      lineId_ = other.lineId_;
      typeList_ = other.typeList_.Clone();
      indexList_ = other.indexList_.Clone();
      linePointsUtm_ = other.linePointsUtm_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemLaneLine Clone() {
      return new MemLaneLine(this);
    }

    /// <summary>Field number for the "line_id" field.</summary>
    public const int LineIdFieldNumber = 1;
    private readonly static int LineIdDefaultValue = 0;

    private int lineId_;
    /// <summary>
    /// 车道线id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LineId {
      get { if ((_hasBits0 & 1) != 0) { return lineId_; } else { return LineIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        lineId_ = value;
      }
    }
    /// <summary>Gets whether the "line_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLineId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "line_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLineId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "type_list" field.</summary>
    public const int TypeListFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_typeList_codec
        = pb::FieldCodec.ForUInt32(16);
    private readonly pbc::RepeatedField<uint> typeList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 车道线类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TypeList {
      get { return typeList_; }
    }

    /// <summary>Field number for the "index_list" field.</summary>
    public const int IndexListFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_indexList_codec
        = pb::FieldCodec.ForInt32(24);
    private readonly pbc::RepeatedField<int> indexList_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 一段线如有多个属性，对应不同属性线段之间的切分点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IndexList {
      get { return indexList_; }
    }

    /// <summary>Field number for the "line_points_utm" field.</summary>
    public const int LinePointsUtmFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_linePointsUtm_codec
        = pb::FieldCodec.ForMessage(34, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> linePointsUtm_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// 车道线点列表, utm坐标系下
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> LinePointsUtm {
      get { return linePointsUtm_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemLaneLine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemLaneLine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LineId != other.LineId) return false;
      if(!typeList_.Equals(other.typeList_)) return false;
      if(!indexList_.Equals(other.indexList_)) return false;
      if(!linePointsUtm_.Equals(other.linePointsUtm_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLineId) hash ^= LineId.GetHashCode();
      hash ^= typeList_.GetHashCode();
      hash ^= indexList_.GetHashCode();
      hash ^= linePointsUtm_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasLineId) {
        output.WriteRawTag(8);
        output.WriteInt32(LineId);
      }
      typeList_.WriteTo(output, _repeated_typeList_codec);
      indexList_.WriteTo(output, _repeated_indexList_codec);
      linePointsUtm_.WriteTo(output, _repeated_linePointsUtm_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasLineId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LineId);
      }
      size += typeList_.CalculateSize(_repeated_typeList_codec);
      size += indexList_.CalculateSize(_repeated_indexList_codec);
      size += linePointsUtm_.CalculateSize(_repeated_linePointsUtm_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemLaneLine other) {
      if (other == null) {
        return;
      }
      if (other.HasLineId) {
        LineId = other.LineId;
      }
      typeList_.Add(other.typeList_);
      indexList_.Add(other.indexList_);
      linePointsUtm_.Add(other.linePointsUtm_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LineId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            typeList_.AddEntriesFrom(input, _repeated_typeList_codec);
            break;
          }
          case 26:
          case 24: {
            indexList_.AddEntriesFrom(input, _repeated_indexList_codec);
            break;
          }
          case 34: {
            linePointsUtm_.AddEntriesFrom(input, _repeated_linePointsUtm_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MemRoad : pb::IMessage<MemRoad> {
    private static readonly pb::MessageParser<MemRoad> _parser = new pb::MessageParser<MemRoad>(() => new MemRoad());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemRoad> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.MemReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemRoad() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemRoad(MemRoad other) : this() {
      _hasBits0 = other._hasBits0;
      roadId_ = other.roadId_;
      laneLines_ = other.laneLines_.Clone();
      lanes_ = other.lanes_.Clone();
      stopLines_ = other.stopLines_.Clone();
      constructionSections_ = other.constructionSections_.Clone();
      trafficLights_ = other.trafficLights_.Clone();
      groundElements_ = other.groundElements_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemRoad Clone() {
      return new MemRoad(this);
    }

    /// <summary>Field number for the "road_id" field.</summary>
    public const int RoadIdFieldNumber = 1;
    private readonly static int RoadIdDefaultValue = 0;

    private int roadId_;
    /// <summary>
    /// 道路id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoadId {
      get { if ((_hasBits0 & 1) != 0) { return roadId_; } else { return RoadIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        roadId_ = value;
      }
    }
    /// <summary>Gets whether the "road_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRoadId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "road_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRoadId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lane_lines" field.</summary>
    public const int LaneLinesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xviewer.MemLaneLine> _repeated_laneLines_codec
        = pb::FieldCodec.ForMessage(18, global::Xviewer.MemLaneLine.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.MemLaneLine> laneLines_ = new pbc::RepeatedField<global::Xviewer.MemLaneLine>();
    /// <summary>
    /// 车道线集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.MemLaneLine> LaneLines {
      get { return laneLines_; }
    }

    /// <summary>Field number for the "lanes" field.</summary>
    public const int LanesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Xviewer.MemLane> _repeated_lanes_codec
        = pb::FieldCodec.ForMessage(26, global::Xviewer.MemLane.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.MemLane> lanes_ = new pbc::RepeatedField<global::Xviewer.MemLane>();
    /// <summary>
    /// 车道集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.MemLane> Lanes {
      get { return lanes_; }
    }

    /// <summary>Field number for the "stop_lines" field.</summary>
    public const int StopLinesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Xviewer.MemStopLine> _repeated_stopLines_codec
        = pb::FieldCodec.ForMessage(34, global::Xviewer.MemStopLine.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.MemStopLine> stopLines_ = new pbc::RepeatedField<global::Xviewer.MemStopLine>();
    /// <summary>
    /// 停止线集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.MemStopLine> StopLines {
      get { return stopLines_; }
    }

    /// <summary>Field number for the "construction_sections" field.</summary>
    public const int ConstructionSectionsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Xviewer.MemConstructionSection> _repeated_constructionSections_codec
        = pb::FieldCodec.ForMessage(42, global::Xviewer.MemConstructionSection.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.MemConstructionSection> constructionSections_ = new pbc::RepeatedField<global::Xviewer.MemConstructionSection>();
    /// <summary>
    /// 施工路段集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.MemConstructionSection> ConstructionSections {
      get { return constructionSections_; }
    }

    /// <summary>Field number for the "traffic_lights" field.</summary>
    public const int TrafficLightsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Xviewer.MemTrafficLight> _repeated_trafficLights_codec
        = pb::FieldCodec.ForMessage(50, global::Xviewer.MemTrafficLight.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.MemTrafficLight> trafficLights_ = new pbc::RepeatedField<global::Xviewer.MemTrafficLight>();
    /// <summary>
    /// 红绿灯集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.MemTrafficLight> TrafficLights {
      get { return trafficLights_; }
    }

    /// <summary>Field number for the "ground_elements" field.</summary>
    public const int GroundElementsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Xviewer.MemGroundElement> _repeated_groundElements_codec
        = pb::FieldCodec.ForMessage(58, global::Xviewer.MemGroundElement.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.MemGroundElement> groundElements_ = new pbc::RepeatedField<global::Xviewer.MemGroundElement>();
    /// <summary>
    /// 地面其他元素集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.MemGroundElement> GroundElements {
      get { return groundElements_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemRoad);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemRoad other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoadId != other.RoadId) return false;
      if(!laneLines_.Equals(other.laneLines_)) return false;
      if(!lanes_.Equals(other.lanes_)) return false;
      if(!stopLines_.Equals(other.stopLines_)) return false;
      if(!constructionSections_.Equals(other.constructionSections_)) return false;
      if(!trafficLights_.Equals(other.trafficLights_)) return false;
      if(!groundElements_.Equals(other.groundElements_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRoadId) hash ^= RoadId.GetHashCode();
      hash ^= laneLines_.GetHashCode();
      hash ^= lanes_.GetHashCode();
      hash ^= stopLines_.GetHashCode();
      hash ^= constructionSections_.GetHashCode();
      hash ^= trafficLights_.GetHashCode();
      hash ^= groundElements_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasRoadId) {
        output.WriteRawTag(8);
        output.WriteInt32(RoadId);
      }
      laneLines_.WriteTo(output, _repeated_laneLines_codec);
      lanes_.WriteTo(output, _repeated_lanes_codec);
      stopLines_.WriteTo(output, _repeated_stopLines_codec);
      constructionSections_.WriteTo(output, _repeated_constructionSections_codec);
      trafficLights_.WriteTo(output, _repeated_trafficLights_codec);
      groundElements_.WriteTo(output, _repeated_groundElements_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRoadId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoadId);
      }
      size += laneLines_.CalculateSize(_repeated_laneLines_codec);
      size += lanes_.CalculateSize(_repeated_lanes_codec);
      size += stopLines_.CalculateSize(_repeated_stopLines_codec);
      size += constructionSections_.CalculateSize(_repeated_constructionSections_codec);
      size += trafficLights_.CalculateSize(_repeated_trafficLights_codec);
      size += groundElements_.CalculateSize(_repeated_groundElements_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemRoad other) {
      if (other == null) {
        return;
      }
      if (other.HasRoadId) {
        RoadId = other.RoadId;
      }
      laneLines_.Add(other.laneLines_);
      lanes_.Add(other.lanes_);
      stopLines_.Add(other.stopLines_);
      constructionSections_.Add(other.constructionSections_);
      trafficLights_.Add(other.trafficLights_);
      groundElements_.Add(other.groundElements_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoadId = input.ReadInt32();
            break;
          }
          case 18: {
            laneLines_.AddEntriesFrom(input, _repeated_laneLines_codec);
            break;
          }
          case 26: {
            lanes_.AddEntriesFrom(input, _repeated_lanes_codec);
            break;
          }
          case 34: {
            stopLines_.AddEntriesFrom(input, _repeated_stopLines_codec);
            break;
          }
          case 42: {
            constructionSections_.AddEntriesFrom(input, _repeated_constructionSections_codec);
            break;
          }
          case 50: {
            trafficLights_.AddEntriesFrom(input, _repeated_trafficLights_codec);
            break;
          }
          case 58: {
            groundElements_.AddEntriesFrom(input, _repeated_groundElements_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MemReferenceLine : pb::IMessage<MemReferenceLine> {
    private static readonly pb::MessageParser<MemReferenceLine> _parser = new pb::MessageParser<MemReferenceLine>(() => new MemReferenceLine());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemReferenceLine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.MemReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemReferenceLine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemReferenceLine(MemReferenceLine other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      wayPointsUtm_ = other.wayPointsUtm_.Clone();
      originRoadId_ = other.originRoadId_;
      destinationRoadId_ = other.destinationRoadId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemReferenceLine Clone() {
      return new MemReferenceLine(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static int IdDefaultValue = 0;

    private int id_;
    /// <summary>
    /// 引导线id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "way_points_utm" field.</summary>
    public const int WayPointsUtmFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_wayPointsUtm_codec
        = pb::FieldCodec.ForMessage(18, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> wayPointsUtm_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// 引导线点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> WayPointsUtm {
      get { return wayPointsUtm_; }
    }

    /// <summary>Field number for the "origin_road_id" field.</summary>
    public const int OriginRoadIdFieldNumber = 3;
    private readonly static int OriginRoadIdDefaultValue = 0;

    private int originRoadId_;
    /// <summary>
    /// 引导线起点road id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginRoadId {
      get { if ((_hasBits0 & 2) != 0) { return originRoadId_; } else { return OriginRoadIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        originRoadId_ = value;
      }
    }
    /// <summary>Gets whether the "origin_road_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOriginRoadId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "origin_road_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOriginRoadId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "destination_road_id" field.</summary>
    public const int DestinationRoadIdFieldNumber = 4;
    private readonly static int DestinationRoadIdDefaultValue = 0;

    private int destinationRoadId_;
    /// <summary>
    /// 引导线终点road id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DestinationRoadId {
      get { if ((_hasBits0 & 4) != 0) { return destinationRoadId_; } else { return DestinationRoadIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        destinationRoadId_ = value;
      }
    }
    /// <summary>Gets whether the "destination_road_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDestinationRoadId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "destination_road_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDestinationRoadId() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemReferenceLine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemReferenceLine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!wayPointsUtm_.Equals(other.wayPointsUtm_)) return false;
      if (OriginRoadId != other.OriginRoadId) return false;
      if (DestinationRoadId != other.DestinationRoadId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      hash ^= wayPointsUtm_.GetHashCode();
      if (HasOriginRoadId) hash ^= OriginRoadId.GetHashCode();
      if (HasDestinationRoadId) hash ^= DestinationRoadId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      wayPointsUtm_.WriteTo(output, _repeated_wayPointsUtm_codec);
      if (HasOriginRoadId) {
        output.WriteRawTag(24);
        output.WriteInt32(OriginRoadId);
      }
      if (HasDestinationRoadId) {
        output.WriteRawTag(32);
        output.WriteInt32(DestinationRoadId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += wayPointsUtm_.CalculateSize(_repeated_wayPointsUtm_codec);
      if (HasOriginRoadId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginRoadId);
      }
      if (HasDestinationRoadId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DestinationRoadId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemReferenceLine other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      wayPointsUtm_.Add(other.wayPointsUtm_);
      if (other.HasOriginRoadId) {
        OriginRoadId = other.OriginRoadId;
      }
      if (other.HasDestinationRoadId) {
        DestinationRoadId = other.DestinationRoadId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            wayPointsUtm_.AddEntriesFrom(input, _repeated_wayPointsUtm_codec);
            break;
          }
          case 24: {
            OriginRoadId = input.ReadInt32();
            break;
          }
          case 32: {
            DestinationRoadId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MemVirtualLane : pb::IMessage<MemVirtualLane> {
    private static readonly pb::MessageParser<MemVirtualLane> _parser = new pb::MessageParser<MemVirtualLane>(() => new MemVirtualLane());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemVirtualLane> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.MemReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemVirtualLane() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemVirtualLane(MemVirtualLane other) : this() {
      _hasBits0 = other._hasBits0;
      laneId_ = other.laneId_;
      originRoadId_ = other.originRoadId_;
      destinationRoadId_ = other.destinationRoadId_;
      originLaneId_ = other.originLaneId_;
      destinationLaneId_ = other.destinationLaneId_;
      leftLineId_ = other.leftLineId_;
      rightLineId_ = other.rightLineId_;
      laneAttribute_ = other.laneAttribute_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemVirtualLane Clone() {
      return new MemVirtualLane(this);
    }

    /// <summary>Field number for the "lane_id" field.</summary>
    public const int LaneIdFieldNumber = 1;
    private readonly static int LaneIdDefaultValue = 0;

    private int laneId_;
    /// <summary>
    /// 虚拟车道id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LaneId {
      get { if ((_hasBits0 & 1) != 0) { return laneId_; } else { return LaneIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        laneId_ = value;
      }
    }
    /// <summary>Gets whether the "lane_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLaneId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "lane_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLaneId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "origin_road_id" field.</summary>
    public const int OriginRoadIdFieldNumber = 2;
    private readonly static int OriginRoadIdDefaultValue = 0;

    private int originRoadId_;
    /// <summary>
    /// 虚拟车道连接起点road id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginRoadId {
      get { if ((_hasBits0 & 2) != 0) { return originRoadId_; } else { return OriginRoadIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        originRoadId_ = value;
      }
    }
    /// <summary>Gets whether the "origin_road_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOriginRoadId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "origin_road_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOriginRoadId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "destination_road_id" field.</summary>
    public const int DestinationRoadIdFieldNumber = 3;
    private readonly static int DestinationRoadIdDefaultValue = 0;

    private int destinationRoadId_;
    /// <summary>
    /// 虚拟车道连接终点road id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DestinationRoadId {
      get { if ((_hasBits0 & 4) != 0) { return destinationRoadId_; } else { return DestinationRoadIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        destinationRoadId_ = value;
      }
    }
    /// <summary>Gets whether the "destination_road_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDestinationRoadId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "destination_road_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDestinationRoadId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "origin_lane_id" field.</summary>
    public const int OriginLaneIdFieldNumber = 4;
    private readonly static int OriginLaneIdDefaultValue = 0;

    private int originLaneId_;
    /// <summary>
    /// 虚拟车道连接起点lane id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginLaneId {
      get { if ((_hasBits0 & 8) != 0) { return originLaneId_; } else { return OriginLaneIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        originLaneId_ = value;
      }
    }
    /// <summary>Gets whether the "origin_lane_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOriginLaneId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "origin_lane_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOriginLaneId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "destination_lane_id" field.</summary>
    public const int DestinationLaneIdFieldNumber = 5;
    private readonly static int DestinationLaneIdDefaultValue = 0;

    private int destinationLaneId_;
    /// <summary>
    /// 虚拟车道连接终点lane id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DestinationLaneId {
      get { if ((_hasBits0 & 16) != 0) { return destinationLaneId_; } else { return DestinationLaneIdDefaultValue; } }
      set {
        _hasBits0 |= 16;
        destinationLaneId_ = value;
      }
    }
    /// <summary>Gets whether the "destination_lane_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDestinationLaneId {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "destination_lane_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDestinationLaneId() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "left_line_id" field.</summary>
    public const int LeftLineIdFieldNumber = 6;
    private readonly static int LeftLineIdDefaultValue = 0;

    private int leftLineId_;
    /// <summary>
    /// 左虚拟车道线id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftLineId {
      get { if ((_hasBits0 & 32) != 0) { return leftLineId_; } else { return LeftLineIdDefaultValue; } }
      set {
        _hasBits0 |= 32;
        leftLineId_ = value;
      }
    }
    /// <summary>Gets whether the "left_line_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLeftLineId {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "left_line_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLeftLineId() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "right_line_id" field.</summary>
    public const int RightLineIdFieldNumber = 7;
    private readonly static int RightLineIdDefaultValue = 0;

    private int rightLineId_;
    /// <summary>
    /// 右虚拟车道线id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RightLineId {
      get { if ((_hasBits0 & 64) != 0) { return rightLineId_; } else { return RightLineIdDefaultValue; } }
      set {
        _hasBits0 |= 64;
        rightLineId_ = value;
      }
    }
    /// <summary>Gets whether the "right_line_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRightLineId {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "right_line_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRightLineId() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "lane_attribute" field.</summary>
    public const int LaneAttributeFieldNumber = 8;
    private readonly static uint LaneAttributeDefaultValue = 0;

    private uint laneAttribute_;
    /// <summary>
    /// 车道导流属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LaneAttribute {
      get { if ((_hasBits0 & 128) != 0) { return laneAttribute_; } else { return LaneAttributeDefaultValue; } }
      set {
        _hasBits0 |= 128;
        laneAttribute_ = value;
      }
    }
    /// <summary>Gets whether the "lane_attribute" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLaneAttribute {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "lane_attribute" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLaneAttribute() {
      _hasBits0 &= ~128;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemVirtualLane);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemVirtualLane other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LaneId != other.LaneId) return false;
      if (OriginRoadId != other.OriginRoadId) return false;
      if (DestinationRoadId != other.DestinationRoadId) return false;
      if (OriginLaneId != other.OriginLaneId) return false;
      if (DestinationLaneId != other.DestinationLaneId) return false;
      if (LeftLineId != other.LeftLineId) return false;
      if (RightLineId != other.RightLineId) return false;
      if (LaneAttribute != other.LaneAttribute) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLaneId) hash ^= LaneId.GetHashCode();
      if (HasOriginRoadId) hash ^= OriginRoadId.GetHashCode();
      if (HasDestinationRoadId) hash ^= DestinationRoadId.GetHashCode();
      if (HasOriginLaneId) hash ^= OriginLaneId.GetHashCode();
      if (HasDestinationLaneId) hash ^= DestinationLaneId.GetHashCode();
      if (HasLeftLineId) hash ^= LeftLineId.GetHashCode();
      if (HasRightLineId) hash ^= RightLineId.GetHashCode();
      if (HasLaneAttribute) hash ^= LaneAttribute.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasLaneId) {
        output.WriteRawTag(8);
        output.WriteInt32(LaneId);
      }
      if (HasOriginRoadId) {
        output.WriteRawTag(16);
        output.WriteInt32(OriginRoadId);
      }
      if (HasDestinationRoadId) {
        output.WriteRawTag(24);
        output.WriteInt32(DestinationRoadId);
      }
      if (HasOriginLaneId) {
        output.WriteRawTag(32);
        output.WriteInt32(OriginLaneId);
      }
      if (HasDestinationLaneId) {
        output.WriteRawTag(40);
        output.WriteInt32(DestinationLaneId);
      }
      if (HasLeftLineId) {
        output.WriteRawTag(48);
        output.WriteInt32(LeftLineId);
      }
      if (HasRightLineId) {
        output.WriteRawTag(56);
        output.WriteInt32(RightLineId);
      }
      if (HasLaneAttribute) {
        output.WriteRawTag(64);
        output.WriteUInt32(LaneAttribute);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasLaneId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LaneId);
      }
      if (HasOriginRoadId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginRoadId);
      }
      if (HasDestinationRoadId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DestinationRoadId);
      }
      if (HasOriginLaneId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginLaneId);
      }
      if (HasDestinationLaneId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DestinationLaneId);
      }
      if (HasLeftLineId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftLineId);
      }
      if (HasRightLineId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RightLineId);
      }
      if (HasLaneAttribute) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LaneAttribute);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemVirtualLane other) {
      if (other == null) {
        return;
      }
      if (other.HasLaneId) {
        LaneId = other.LaneId;
      }
      if (other.HasOriginRoadId) {
        OriginRoadId = other.OriginRoadId;
      }
      if (other.HasDestinationRoadId) {
        DestinationRoadId = other.DestinationRoadId;
      }
      if (other.HasOriginLaneId) {
        OriginLaneId = other.OriginLaneId;
      }
      if (other.HasDestinationLaneId) {
        DestinationLaneId = other.DestinationLaneId;
      }
      if (other.HasLeftLineId) {
        LeftLineId = other.LeftLineId;
      }
      if (other.HasRightLineId) {
        RightLineId = other.RightLineId;
      }
      if (other.HasLaneAttribute) {
        LaneAttribute = other.LaneAttribute;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LaneId = input.ReadInt32();
            break;
          }
          case 16: {
            OriginRoadId = input.ReadInt32();
            break;
          }
          case 24: {
            DestinationRoadId = input.ReadInt32();
            break;
          }
          case 32: {
            OriginLaneId = input.ReadInt32();
            break;
          }
          case 40: {
            DestinationLaneId = input.ReadInt32();
            break;
          }
          case 48: {
            LeftLineId = input.ReadInt32();
            break;
          }
          case 56: {
            RightLineId = input.ReadInt32();
            break;
          }
          case 64: {
            LaneAttribute = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MemVirtualLine : pb::IMessage<MemVirtualLine> {
    private static readonly pb::MessageParser<MemVirtualLine> _parser = new pb::MessageParser<MemVirtualLine>(() => new MemVirtualLine());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemVirtualLine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.MemReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemVirtualLine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemVirtualLine(MemVirtualLine other) : this() {
      _hasBits0 = other._hasBits0;
      lineId_ = other.lineId_;
      linePointsUtm_ = other.linePointsUtm_.Clone();
      originLineId_ = other.originLineId_;
      destinationLineId_ = other.destinationLineId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemVirtualLine Clone() {
      return new MemVirtualLine(this);
    }

    /// <summary>Field number for the "line_id" field.</summary>
    public const int LineIdFieldNumber = 1;
    private readonly static int LineIdDefaultValue = 0;

    private int lineId_;
    /// <summary>
    /// 虚拟车道线id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LineId {
      get { if ((_hasBits0 & 1) != 0) { return lineId_; } else { return LineIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        lineId_ = value;
      }
    }
    /// <summary>Gets whether the "line_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLineId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "line_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLineId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "line_points_utm" field.</summary>
    public const int LinePointsUtmFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_linePointsUtm_codec
        = pb::FieldCodec.ForMessage(18, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> linePointsUtm_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// 车道线点_utm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> LinePointsUtm {
      get { return linePointsUtm_; }
    }

    /// <summary>Field number for the "origin_line_id" field.</summary>
    public const int OriginLineIdFieldNumber = 3;
    private readonly static int OriginLineIdDefaultValue = 0;

    private int originLineId_;
    /// <summary>
    /// 虚拟车道线连接起始line id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginLineId {
      get { if ((_hasBits0 & 2) != 0) { return originLineId_; } else { return OriginLineIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        originLineId_ = value;
      }
    }
    /// <summary>Gets whether the "origin_line_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOriginLineId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "origin_line_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOriginLineId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "destination_line_id" field.</summary>
    public const int DestinationLineIdFieldNumber = 4;
    private readonly static int DestinationLineIdDefaultValue = 0;

    private int destinationLineId_;
    /// <summary>
    /// 虚拟车道线连接目标line id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DestinationLineId {
      get { if ((_hasBits0 & 4) != 0) { return destinationLineId_; } else { return DestinationLineIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        destinationLineId_ = value;
      }
    }
    /// <summary>Gets whether the "destination_line_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDestinationLineId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "destination_line_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDestinationLineId() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemVirtualLine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemVirtualLine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LineId != other.LineId) return false;
      if(!linePointsUtm_.Equals(other.linePointsUtm_)) return false;
      if (OriginLineId != other.OriginLineId) return false;
      if (DestinationLineId != other.DestinationLineId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLineId) hash ^= LineId.GetHashCode();
      hash ^= linePointsUtm_.GetHashCode();
      if (HasOriginLineId) hash ^= OriginLineId.GetHashCode();
      if (HasDestinationLineId) hash ^= DestinationLineId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasLineId) {
        output.WriteRawTag(8);
        output.WriteInt32(LineId);
      }
      linePointsUtm_.WriteTo(output, _repeated_linePointsUtm_codec);
      if (HasOriginLineId) {
        output.WriteRawTag(24);
        output.WriteInt32(OriginLineId);
      }
      if (HasDestinationLineId) {
        output.WriteRawTag(32);
        output.WriteInt32(DestinationLineId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasLineId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LineId);
      }
      size += linePointsUtm_.CalculateSize(_repeated_linePointsUtm_codec);
      if (HasOriginLineId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginLineId);
      }
      if (HasDestinationLineId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DestinationLineId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemVirtualLine other) {
      if (other == null) {
        return;
      }
      if (other.HasLineId) {
        LineId = other.LineId;
      }
      linePointsUtm_.Add(other.linePointsUtm_);
      if (other.HasOriginLineId) {
        OriginLineId = other.OriginLineId;
      }
      if (other.HasDestinationLineId) {
        DestinationLineId = other.DestinationLineId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LineId = input.ReadInt32();
            break;
          }
          case 18: {
            linePointsUtm_.AddEntriesFrom(input, _repeated_linePointsUtm_codec);
            break;
          }
          case 24: {
            OriginLineId = input.ReadInt32();
            break;
          }
          case 32: {
            DestinationLineId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MemIntersection : pb::IMessage<MemIntersection> {
    private static readonly pb::MessageParser<MemIntersection> _parser = new pb::MessageParser<MemIntersection>(() => new MemIntersection());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemIntersection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.MemReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemIntersection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemIntersection(MemIntersection other) : this() {
      _hasBits0 = other._hasBits0;
      intersectionId_ = other.intersectionId_;
      virtualLanes_ = other.virtualLanes_.Clone();
      virtualLines_ = other.virtualLines_.Clone();
      referenceLines_ = other.referenceLines_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemIntersection Clone() {
      return new MemIntersection(this);
    }

    /// <summary>Field number for the "intersection_id" field.</summary>
    public const int IntersectionIdFieldNumber = 1;
    private readonly static int IntersectionIdDefaultValue = 0;

    private int intersectionId_;
    /// <summary>
    /// 路口id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IntersectionId {
      get { if ((_hasBits0 & 1) != 0) { return intersectionId_; } else { return IntersectionIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        intersectionId_ = value;
      }
    }
    /// <summary>Gets whether the "intersection_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIntersectionId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "intersection_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIntersectionId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "virtual_lanes" field.</summary>
    public const int VirtualLanesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xviewer.MemVirtualLane> _repeated_virtualLanes_codec
        = pb::FieldCodec.ForMessage(18, global::Xviewer.MemVirtualLane.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.MemVirtualLane> virtualLanes_ = new pbc::RepeatedField<global::Xviewer.MemVirtualLane>();
    /// <summary>
    /// 虚拟车道集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.MemVirtualLane> VirtualLanes {
      get { return virtualLanes_; }
    }

    /// <summary>Field number for the "virtual_lines" field.</summary>
    public const int VirtualLinesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Xviewer.MemVirtualLine> _repeated_virtualLines_codec
        = pb::FieldCodec.ForMessage(26, global::Xviewer.MemVirtualLine.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.MemVirtualLine> virtualLines_ = new pbc::RepeatedField<global::Xviewer.MemVirtualLine>();
    /// <summary>
    /// 虚拟车道线集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.MemVirtualLine> VirtualLines {
      get { return virtualLines_; }
    }

    /// <summary>Field number for the "reference_lines" field.</summary>
    public const int ReferenceLinesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Xviewer.MemReferenceLine> _repeated_referenceLines_codec
        = pb::FieldCodec.ForMessage(34, global::Xviewer.MemReferenceLine.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.MemReferenceLine> referenceLines_ = new pbc::RepeatedField<global::Xviewer.MemReferenceLine>();
    /// <summary>
    /// 引导线集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.MemReferenceLine> ReferenceLines {
      get { return referenceLines_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemIntersection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemIntersection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IntersectionId != other.IntersectionId) return false;
      if(!virtualLanes_.Equals(other.virtualLanes_)) return false;
      if(!virtualLines_.Equals(other.virtualLines_)) return false;
      if(!referenceLines_.Equals(other.referenceLines_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIntersectionId) hash ^= IntersectionId.GetHashCode();
      hash ^= virtualLanes_.GetHashCode();
      hash ^= virtualLines_.GetHashCode();
      hash ^= referenceLines_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasIntersectionId) {
        output.WriteRawTag(8);
        output.WriteInt32(IntersectionId);
      }
      virtualLanes_.WriteTo(output, _repeated_virtualLanes_codec);
      virtualLines_.WriteTo(output, _repeated_virtualLines_codec);
      referenceLines_.WriteTo(output, _repeated_referenceLines_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasIntersectionId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IntersectionId);
      }
      size += virtualLanes_.CalculateSize(_repeated_virtualLanes_codec);
      size += virtualLines_.CalculateSize(_repeated_virtualLines_codec);
      size += referenceLines_.CalculateSize(_repeated_referenceLines_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemIntersection other) {
      if (other == null) {
        return;
      }
      if (other.HasIntersectionId) {
        IntersectionId = other.IntersectionId;
      }
      virtualLanes_.Add(other.virtualLanes_);
      virtualLines_.Add(other.virtualLines_);
      referenceLines_.Add(other.referenceLines_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IntersectionId = input.ReadInt32();
            break;
          }
          case 18: {
            virtualLanes_.AddEntriesFrom(input, _repeated_virtualLanes_codec);
            break;
          }
          case 26: {
            virtualLines_.AddEntriesFrom(input, _repeated_virtualLines_codec);
            break;
          }
          case 34: {
            referenceLines_.AddEntriesFrom(input, _repeated_referenceLines_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MemCurb : pb::IMessage<MemCurb> {
    private static readonly pb::MessageParser<MemCurb> _parser = new pb::MessageParser<MemCurb>(() => new MemCurb());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemCurb> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.MemReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemCurb() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemCurb(MemCurb other) : this() {
      _hasBits0 = other._hasBits0;
      curbId_ = other.curbId_;
      typeList_ = other.typeList_.Clone();
      indexList_ = other.indexList_.Clone();
      curbPointsUtm_ = other.curbPointsUtm_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemCurb Clone() {
      return new MemCurb(this);
    }

    /// <summary>Field number for the "curb_id" field.</summary>
    public const int CurbIdFieldNumber = 1;
    private readonly static int CurbIdDefaultValue = 0;

    private int curbId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurbId {
      get { if ((_hasBits0 & 1) != 0) { return curbId_; } else { return CurbIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        curbId_ = value;
      }
    }
    /// <summary>Gets whether the "curb_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCurbId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "curb_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCurbId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "type_list" field.</summary>
    public const int TypeListFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_typeList_codec
        = pb::FieldCodec.ForUInt32(16);
    private readonly pbc::RepeatedField<uint> typeList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// curb类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TypeList {
      get { return typeList_; }
    }

    /// <summary>Field number for the "index_list" field.</summary>
    public const int IndexListFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_indexList_codec
        = pb::FieldCodec.ForInt32(24);
    private readonly pbc::RepeatedField<int> indexList_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 一段线如有多个属性，对应不同属性线段之间的切分点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IndexList {
      get { return indexList_; }
    }

    /// <summary>Field number for the "curb_points_utm" field.</summary>
    public const int CurbPointsUtmFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_curbPointsUtm_codec
        = pb::FieldCodec.ForMessage(34, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> curbPointsUtm_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// curb线点列表, utm坐标系下
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> CurbPointsUtm {
      get { return curbPointsUtm_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemCurb);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemCurb other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurbId != other.CurbId) return false;
      if(!typeList_.Equals(other.typeList_)) return false;
      if(!indexList_.Equals(other.indexList_)) return false;
      if(!curbPointsUtm_.Equals(other.curbPointsUtm_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCurbId) hash ^= CurbId.GetHashCode();
      hash ^= typeList_.GetHashCode();
      hash ^= indexList_.GetHashCode();
      hash ^= curbPointsUtm_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasCurbId) {
        output.WriteRawTag(8);
        output.WriteInt32(CurbId);
      }
      typeList_.WriteTo(output, _repeated_typeList_codec);
      indexList_.WriteTo(output, _repeated_indexList_codec);
      curbPointsUtm_.WriteTo(output, _repeated_curbPointsUtm_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCurbId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurbId);
      }
      size += typeList_.CalculateSize(_repeated_typeList_codec);
      size += indexList_.CalculateSize(_repeated_indexList_codec);
      size += curbPointsUtm_.CalculateSize(_repeated_curbPointsUtm_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemCurb other) {
      if (other == null) {
        return;
      }
      if (other.HasCurbId) {
        CurbId = other.CurbId;
      }
      typeList_.Add(other.typeList_);
      indexList_.Add(other.indexList_);
      curbPointsUtm_.Add(other.curbPointsUtm_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CurbId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            typeList_.AddEntriesFrom(input, _repeated_typeList_codec);
            break;
          }
          case 26:
          case 24: {
            indexList_.AddEntriesFrom(input, _repeated_indexList_codec);
            break;
          }
          case 34: {
            curbPointsUtm_.AddEntriesFrom(input, _repeated_curbPointsUtm_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MemRoadInfo : pb::IMessage<MemRoadInfo> {
    private static readonly pb::MessageParser<MemRoadInfo> _parser = new pb::MessageParser<MemRoadInfo>(() => new MemRoadInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemRoadInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.MemReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemRoadInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemRoadInfo(MemRoadInfo other) : this() {
      _hasBits0 = other._hasBits0;
      egoRoadId_ = other.egoRoadId_;
      roads_ = other.roads_.Clone();
      intersections_ = other.intersections_.Clone();
      curbs_ = other.curbs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemRoadInfo Clone() {
      return new MemRoadInfo(this);
    }

    /// <summary>Field number for the "ego_road_id" field.</summary>
    public const int EgoRoadIdFieldNumber = 1;
    private readonly static int EgoRoadIdDefaultValue = 0;

    private int egoRoadId_;
    /// <summary>
    /// 车辆所处最近的road id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EgoRoadId {
      get { if ((_hasBits0 & 1) != 0) { return egoRoadId_; } else { return EgoRoadIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        egoRoadId_ = value;
      }
    }
    /// <summary>Gets whether the "ego_road_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEgoRoadId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ego_road_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEgoRoadId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "roads" field.</summary>
    public const int RoadsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xviewer.MemRoad> _repeated_roads_codec
        = pb::FieldCodec.ForMessage(18, global::Xviewer.MemRoad.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.MemRoad> roads_ = new pbc::RepeatedField<global::Xviewer.MemRoad>();
    /// <summary>
    /// road集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.MemRoad> Roads {
      get { return roads_; }
    }

    /// <summary>Field number for the "intersections" field.</summary>
    public const int IntersectionsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Xviewer.MemIntersection> _repeated_intersections_codec
        = pb::FieldCodec.ForMessage(26, global::Xviewer.MemIntersection.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.MemIntersection> intersections_ = new pbc::RepeatedField<global::Xviewer.MemIntersection>();
    /// <summary>
    /// 路口集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.MemIntersection> Intersections {
      get { return intersections_; }
    }

    /// <summary>Field number for the "curbs" field.</summary>
    public const int CurbsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Xviewer.MemCurb> _repeated_curbs_codec
        = pb::FieldCodec.ForMessage(34, global::Xviewer.MemCurb.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.MemCurb> curbs_ = new pbc::RepeatedField<global::Xviewer.MemCurb>();
    /// <summary>
    /// 路牙集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.MemCurb> Curbs {
      get { return curbs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemRoadInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemRoadInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EgoRoadId != other.EgoRoadId) return false;
      if(!roads_.Equals(other.roads_)) return false;
      if(!intersections_.Equals(other.intersections_)) return false;
      if(!curbs_.Equals(other.curbs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEgoRoadId) hash ^= EgoRoadId.GetHashCode();
      hash ^= roads_.GetHashCode();
      hash ^= intersections_.GetHashCode();
      hash ^= curbs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasEgoRoadId) {
        output.WriteRawTag(8);
        output.WriteInt32(EgoRoadId);
      }
      roads_.WriteTo(output, _repeated_roads_codec);
      intersections_.WriteTo(output, _repeated_intersections_codec);
      curbs_.WriteTo(output, _repeated_curbs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEgoRoadId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EgoRoadId);
      }
      size += roads_.CalculateSize(_repeated_roads_codec);
      size += intersections_.CalculateSize(_repeated_intersections_codec);
      size += curbs_.CalculateSize(_repeated_curbs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemRoadInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasEgoRoadId) {
        EgoRoadId = other.EgoRoadId;
      }
      roads_.Add(other.roads_);
      intersections_.Add(other.intersections_);
      curbs_.Add(other.curbs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EgoRoadId = input.ReadInt32();
            break;
          }
          case 18: {
            roads_.AddEntriesFrom(input, _repeated_roads_codec);
            break;
          }
          case 26: {
            intersections_.AddEntriesFrom(input, _repeated_intersections_codec);
            break;
          }
          case 34: {
            curbs_.AddEntriesFrom(input, _repeated_curbs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserActionMEM : pb::IMessage<UserActionMEM> {
    private static readonly pb::MessageParser<UserActionMEM> _parser = new pb::MessageParser<UserActionMEM>(() => new UserActionMEM());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserActionMEM> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.MemReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserActionMEM() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserActionMEM(UserActionMEM other) : this() {
      _hasBits0 = other._hasBits0;
      constructionPointsUtm_ = other.constructionPointsUtm_.Clone();
      constructionId_ = other.constructionId_;
      lanesNumber_ = other.lanesNumber_;
      constructionLaneRange_ = other.constructionLaneRange_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserActionMEM Clone() {
      return new UserActionMEM(this);
    }

    /// <summary>Field number for the "construction_points_utm" field.</summary>
    public const int ConstructionPointsUtmFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_constructionPointsUtm_codec
        = pb::FieldCodec.ForMessage(10, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> constructionPointsUtm_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// 施工地点 第一个点位起始位置，第二个点为结束位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> ConstructionPointsUtm {
      get { return constructionPointsUtm_; }
    }

    /// <summary>Field number for the "construction_id" field.</summary>
    public const int ConstructionIdFieldNumber = 2;
    private readonly static ulong ConstructionIdDefaultValue = 0UL;

    private ulong constructionId_;
    /// <summary>
    /// 施工路段唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ConstructionId {
      get { if ((_hasBits0 & 1) != 0) { return constructionId_; } else { return ConstructionIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        constructionId_ = value;
      }
    }
    /// <summary>Gets whether the "construction_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasConstructionId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "construction_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConstructionId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lanes_number" field.</summary>
    public const int LanesNumberFieldNumber = 3;
    private readonly static uint LanesNumberDefaultValue = 0;

    private uint lanesNumber_;
    /// <summary>
    /// 所处道路数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LanesNumber {
      get { if ((_hasBits0 & 2) != 0) { return lanesNumber_; } else { return LanesNumberDefaultValue; } }
      set {
        _hasBits0 |= 2;
        lanesNumber_ = value;
      }
    }
    /// <summary>Gets whether the "lanes_number" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLanesNumber {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "lanes_number" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLanesNumber() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "construction_lane_range" field.</summary>
    public const int ConstructionLaneRangeFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_constructionLaneRange_codec
        = pb::FieldCodec.ForUInt32(32);
    private readonly pbc::RepeatedField<uint> constructionLaneRange_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 施工车道范围
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ConstructionLaneRange {
      get { return constructionLaneRange_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserActionMEM);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserActionMEM other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!constructionPointsUtm_.Equals(other.constructionPointsUtm_)) return false;
      if (ConstructionId != other.ConstructionId) return false;
      if (LanesNumber != other.LanesNumber) return false;
      if(!constructionLaneRange_.Equals(other.constructionLaneRange_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= constructionPointsUtm_.GetHashCode();
      if (HasConstructionId) hash ^= ConstructionId.GetHashCode();
      if (HasLanesNumber) hash ^= LanesNumber.GetHashCode();
      hash ^= constructionLaneRange_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      constructionPointsUtm_.WriteTo(output, _repeated_constructionPointsUtm_codec);
      if (HasConstructionId) {
        output.WriteRawTag(16);
        output.WriteUInt64(ConstructionId);
      }
      if (HasLanesNumber) {
        output.WriteRawTag(24);
        output.WriteUInt32(LanesNumber);
      }
      constructionLaneRange_.WriteTo(output, _repeated_constructionLaneRange_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += constructionPointsUtm_.CalculateSize(_repeated_constructionPointsUtm_codec);
      if (HasConstructionId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ConstructionId);
      }
      if (HasLanesNumber) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LanesNumber);
      }
      size += constructionLaneRange_.CalculateSize(_repeated_constructionLaneRange_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserActionMEM other) {
      if (other == null) {
        return;
      }
      constructionPointsUtm_.Add(other.constructionPointsUtm_);
      if (other.HasConstructionId) {
        ConstructionId = other.ConstructionId;
      }
      if (other.HasLanesNumber) {
        LanesNumber = other.LanesNumber;
      }
      constructionLaneRange_.Add(other.constructionLaneRange_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            constructionPointsUtm_.AddEntriesFrom(input, _repeated_constructionPointsUtm_codec);
            break;
          }
          case 16: {
            ConstructionId = input.ReadUInt64();
            break;
          }
          case 24: {
            LanesNumber = input.ReadUInt32();
            break;
          }
          case 34:
          case 32: {
            constructionLaneRange_.AddEntriesFrom(input, _repeated_constructionLaneRange_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Mem : pb::IMessage<Mem> {
    private static readonly pb::MessageParser<Mem> _parser = new pb::MessageParser<Mem>(() => new Mem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Mem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.MemReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mem(Mem other) : this() {
      roadInfo_ = other.roadInfo_ != null ? other.roadInfo_.Clone() : null;
      allMem_ = other.allMem_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mem Clone() {
      return new Mem(this);
    }

    /// <summary>Field number for the "road_info" field.</summary>
    public const int RoadInfoFieldNumber = 1;
    private global::Xviewer.MemRoadInfo roadInfo_;
    /// <summary>
    /// 道路信息集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.MemRoadInfo RoadInfo {
      get { return roadInfo_; }
      set {
        roadInfo_ = value;
      }
    }

    /// <summary>Field number for the "all_mem" field.</summary>
    public const int AllMemFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xviewer.UserActionMEM> _repeated_allMem_codec
        = pb::FieldCodec.ForMessage(18, global::Xviewer.UserActionMEM.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.UserActionMEM> allMem_ = new pbc::RepeatedField<global::Xviewer.UserActionMEM>();
    /// <summary>
    /// 所有施工路段信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.UserActionMEM> AllMem {
      get { return allMem_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Mem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Mem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoadInfo, other.RoadInfo)) return false;
      if(!allMem_.Equals(other.allMem_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roadInfo_ != null) hash ^= RoadInfo.GetHashCode();
      hash ^= allMem_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roadInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoadInfo);
      }
      allMem_.WriteTo(output, _repeated_allMem_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roadInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoadInfo);
      }
      size += allMem_.CalculateSize(_repeated_allMem_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Mem other) {
      if (other == null) {
        return;
      }
      if (other.roadInfo_ != null) {
        if (roadInfo_ == null) {
          RoadInfo = new global::Xviewer.MemRoadInfo();
        }
        RoadInfo.MergeFrom(other.RoadInfo);
      }
      allMem_.Add(other.allMem_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roadInfo_ == null) {
              RoadInfo = new global::Xviewer.MemRoadInfo();
            }
            input.ReadMessage(RoadInfo);
            break;
          }
          case 18: {
            allMem_.AddEntriesFrom(input, _repeated_allMem_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
