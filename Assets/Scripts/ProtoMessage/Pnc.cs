// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: pnc.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Xviewer {

  /// <summary>Holder for reflection information generated from pnc.proto</summary>
  public static partial class PncReflection {

    #region Descriptor
    /// <summary>File descriptor for pnc.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PncReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglwbmMucHJvdG8SB3h2aWV3ZXIaDGJhc2ljcy5wcm90bxoUYmVoYXZpb3Jf",
            "ZGVidWcucHJvdG8aE3BsYW5uZXJfZGVidWcucHJvdG8iVQoIT25lQ3VydmUS",
            "EwoLd2hlZWxfYW5nbGUYASABKAESDgoGbGVuZ2h0GAIgASgCEgwKBHR5cGUY",
            "AyABKAUSFgoOZXhwZWN0ZWRfc3BlZWQYBCABKAIiXAoGQ3VydmVzEiEKBmN1",
            "cnZlcxgBIAMoCzIRLnh2aWV3ZXIuT25lQ3VydmUSDgoGdHJhdmVsGAIgASgB",
            "EhMKC2NoYW5nZV9wYXRoGAMgASgIEgoKAmR5GAQgASgCIpoBCg9UcmFqZWN0",
            "b3J5UG9pbnQSCQoBeBgBIAEoARIJCgF5GAIgASgBEgkKAXMYAyABKAESCQoB",
            "dBgEIAEoARIRCgljdXJ2YXR1cmUYBSABKAESEQoJeWF3X2FuZ2xlGAYgASgB",
            "EhYKDmV4cGVjdGVkX3NwZWVkGAcgASgBEh0KFWV4cGVjdGVkX2FjY2VsZXJh",
            "dGlvbhgIIAEoASKvAQoRVHJhamVjdG9yeVN0YW1wZWQSLQoLdHJhal9wb2lu",
            "dHMYASADKAsyGC54dmlld2VyLlRyYWplY3RvcnlQb2ludBIVCg1zY2VuYXJp",
            "b19kZXNjGAIgASgFEhAKCGNvb3Jfc3lzGAMgASgNEhkKEXJlcGxhbm5pbmdf",
            "cmVhc29uGAQgASgFEhIKCnRyYWpfc3RhdGUYBSADKAUSEwoLZXhwZWN0X2dl",
            "YXIYBiABKAUiRAoJUGF0aEJvdW5kEiMKC3BvaW50X2FycmF5GAEgAygLMg4u",
            "eHZpZXdlci5Qb2ludBISCgpkZWJ1Z19uYW1lGAIgASgJIr0CCgtUaW1lQ29u",
            "c3VtZRIbChNkZWNpc2lvbl9kZWxheV90aW1lGAEgASgCEh4KFmNoYXNzaXNf",
            "bXNnX2RlbGF5X3RpbWUYAiABKAISIgoaZWdvX3ZlaGljbGVfbG9jX2RlbGF5",
            "X3RpbWUYAyABKAISGwoTZGVjaXNpb25fZGVsdGFfdGltZRgEIAEoAhIeChZj",
            "aGFzc2lzX21zZ19kZWx0YV90aW1lGAUgASgCEiIKGmVnb192ZWhpY2xlX2xv",
            "Y19kZWx0YV90aW1lGAYgASgCEh0KFXBlcmNlcHRpb25fZGVsdGFfdGltZRgH",
            "IAEoAhIaChJjYXB0dXJlX2RlbHRhX3RpbWUYCCABKAISEwoLZ2V0X3N0X3Rp",
            "bWUYCSABKAISHAoUcGxhbm5uaW5nX3RvdGFsX3RpbWUYCiABKAIitgEKCURl",
            "YnVnUGF0aBInCgtwYXRoX2JvdW5kcxgBIAMoCzISLnh2aWV3ZXIuUGF0aEJv",
            "dW5kEiUKCXBhdGhfZGF0YRgCIAEoCzISLnh2aWV3ZXIuUGF0aEJvdW5kEioK",
            "DnJlZmVyZW5jZV9wYXRoGAMgASgLMhIueHZpZXdlci5QYXRoQm91bmQSLQoV",
            "bGF0ZXJhbF9wb3RlbnRpYWxfdmVjGAQgAygLMg4ueHZpZXdlci5Qb2ludCKt",
            "AQoQQXBhUGxhbm5pbmdTdGF0ZRISCgpwbGFuX3N0YXRlGAEgASgFEhAKCHBs",
            "YW5fZGlyGAIgASgNEhgKEHRyYWpfZm9yX3Nwb3RfaWQYAyABKAUSLwoPYXZh",
            "bGlhYmxlX3Nsb3RzGAQgAygLMhYueHZpZXdlci5BdmFsaWFibGVzbG90EhUK",
            "DWF2YWxpYWJsZV9kaXIYBSADKAUSEQoJYXBhX3NjZW5lGAYgASgFIj0KDUF2",
            "YWxpYWJsZXNsb3QSFwoPcGFya2luZ19zbG90X2lkGAEgASgFEhMKC3Bhcmtp",
            "bmdfZGlyGAIgASgNIroECghQbGFubmluZxIfCgZjdXJ2ZXMYASABKAsyDy54",
            "dmlld2VyLkN1cnZlcxIvCgt0cmFqX3BvaW50cxgCIAEoCzIaLnh2aWV3ZXIu",
            "VHJhamVjdG9yeVN0YW1wZWQSFwoPbG9ja19jYXJwb3J0X2lkGAMgASgFEg0K",
            "BXN0YXRlGAQgASgFEh0KFWhpZ2hsaWdodGVkX29iamVjdF9pZBgFIAMoAxIx",
            "Cg5iZWhhdmlvcl9kZWJ1ZxgGIAEoCzIZLnh2aWV3ZXIuQmVoYXZpb3JEZWJ1",
            "Z01zZxIpCg1wbGFubmVyX2RlYnVnGAcgASgLMhIueHZpZXdlci5TVFB1Yklu",
            "Zm8SEwoLcGlsb3Rfc3RhdGUYCCABKAUSEwoLbnVkZ2Vfc3RhdGUYCSABKAUS",
            "FQoNcGFya2luZ19wYXVzZRgKIAEoBRIUCgxwYXJraW5nX3Bvc2UYCyADKAES",
            "HwoXYXZhbGlhYmxlX3Bhcmtpbmdfc2xvdHMYDCADKAUSJQodcGFya19hdXRv",
            "X3BpbG90X3N5c3RlbV9zdGF0dXMYDSABKAUSKgoMdGltZV9jb25zdW1lGA4g",
            "ASgLMhQueHZpZXdlci5UaW1lQ29uc3VtZRImCgpkZWJ1Z19wYXRoGA8gASgL",
            "MhIueHZpZXdlci5EZWJ1Z1BhdGgSEQoJZGVidWdfa2V5GBAgASgDEjEKDmFw",
            "YV9wbGFuX3N0YXRlGBEgASgLMhkueHZpZXdlci5BcGFQbGFubmluZ1N0YXRl",
            "IkYKDENvbnRyb2xQb2ludBIJCgF4GAEgASgBEgkKAXkYAiABKAESEQoJeWF3",
            "X2FuZ2xlGAMgASgBEg0KBXNwZWVkGAQgASgBItMBCg1Db250cm9sVmlzdWFs",
            "EikKCnJlZl9wb2ludHMYASADKAsyFS54dmlld2VyLkNvbnRyb2xQb2ludBIp",
            "CgpwcnZfcG9pbnRzGAIgAygLMhUueHZpZXdlci5Db250cm9sUG9pbnQSIQoG",
            "Y3VydmVzGAMgAygLMhEueHZpZXdlci5PbmVDdXJ2ZRITCgt3aGVlbF9hbmds",
            "ZRgEIAEoARINCgVlX3BzaRgFIAEoARILCgNjdGUYBiABKAESCwoDZV92GAcg",
            "ASgBEgsKA2VfcxgIIAEoASIkCgxUcmF2ZWxTdGF0dXMSFAoMdHJhdmVsc3Rh",
            "dHVzGAEgAygFIpoBCgpDb250cm9saW5nEi4KDmNvbnRyb2xfdmlzdWFsGAEg",
            "ASgLMhYueHZpZXdlci5Db250cm9sVmlzdWFsEi0KDmNvbnRyb2xfdHJhdmVs",
            "GAIgASgLMhUueHZpZXdlci5UcmF2ZWxTdGF0dXMSLQoNY29udHJvbF9kZWJ1",
            "ZxgDIAEoCzIWLnh2aWV3ZXIuQ29udHJvbFZpc3VhbA=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Xviewer.BasicsReflection.Descriptor, global::Xviewer.BehaviorDebugReflection.Descriptor, global::Xviewer.PlannerDebugReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.OneCurve), global::Xviewer.OneCurve.Parser, new[]{ "WheelAngle", "Lenght", "Type", "ExpectedSpeed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.Curves), global::Xviewer.Curves.Parser, new[]{ "Curves_", "Travel", "ChangePath", "Dy" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.TrajectoryPoint), global::Xviewer.TrajectoryPoint.Parser, new[]{ "X", "Y", "S", "T", "Curvature", "YawAngle", "ExpectedSpeed", "ExpectedAcceleration" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.TrajectoryStamped), global::Xviewer.TrajectoryStamped.Parser, new[]{ "TrajPoints", "ScenarioDesc", "CoorSys", "ReplanningReason", "TrajState", "ExpectGear" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.PathBound), global::Xviewer.PathBound.Parser, new[]{ "PointArray", "DebugName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.TimeConsume), global::Xviewer.TimeConsume.Parser, new[]{ "DecisionDelayTime", "ChassisMsgDelayTime", "EgoVehicleLocDelayTime", "DecisionDeltaTime", "ChassisMsgDeltaTime", "EgoVehicleLocDeltaTime", "PerceptionDeltaTime", "CaptureDeltaTime", "GetStTime", "PlannningTotalTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.DebugPath), global::Xviewer.DebugPath.Parser, new[]{ "PathBounds", "PathData", "ReferencePath", "LateralPotentialVec" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.ApaPlanningState), global::Xviewer.ApaPlanningState.Parser, new[]{ "PlanState", "PlanDir", "TrajForSpotId", "AvaliableSlots", "AvaliableDir", "ApaScene" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.Avaliableslot), global::Xviewer.Avaliableslot.Parser, new[]{ "ParkingSlotId", "ParkingDir" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.Planning), global::Xviewer.Planning.Parser, new[]{ "Curves", "TrajPoints", "LockCarportId", "State", "HighlightedObjectId", "BehaviorDebug", "PlannerDebug", "PilotState", "NudgeState", "ParkingPause", "ParkingPose", "AvaliableParkingSlots", "ParkAutoPilotSystemStatus", "TimeConsume", "DebugPath", "DebugKey", "ApaPlanState" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.ControlPoint), global::Xviewer.ControlPoint.Parser, new[]{ "X", "Y", "YawAngle", "Speed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.ControlVisual), global::Xviewer.ControlVisual.Parser, new[]{ "RefPoints", "PrvPoints", "Curves", "WheelAngle", "EPsi", "Cte", "EV", "ES" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.TravelStatus), global::Xviewer.TravelStatus.Parser, new[]{ "Travelstatus" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.Controling), global::Xviewer.Controling.Parser, new[]{ "ControlVisual", "ControlTravel", "ControlDebug" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// ------------  决策规划消息结构 ----------------//
  /// </summary>
  public sealed partial class OneCurve : pb::IMessage<OneCurve> {
    private static readonly pb::MessageParser<OneCurve> _parser = new pb::MessageParser<OneCurve>(() => new OneCurve());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OneCurve> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PncReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneCurve() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneCurve(OneCurve other) : this() {
      _hasBits0 = other._hasBits0;
      wheelAngle_ = other.wheelAngle_;
      lenght_ = other.lenght_;
      type_ = other.type_;
      expectedSpeed_ = other.expectedSpeed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneCurve Clone() {
      return new OneCurve(this);
    }

    /// <summary>Field number for the "wheel_angle" field.</summary>
    public const int WheelAngleFieldNumber = 1;
    private readonly static double WheelAngleDefaultValue = 0D;

    private double wheelAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WheelAngle {
      get { if ((_hasBits0 & 1) != 0) { return wheelAngle_; } else { return WheelAngleDefaultValue; } }
      set {
        _hasBits0 |= 1;
        wheelAngle_ = value;
      }
    }
    /// <summary>Gets whether the "wheel_angle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWheelAngle {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "wheel_angle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWheelAngle() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lenght" field.</summary>
    public const int LenghtFieldNumber = 2;
    private readonly static float LenghtDefaultValue = 0F;

    private float lenght_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Lenght {
      get { if ((_hasBits0 & 2) != 0) { return lenght_; } else { return LenghtDefaultValue; } }
      set {
        _hasBits0 |= 2;
        lenght_ = value;
      }
    }
    /// <summary>Gets whether the "lenght" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLenght {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "lenght" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLenght() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private readonly static int TypeDefaultValue = 0;

    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { if ((_hasBits0 & 4) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "expected_speed" field.</summary>
    public const int ExpectedSpeedFieldNumber = 4;
    private readonly static float ExpectedSpeedDefaultValue = 0F;

    private float expectedSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ExpectedSpeed {
      get { if ((_hasBits0 & 8) != 0) { return expectedSpeed_; } else { return ExpectedSpeedDefaultValue; } }
      set {
        _hasBits0 |= 8;
        expectedSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "expected_speed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExpectedSpeed {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "expected_speed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExpectedSpeed() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OneCurve);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OneCurve other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(WheelAngle, other.WheelAngle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Lenght, other.Lenght)) return false;
      if (Type != other.Type) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExpectedSpeed, other.ExpectedSpeed)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasWheelAngle) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(WheelAngle);
      if (HasLenght) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Lenght);
      if (HasType) hash ^= Type.GetHashCode();
      if (HasExpectedSpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExpectedSpeed);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasWheelAngle) {
        output.WriteRawTag(9);
        output.WriteDouble(WheelAngle);
      }
      if (HasLenght) {
        output.WriteRawTag(21);
        output.WriteFloat(Lenght);
      }
      if (HasType) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      if (HasExpectedSpeed) {
        output.WriteRawTag(37);
        output.WriteFloat(ExpectedSpeed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasWheelAngle) {
        size += 1 + 8;
      }
      if (HasLenght) {
        size += 1 + 4;
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (HasExpectedSpeed) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OneCurve other) {
      if (other == null) {
        return;
      }
      if (other.HasWheelAngle) {
        WheelAngle = other.WheelAngle;
      }
      if (other.HasLenght) {
        Lenght = other.Lenght;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasExpectedSpeed) {
        ExpectedSpeed = other.ExpectedSpeed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            WheelAngle = input.ReadDouble();
            break;
          }
          case 21: {
            Lenght = input.ReadFloat();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
          case 37: {
            ExpectedSpeed = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Curves : pb::IMessage<Curves> {
    private static readonly pb::MessageParser<Curves> _parser = new pb::MessageParser<Curves>(() => new Curves());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Curves> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PncReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Curves() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Curves(Curves other) : this() {
      _hasBits0 = other._hasBits0;
      curves_ = other.curves_.Clone();
      travel_ = other.travel_;
      changePath_ = other.changePath_;
      dy_ = other.dy_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Curves Clone() {
      return new Curves(this);
    }

    /// <summary>Field number for the "curves" field.</summary>
    public const int Curves_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::Xviewer.OneCurve> _repeated_curves_codec
        = pb::FieldCodec.ForMessage(10, global::Xviewer.OneCurve.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.OneCurve> curves_ = new pbc::RepeatedField<global::Xviewer.OneCurve>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.OneCurve> Curves_ {
      get { return curves_; }
    }

    /// <summary>Field number for the "travel" field.</summary>
    public const int TravelFieldNumber = 2;
    private readonly static double TravelDefaultValue = 0D;

    private double travel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Travel {
      get { if ((_hasBits0 & 1) != 0) { return travel_; } else { return TravelDefaultValue; } }
      set {
        _hasBits0 |= 1;
        travel_ = value;
      }
    }
    /// <summary>Gets whether the "travel" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTravel {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "travel" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTravel() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "change_path" field.</summary>
    public const int ChangePathFieldNumber = 3;
    private readonly static bool ChangePathDefaultValue = false;

    private bool changePath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ChangePath {
      get { if ((_hasBits0 & 2) != 0) { return changePath_; } else { return ChangePathDefaultValue; } }
      set {
        _hasBits0 |= 2;
        changePath_ = value;
      }
    }
    /// <summary>Gets whether the "change_path" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChangePath {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "change_path" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChangePath() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "dy" field.</summary>
    public const int DyFieldNumber = 4;
    private readonly static float DyDefaultValue = 0F;

    private float dy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Dy {
      get { if ((_hasBits0 & 4) != 0) { return dy_; } else { return DyDefaultValue; } }
      set {
        _hasBits0 |= 4;
        dy_ = value;
      }
    }
    /// <summary>Gets whether the "dy" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDy {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "dy" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDy() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Curves);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Curves other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!curves_.Equals(other.curves_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Travel, other.Travel)) return false;
      if (ChangePath != other.ChangePath) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Dy, other.Dy)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= curves_.GetHashCode();
      if (HasTravel) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Travel);
      if (HasChangePath) hash ^= ChangePath.GetHashCode();
      if (HasDy) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Dy);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      curves_.WriteTo(output, _repeated_curves_codec);
      if (HasTravel) {
        output.WriteRawTag(17);
        output.WriteDouble(Travel);
      }
      if (HasChangePath) {
        output.WriteRawTag(24);
        output.WriteBool(ChangePath);
      }
      if (HasDy) {
        output.WriteRawTag(37);
        output.WriteFloat(Dy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += curves_.CalculateSize(_repeated_curves_codec);
      if (HasTravel) {
        size += 1 + 8;
      }
      if (HasChangePath) {
        size += 1 + 1;
      }
      if (HasDy) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Curves other) {
      if (other == null) {
        return;
      }
      curves_.Add(other.curves_);
      if (other.HasTravel) {
        Travel = other.Travel;
      }
      if (other.HasChangePath) {
        ChangePath = other.ChangePath;
      }
      if (other.HasDy) {
        Dy = other.Dy;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            curves_.AddEntriesFrom(input, _repeated_curves_codec);
            break;
          }
          case 17: {
            Travel = input.ReadDouble();
            break;
          }
          case 24: {
            ChangePath = input.ReadBool();
            break;
          }
          case 37: {
            Dy = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 轨迹点
  /// </summary>
  public sealed partial class TrajectoryPoint : pb::IMessage<TrajectoryPoint> {
    private static readonly pb::MessageParser<TrajectoryPoint> _parser = new pb::MessageParser<TrajectoryPoint>(() => new TrajectoryPoint());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrajectoryPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PncReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrajectoryPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrajectoryPoint(TrajectoryPoint other) : this() {
      _hasBits0 = other._hasBits0;
      x_ = other.x_;
      y_ = other.y_;
      s_ = other.s_;
      t_ = other.t_;
      curvature_ = other.curvature_;
      yawAngle_ = other.yawAngle_;
      expectedSpeed_ = other.expectedSpeed_;
      expectedAcceleration_ = other.expectedAcceleration_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrajectoryPoint Clone() {
      return new TrajectoryPoint(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private readonly static double XDefaultValue = 0D;

    private double x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X {
      get { if ((_hasBits0 & 1) != 0) { return x_; } else { return XDefaultValue; } }
      set {
        _hasBits0 |= 1;
        x_ = value;
      }
    }
    /// <summary>Gets whether the "x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasX {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearX() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private readonly static double YDefaultValue = 0D;

    private double y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y {
      get { if ((_hasBits0 & 2) != 0) { return y_; } else { return YDefaultValue; } }
      set {
        _hasBits0 |= 2;
        y_ = value;
      }
    }
    /// <summary>Gets whether the "y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasY {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearY() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "s" field.</summary>
    public const int SFieldNumber = 3;
    private readonly static double SDefaultValue = 0D;

    private double s_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double S {
      get { if ((_hasBits0 & 4) != 0) { return s_; } else { return SDefaultValue; } }
      set {
        _hasBits0 |= 4;
        s_ = value;
      }
    }
    /// <summary>Gets whether the "s" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasS {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "s" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearS() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "t" field.</summary>
    public const int TFieldNumber = 4;
    private readonly static double TDefaultValue = 0D;

    private double t_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double T {
      get { if ((_hasBits0 & 8) != 0) { return t_; } else { return TDefaultValue; } }
      set {
        _hasBits0 |= 8;
        t_ = value;
      }
    }
    /// <summary>Gets whether the "t" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasT {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "t" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearT() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "curvature" field.</summary>
    public const int CurvatureFieldNumber = 5;
    private readonly static double CurvatureDefaultValue = 0D;

    private double curvature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Curvature {
      get { if ((_hasBits0 & 16) != 0) { return curvature_; } else { return CurvatureDefaultValue; } }
      set {
        _hasBits0 |= 16;
        curvature_ = value;
      }
    }
    /// <summary>Gets whether the "curvature" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCurvature {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "curvature" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCurvature() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "yaw_angle" field.</summary>
    public const int YawAngleFieldNumber = 6;
    private readonly static double YawAngleDefaultValue = 0D;

    private double yawAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double YawAngle {
      get { if ((_hasBits0 & 32) != 0) { return yawAngle_; } else { return YawAngleDefaultValue; } }
      set {
        _hasBits0 |= 32;
        yawAngle_ = value;
      }
    }
    /// <summary>Gets whether the "yaw_angle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasYawAngle {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "yaw_angle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearYawAngle() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "expected_speed" field.</summary>
    public const int ExpectedSpeedFieldNumber = 7;
    private readonly static double ExpectedSpeedDefaultValue = 0D;

    private double expectedSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ExpectedSpeed {
      get { if ((_hasBits0 & 64) != 0) { return expectedSpeed_; } else { return ExpectedSpeedDefaultValue; } }
      set {
        _hasBits0 |= 64;
        expectedSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "expected_speed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExpectedSpeed {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "expected_speed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExpectedSpeed() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "expected_acceleration" field.</summary>
    public const int ExpectedAccelerationFieldNumber = 8;
    private readonly static double ExpectedAccelerationDefaultValue = 0D;

    private double expectedAcceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ExpectedAcceleration {
      get { if ((_hasBits0 & 128) != 0) { return expectedAcceleration_; } else { return ExpectedAccelerationDefaultValue; } }
      set {
        _hasBits0 |= 128;
        expectedAcceleration_ = value;
      }
    }
    /// <summary>Gets whether the "expected_acceleration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExpectedAcceleration {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "expected_acceleration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExpectedAcceleration() {
      _hasBits0 &= ~128;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrajectoryPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrajectoryPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(S, other.S)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(T, other.T)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Curvature, other.Curvature)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(YawAngle, other.YawAngle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ExpectedSpeed, other.ExpectedSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ExpectedAcceleration, other.ExpectedAcceleration)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasX) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(X);
      if (HasY) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Y);
      if (HasS) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(S);
      if (HasT) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(T);
      if (HasCurvature) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Curvature);
      if (HasYawAngle) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(YawAngle);
      if (HasExpectedSpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ExpectedSpeed);
      if (HasExpectedAcceleration) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ExpectedAcceleration);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasX) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (HasY) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
      if (HasS) {
        output.WriteRawTag(25);
        output.WriteDouble(S);
      }
      if (HasT) {
        output.WriteRawTag(33);
        output.WriteDouble(T);
      }
      if (HasCurvature) {
        output.WriteRawTag(41);
        output.WriteDouble(Curvature);
      }
      if (HasYawAngle) {
        output.WriteRawTag(49);
        output.WriteDouble(YawAngle);
      }
      if (HasExpectedSpeed) {
        output.WriteRawTag(57);
        output.WriteDouble(ExpectedSpeed);
      }
      if (HasExpectedAcceleration) {
        output.WriteRawTag(65);
        output.WriteDouble(ExpectedAcceleration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasX) {
        size += 1 + 8;
      }
      if (HasY) {
        size += 1 + 8;
      }
      if (HasS) {
        size += 1 + 8;
      }
      if (HasT) {
        size += 1 + 8;
      }
      if (HasCurvature) {
        size += 1 + 8;
      }
      if (HasYawAngle) {
        size += 1 + 8;
      }
      if (HasExpectedSpeed) {
        size += 1 + 8;
      }
      if (HasExpectedAcceleration) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrajectoryPoint other) {
      if (other == null) {
        return;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      if (other.HasS) {
        S = other.S;
      }
      if (other.HasT) {
        T = other.T;
      }
      if (other.HasCurvature) {
        Curvature = other.Curvature;
      }
      if (other.HasYawAngle) {
        YawAngle = other.YawAngle;
      }
      if (other.HasExpectedSpeed) {
        ExpectedSpeed = other.ExpectedSpeed;
      }
      if (other.HasExpectedAcceleration) {
        ExpectedAcceleration = other.ExpectedAcceleration;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
          case 25: {
            S = input.ReadDouble();
            break;
          }
          case 33: {
            T = input.ReadDouble();
            break;
          }
          case 41: {
            Curvature = input.ReadDouble();
            break;
          }
          case 49: {
            YawAngle = input.ReadDouble();
            break;
          }
          case 57: {
            ExpectedSpeed = input.ReadDouble();
            break;
          }
          case 65: {
            ExpectedAcceleration = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 轨迹标记
  /// </summary>
  public sealed partial class TrajectoryStamped : pb::IMessage<TrajectoryStamped> {
    private static readonly pb::MessageParser<TrajectoryStamped> _parser = new pb::MessageParser<TrajectoryStamped>(() => new TrajectoryStamped());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrajectoryStamped> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PncReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrajectoryStamped() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrajectoryStamped(TrajectoryStamped other) : this() {
      _hasBits0 = other._hasBits0;
      trajPoints_ = other.trajPoints_.Clone();
      scenarioDesc_ = other.scenarioDesc_;
      coorSys_ = other.coorSys_;
      replanningReason_ = other.replanningReason_;
      trajState_ = other.trajState_.Clone();
      expectGear_ = other.expectGear_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrajectoryStamped Clone() {
      return new TrajectoryStamped(this);
    }

    /// <summary>Field number for the "traj_points" field.</summary>
    public const int TrajPointsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Xviewer.TrajectoryPoint> _repeated_trajPoints_codec
        = pb::FieldCodec.ForMessage(10, global::Xviewer.TrajectoryPoint.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.TrajectoryPoint> trajPoints_ = new pbc::RepeatedField<global::Xviewer.TrajectoryPoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.TrajectoryPoint> TrajPoints {
      get { return trajPoints_; }
    }

    /// <summary>Field number for the "scenario_desc" field.</summary>
    public const int ScenarioDescFieldNumber = 2;
    private readonly static int ScenarioDescDefaultValue = 0;

    private int scenarioDesc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScenarioDesc {
      get { if ((_hasBits0 & 1) != 0) { return scenarioDesc_; } else { return ScenarioDescDefaultValue; } }
      set {
        _hasBits0 |= 1;
        scenarioDesc_ = value;
      }
    }
    /// <summary>Gets whether the "scenario_desc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScenarioDesc {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "scenario_desc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScenarioDesc() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "coor_sys" field.</summary>
    public const int CoorSysFieldNumber = 3;
    private readonly static uint CoorSysDefaultValue = 0;

    private uint coorSys_;
    /// <summary>
    /// 0:utm_coordinate_system   1:vehicle_coordinate_system
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CoorSys {
      get { if ((_hasBits0 & 2) != 0) { return coorSys_; } else { return CoorSysDefaultValue; } }
      set {
        _hasBits0 |= 2;
        coorSys_ = value;
      }
    }
    /// <summary>Gets whether the "coor_sys" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCoorSys {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "coor_sys" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCoorSys() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "replanning_reason" field.</summary>
    public const int ReplanningReasonFieldNumber = 4;
    private readonly static int ReplanningReasonDefaultValue = 0;

    private int replanningReason_;
    /// <summary>
    /// 重规划原因 0:没有重规划，1:引导点处重新规划，2:控制误差大请求重规划，3:AEB停车后请求重规划，4:感知偏差大重新规划，5:避障后重新规
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplanningReason {
      get { if ((_hasBits0 & 4) != 0) { return replanningReason_; } else { return ReplanningReasonDefaultValue; } }
      set {
        _hasBits0 |= 4;
        replanningReason_ = value;
      }
    }
    /// <summary>Gets whether the "replanning_reason" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReplanningReason {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "replanning_reason" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReplanningReason() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "traj_state" field.</summary>
    public const int TrajStateFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_trajState_codec
        = pb::FieldCodec.ForInt32(40);
    private readonly pbc::RepeatedField<int> trajState_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// traj_state[0]: 最后一段轨迹标志位，“0”表示不是最后一段轨迹，“1”表示是最后一段轨迹；    
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TrajState {
      get { return trajState_; }
    }

    /// <summary>Field number for the "expect_gear" field.</summary>
    public const int ExpectGearFieldNumber = 6;
    private readonly static int ExpectGearDefaultValue = 0;

    private int expectGear_;
    /// <summary>
    /// traj_state[1]: AEB碰撞标志位，“0”表示未触发AEB碰撞，“1”表示触发AEB碰撞；
    /// traj_state[2]: 动态障碍物避障标志位，“0”表示未触发动态障碍物避障，“1”表示触发动态障碍物避障
    /// traj_state[3]: 靠近障碍物限速标志位，“0”表示不限速，“1”表示靠近障碍物限速；
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExpectGear {
      get { if ((_hasBits0 & 8) != 0) { return expectGear_; } else { return ExpectGearDefaultValue; } }
      set {
        _hasBits0 |= 8;
        expectGear_ = value;
      }
    }
    /// <summary>Gets whether the "expect_gear" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExpectGear {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "expect_gear" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExpectGear() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrajectoryStamped);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrajectoryStamped other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!trajPoints_.Equals(other.trajPoints_)) return false;
      if (ScenarioDesc != other.ScenarioDesc) return false;
      if (CoorSys != other.CoorSys) return false;
      if (ReplanningReason != other.ReplanningReason) return false;
      if(!trajState_.Equals(other.trajState_)) return false;
      if (ExpectGear != other.ExpectGear) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= trajPoints_.GetHashCode();
      if (HasScenarioDesc) hash ^= ScenarioDesc.GetHashCode();
      if (HasCoorSys) hash ^= CoorSys.GetHashCode();
      if (HasReplanningReason) hash ^= ReplanningReason.GetHashCode();
      hash ^= trajState_.GetHashCode();
      if (HasExpectGear) hash ^= ExpectGear.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      trajPoints_.WriteTo(output, _repeated_trajPoints_codec);
      if (HasScenarioDesc) {
        output.WriteRawTag(16);
        output.WriteInt32(ScenarioDesc);
      }
      if (HasCoorSys) {
        output.WriteRawTag(24);
        output.WriteUInt32(CoorSys);
      }
      if (HasReplanningReason) {
        output.WriteRawTag(32);
        output.WriteInt32(ReplanningReason);
      }
      trajState_.WriteTo(output, _repeated_trajState_codec);
      if (HasExpectGear) {
        output.WriteRawTag(48);
        output.WriteInt32(ExpectGear);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += trajPoints_.CalculateSize(_repeated_trajPoints_codec);
      if (HasScenarioDesc) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScenarioDesc);
      }
      if (HasCoorSys) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CoorSys);
      }
      if (HasReplanningReason) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplanningReason);
      }
      size += trajState_.CalculateSize(_repeated_trajState_codec);
      if (HasExpectGear) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExpectGear);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrajectoryStamped other) {
      if (other == null) {
        return;
      }
      trajPoints_.Add(other.trajPoints_);
      if (other.HasScenarioDesc) {
        ScenarioDesc = other.ScenarioDesc;
      }
      if (other.HasCoorSys) {
        CoorSys = other.CoorSys;
      }
      if (other.HasReplanningReason) {
        ReplanningReason = other.ReplanningReason;
      }
      trajState_.Add(other.trajState_);
      if (other.HasExpectGear) {
        ExpectGear = other.ExpectGear;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            trajPoints_.AddEntriesFrom(input, _repeated_trajPoints_codec);
            break;
          }
          case 16: {
            ScenarioDesc = input.ReadInt32();
            break;
          }
          case 24: {
            CoorSys = input.ReadUInt32();
            break;
          }
          case 32: {
            ReplanningReason = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            trajState_.AddEntriesFrom(input, _repeated_trajState_codec);
            break;
          }
          case 48: {
            ExpectGear = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PathBound : pb::IMessage<PathBound> {
    private static readonly pb::MessageParser<PathBound> _parser = new pb::MessageParser<PathBound>(() => new PathBound());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PathBound> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PncReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathBound() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathBound(PathBound other) : this() {
      pointArray_ = other.pointArray_.Clone();
      debugName_ = other.debugName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathBound Clone() {
      return new PathBound(this);
    }

    /// <summary>Field number for the "point_array" field.</summary>
    public const int PointArrayFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_pointArray_codec
        = pb::FieldCodec.ForMessage(10, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> pointArray_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// 一系列3D坐标点构成一条规划边界线或规划轨迹线 用UTM坐标系表示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> PointArray {
      get { return pointArray_; }
    }

    /// <summary>Field number for the "debug_name" field.</summary>
    public const int DebugNameFieldNumber = 2;
    private readonly static string DebugNameDefaultValue = "";

    private string debugName_;
    /// <summary>
    /// 规划边界或规划轨迹具体标签
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DebugName {
      get { return debugName_ ?? DebugNameDefaultValue; }
      set {
        debugName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "debug_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDebugName {
      get { return debugName_ != null; }
    }
    /// <summary>Clears the value of the "debug_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDebugName() {
      debugName_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PathBound);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PathBound other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pointArray_.Equals(other.pointArray_)) return false;
      if (DebugName != other.DebugName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pointArray_.GetHashCode();
      if (HasDebugName) hash ^= DebugName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pointArray_.WriteTo(output, _repeated_pointArray_codec);
      if (HasDebugName) {
        output.WriteRawTag(18);
        output.WriteString(DebugName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pointArray_.CalculateSize(_repeated_pointArray_codec);
      if (HasDebugName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DebugName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PathBound other) {
      if (other == null) {
        return;
      }
      pointArray_.Add(other.pointArray_);
      if (other.HasDebugName) {
        DebugName = other.DebugName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            pointArray_.AddEntriesFrom(input, _repeated_pointArray_codec);
            break;
          }
          case 18: {
            DebugName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TimeConsume : pb::IMessage<TimeConsume> {
    private static readonly pb::MessageParser<TimeConsume> _parser = new pb::MessageParser<TimeConsume>(() => new TimeConsume());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeConsume> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PncReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeConsume() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeConsume(TimeConsume other) : this() {
      _hasBits0 = other._hasBits0;
      decisionDelayTime_ = other.decisionDelayTime_;
      chassisMsgDelayTime_ = other.chassisMsgDelayTime_;
      egoVehicleLocDelayTime_ = other.egoVehicleLocDelayTime_;
      decisionDeltaTime_ = other.decisionDeltaTime_;
      chassisMsgDeltaTime_ = other.chassisMsgDeltaTime_;
      egoVehicleLocDeltaTime_ = other.egoVehicleLocDeltaTime_;
      perceptionDeltaTime_ = other.perceptionDeltaTime_;
      captureDeltaTime_ = other.captureDeltaTime_;
      getStTime_ = other.getStTime_;
      plannningTotalTime_ = other.plannningTotalTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeConsume Clone() {
      return new TimeConsume(this);
    }

    /// <summary>Field number for the "decision_delay_time" field.</summary>
    public const int DecisionDelayTimeFieldNumber = 1;
    private readonly static float DecisionDelayTimeDefaultValue = 0F;

    private float decisionDelayTime_;
    /// <summary>
    /// ############# 模块间通讯时间延迟 #############
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DecisionDelayTime {
      get { if ((_hasBits0 & 1) != 0) { return decisionDelayTime_; } else { return DecisionDelayTimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        decisionDelayTime_ = value;
      }
    }
    /// <summary>Gets whether the "decision_delay_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDecisionDelayTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "decision_delay_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDecisionDelayTime() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "chassis_msg_delay_time" field.</summary>
    public const int ChassisMsgDelayTimeFieldNumber = 2;
    private readonly static float ChassisMsgDelayTimeDefaultValue = 0F;

    private float chassisMsgDelayTime_;
    /// <summary>
    /// 车辆状态到规划通讯时延  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ChassisMsgDelayTime {
      get { if ((_hasBits0 & 2) != 0) { return chassisMsgDelayTime_; } else { return ChassisMsgDelayTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        chassisMsgDelayTime_ = value;
      }
    }
    /// <summary>Gets whether the "chassis_msg_delay_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChassisMsgDelayTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "chassis_msg_delay_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChassisMsgDelayTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "ego_vehicle_loc_delay_time" field.</summary>
    public const int EgoVehicleLocDelayTimeFieldNumber = 3;
    private readonly static float EgoVehicleLocDelayTimeDefaultValue = 0F;

    private float egoVehicleLocDelayTime_;
    /// <summary>
    /// 定位到规划通讯时延
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EgoVehicleLocDelayTime {
      get { if ((_hasBits0 & 4) != 0) { return egoVehicleLocDelayTime_; } else { return EgoVehicleLocDelayTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        egoVehicleLocDelayTime_ = value;
      }
    }
    /// <summary>Gets whether the "ego_vehicle_loc_delay_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEgoVehicleLocDelayTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "ego_vehicle_loc_delay_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEgoVehicleLocDelayTime() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "decision_delta_time" field.</summary>
    public const int DecisionDeltaTimeFieldNumber = 4;
    private readonly static float DecisionDeltaTimeDefaultValue = 0F;

    private float decisionDeltaTime_;
    /// <summary>
    /// ############# 模块内部耗时（含通讯时延）#############
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DecisionDeltaTime {
      get { if ((_hasBits0 & 8) != 0) { return decisionDeltaTime_; } else { return DecisionDeltaTimeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        decisionDeltaTime_ = value;
      }
    }
    /// <summary>Gets whether the "decision_delta_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDecisionDeltaTime {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "decision_delta_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDecisionDeltaTime() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "chassis_msg_delta_time" field.</summary>
    public const int ChassisMsgDeltaTimeFieldNumber = 5;
    private readonly static float ChassisMsgDeltaTimeDefaultValue = 0F;

    private float chassisMsgDeltaTime_;
    /// <summary>
    /// 车辆状态内部耗时（含通讯时延）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ChassisMsgDeltaTime {
      get { if ((_hasBits0 & 16) != 0) { return chassisMsgDeltaTime_; } else { return ChassisMsgDeltaTimeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        chassisMsgDeltaTime_ = value;
      }
    }
    /// <summary>Gets whether the "chassis_msg_delta_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChassisMsgDeltaTime {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "chassis_msg_delta_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChassisMsgDeltaTime() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "ego_vehicle_loc_delta_time" field.</summary>
    public const int EgoVehicleLocDeltaTimeFieldNumber = 6;
    private readonly static float EgoVehicleLocDeltaTimeDefaultValue = 0F;

    private float egoVehicleLocDeltaTime_;
    /// <summary>
    /// 定位内部耗时（含通讯时延）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EgoVehicleLocDeltaTime {
      get { if ((_hasBits0 & 32) != 0) { return egoVehicleLocDeltaTime_; } else { return EgoVehicleLocDeltaTimeDefaultValue; } }
      set {
        _hasBits0 |= 32;
        egoVehicleLocDeltaTime_ = value;
      }
    }
    /// <summary>Gets whether the "ego_vehicle_loc_delta_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEgoVehicleLocDeltaTime {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "ego_vehicle_loc_delta_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEgoVehicleLocDeltaTime() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "perception_delta_time" field.</summary>
    public const int PerceptionDeltaTimeFieldNumber = 7;
    private readonly static float PerceptionDeltaTimeDefaultValue = 0F;

    private float perceptionDeltaTime_;
    /// <summary>
    /// 感知内部耗时（含通讯时延）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PerceptionDeltaTime {
      get { if ((_hasBits0 & 64) != 0) { return perceptionDeltaTime_; } else { return PerceptionDeltaTimeDefaultValue; } }
      set {
        _hasBits0 |= 64;
        perceptionDeltaTime_ = value;
      }
    }
    /// <summary>Gets whether the "perception_delta_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPerceptionDeltaTime {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "perception_delta_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPerceptionDeltaTime() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "capture_delta_time" field.</summary>
    public const int CaptureDeltaTimeFieldNumber = 8;
    private readonly static float CaptureDeltaTimeDefaultValue = 0F;

    private float captureDeltaTime_;
    /// <summary>
    /// ############# 其他耗时 #############
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CaptureDeltaTime {
      get { if ((_hasBits0 & 128) != 0) { return captureDeltaTime_; } else { return CaptureDeltaTimeDefaultValue; } }
      set {
        _hasBits0 |= 128;
        captureDeltaTime_ = value;
      }
    }
    /// <summary>Gets whether the "capture_delta_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCaptureDeltaTime {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "capture_delta_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCaptureDeltaTime() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "get_st_time" field.</summary>
    public const int GetStTimeFieldNumber = 9;
    private readonly static float GetStTimeDefaultValue = 0F;

    private float getStTime_;
    /// <summary>
    /// 计算ST边界总时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GetStTime {
      get { if ((_hasBits0 & 256) != 0) { return getStTime_; } else { return GetStTimeDefaultValue; } }
      set {
        _hasBits0 |= 256;
        getStTime_ = value;
      }
    }
    /// <summary>Gets whether the "get_st_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGetStTime {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "get_st_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGetStTime() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "plannning_total_time" field.</summary>
    public const int PlannningTotalTimeFieldNumber = 10;
    private readonly static float PlannningTotalTimeDefaultValue = 0F;

    private float plannningTotalTime_;
    /// <summary>
    /// 规划内部耗时
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PlannningTotalTime {
      get { if ((_hasBits0 & 512) != 0) { return plannningTotalTime_; } else { return PlannningTotalTimeDefaultValue; } }
      set {
        _hasBits0 |= 512;
        plannningTotalTime_ = value;
      }
    }
    /// <summary>Gets whether the "plannning_total_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlannningTotalTime {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "plannning_total_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlannningTotalTime() {
      _hasBits0 &= ~512;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeConsume);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeConsume other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DecisionDelayTime, other.DecisionDelayTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChassisMsgDelayTime, other.ChassisMsgDelayTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EgoVehicleLocDelayTime, other.EgoVehicleLocDelayTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DecisionDeltaTime, other.DecisionDeltaTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChassisMsgDeltaTime, other.ChassisMsgDeltaTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EgoVehicleLocDeltaTime, other.EgoVehicleLocDeltaTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PerceptionDeltaTime, other.PerceptionDeltaTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CaptureDeltaTime, other.CaptureDeltaTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GetStTime, other.GetStTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PlannningTotalTime, other.PlannningTotalTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDecisionDelayTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DecisionDelayTime);
      if (HasChassisMsgDelayTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChassisMsgDelayTime);
      if (HasEgoVehicleLocDelayTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EgoVehicleLocDelayTime);
      if (HasDecisionDeltaTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DecisionDeltaTime);
      if (HasChassisMsgDeltaTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChassisMsgDeltaTime);
      if (HasEgoVehicleLocDeltaTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EgoVehicleLocDeltaTime);
      if (HasPerceptionDeltaTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PerceptionDeltaTime);
      if (HasCaptureDeltaTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CaptureDeltaTime);
      if (HasGetStTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GetStTime);
      if (HasPlannningTotalTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PlannningTotalTime);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasDecisionDelayTime) {
        output.WriteRawTag(13);
        output.WriteFloat(DecisionDelayTime);
      }
      if (HasChassisMsgDelayTime) {
        output.WriteRawTag(21);
        output.WriteFloat(ChassisMsgDelayTime);
      }
      if (HasEgoVehicleLocDelayTime) {
        output.WriteRawTag(29);
        output.WriteFloat(EgoVehicleLocDelayTime);
      }
      if (HasDecisionDeltaTime) {
        output.WriteRawTag(37);
        output.WriteFloat(DecisionDeltaTime);
      }
      if (HasChassisMsgDeltaTime) {
        output.WriteRawTag(45);
        output.WriteFloat(ChassisMsgDeltaTime);
      }
      if (HasEgoVehicleLocDeltaTime) {
        output.WriteRawTag(53);
        output.WriteFloat(EgoVehicleLocDeltaTime);
      }
      if (HasPerceptionDeltaTime) {
        output.WriteRawTag(61);
        output.WriteFloat(PerceptionDeltaTime);
      }
      if (HasCaptureDeltaTime) {
        output.WriteRawTag(69);
        output.WriteFloat(CaptureDeltaTime);
      }
      if (HasGetStTime) {
        output.WriteRawTag(77);
        output.WriteFloat(GetStTime);
      }
      if (HasPlannningTotalTime) {
        output.WriteRawTag(85);
        output.WriteFloat(PlannningTotalTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasDecisionDelayTime) {
        size += 1 + 4;
      }
      if (HasChassisMsgDelayTime) {
        size += 1 + 4;
      }
      if (HasEgoVehicleLocDelayTime) {
        size += 1 + 4;
      }
      if (HasDecisionDeltaTime) {
        size += 1 + 4;
      }
      if (HasChassisMsgDeltaTime) {
        size += 1 + 4;
      }
      if (HasEgoVehicleLocDeltaTime) {
        size += 1 + 4;
      }
      if (HasPerceptionDeltaTime) {
        size += 1 + 4;
      }
      if (HasCaptureDeltaTime) {
        size += 1 + 4;
      }
      if (HasGetStTime) {
        size += 1 + 4;
      }
      if (HasPlannningTotalTime) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeConsume other) {
      if (other == null) {
        return;
      }
      if (other.HasDecisionDelayTime) {
        DecisionDelayTime = other.DecisionDelayTime;
      }
      if (other.HasChassisMsgDelayTime) {
        ChassisMsgDelayTime = other.ChassisMsgDelayTime;
      }
      if (other.HasEgoVehicleLocDelayTime) {
        EgoVehicleLocDelayTime = other.EgoVehicleLocDelayTime;
      }
      if (other.HasDecisionDeltaTime) {
        DecisionDeltaTime = other.DecisionDeltaTime;
      }
      if (other.HasChassisMsgDeltaTime) {
        ChassisMsgDeltaTime = other.ChassisMsgDeltaTime;
      }
      if (other.HasEgoVehicleLocDeltaTime) {
        EgoVehicleLocDeltaTime = other.EgoVehicleLocDeltaTime;
      }
      if (other.HasPerceptionDeltaTime) {
        PerceptionDeltaTime = other.PerceptionDeltaTime;
      }
      if (other.HasCaptureDeltaTime) {
        CaptureDeltaTime = other.CaptureDeltaTime;
      }
      if (other.HasGetStTime) {
        GetStTime = other.GetStTime;
      }
      if (other.HasPlannningTotalTime) {
        PlannningTotalTime = other.PlannningTotalTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            DecisionDelayTime = input.ReadFloat();
            break;
          }
          case 21: {
            ChassisMsgDelayTime = input.ReadFloat();
            break;
          }
          case 29: {
            EgoVehicleLocDelayTime = input.ReadFloat();
            break;
          }
          case 37: {
            DecisionDeltaTime = input.ReadFloat();
            break;
          }
          case 45: {
            ChassisMsgDeltaTime = input.ReadFloat();
            break;
          }
          case 53: {
            EgoVehicleLocDeltaTime = input.ReadFloat();
            break;
          }
          case 61: {
            PerceptionDeltaTime = input.ReadFloat();
            break;
          }
          case 69: {
            CaptureDeltaTime = input.ReadFloat();
            break;
          }
          case 77: {
            GetStTime = input.ReadFloat();
            break;
          }
          case 85: {
            PlannningTotalTime = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DebugPath : pb::IMessage<DebugPath> {
    private static readonly pb::MessageParser<DebugPath> _parser = new pb::MessageParser<DebugPath>(() => new DebugPath());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DebugPath> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PncReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugPath() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugPath(DebugPath other) : this() {
      pathBounds_ = other.pathBounds_.Clone();
      pathData_ = other.pathData_ != null ? other.pathData_.Clone() : null;
      referencePath_ = other.referencePath_ != null ? other.referencePath_.Clone() : null;
      lateralPotentialVec_ = other.lateralPotentialVec_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugPath Clone() {
      return new DebugPath(this);
    }

    /// <summary>Field number for the "path_bounds" field.</summary>
    public const int PathBoundsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Xviewer.PathBound> _repeated_pathBounds_codec
        = pb::FieldCodec.ForMessage(10, global::Xviewer.PathBound.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.PathBound> pathBounds_ = new pbc::RepeatedField<global::Xviewer.PathBound>();
    /// <summary>
    /// 多条规划边界线和规划轨迹线
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.PathBound> PathBounds {
      get { return pathBounds_; }
    }

    /// <summary>Field number for the "path_data" field.</summary>
    public const int PathDataFieldNumber = 2;
    private global::Xviewer.PathBound pathData_;
    /// <summary>
    /// 路径规划，2023-12-4新增
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.PathBound PathData {
      get { return pathData_; }
      set {
        pathData_ = value;
      }
    }

    /// <summary>Field number for the "reference_path" field.</summary>
    public const int ReferencePathFieldNumber = 3;
    private global::Xviewer.PathBound referencePath_;
    /// <summary>
    /// 参考路径，2023-12-4新增
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.PathBound ReferencePath {
      get { return referencePath_; }
      set {
        referencePath_ = value;
      }
    }

    /// <summary>Field number for the "lateral_potential_vec" field.</summary>
    public const int LateralPotentialVecFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_lateralPotentialVec_codec
        = pb::FieldCodec.ForMessage(34, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> lateralPotentialVec_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// 横向势场, 2024-4-16新增
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> LateralPotentialVec {
      get { return lateralPotentialVec_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DebugPath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DebugPath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pathBounds_.Equals(other.pathBounds_)) return false;
      if (!object.Equals(PathData, other.PathData)) return false;
      if (!object.Equals(ReferencePath, other.ReferencePath)) return false;
      if(!lateralPotentialVec_.Equals(other.lateralPotentialVec_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pathBounds_.GetHashCode();
      if (pathData_ != null) hash ^= PathData.GetHashCode();
      if (referencePath_ != null) hash ^= ReferencePath.GetHashCode();
      hash ^= lateralPotentialVec_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pathBounds_.WriteTo(output, _repeated_pathBounds_codec);
      if (pathData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PathData);
      }
      if (referencePath_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ReferencePath);
      }
      lateralPotentialVec_.WriteTo(output, _repeated_lateralPotentialVec_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pathBounds_.CalculateSize(_repeated_pathBounds_codec);
      if (pathData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PathData);
      }
      if (referencePath_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReferencePath);
      }
      size += lateralPotentialVec_.CalculateSize(_repeated_lateralPotentialVec_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DebugPath other) {
      if (other == null) {
        return;
      }
      pathBounds_.Add(other.pathBounds_);
      if (other.pathData_ != null) {
        if (pathData_ == null) {
          PathData = new global::Xviewer.PathBound();
        }
        PathData.MergeFrom(other.PathData);
      }
      if (other.referencePath_ != null) {
        if (referencePath_ == null) {
          ReferencePath = new global::Xviewer.PathBound();
        }
        ReferencePath.MergeFrom(other.ReferencePath);
      }
      lateralPotentialVec_.Add(other.lateralPotentialVec_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            pathBounds_.AddEntriesFrom(input, _repeated_pathBounds_codec);
            break;
          }
          case 18: {
            if (pathData_ == null) {
              PathData = new global::Xviewer.PathBound();
            }
            input.ReadMessage(PathData);
            break;
          }
          case 26: {
            if (referencePath_ == null) {
              ReferencePath = new global::Xviewer.PathBound();
            }
            input.ReadMessage(ReferencePath);
            break;
          }
          case 34: {
            lateralPotentialVec_.AddEntriesFrom(input, _repeated_lateralPotentialVec_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApaPlanningState : pb::IMessage<ApaPlanningState> {
    private static readonly pb::MessageParser<ApaPlanningState> _parser = new pb::MessageParser<ApaPlanningState>(() => new ApaPlanningState());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApaPlanningState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PncReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApaPlanningState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApaPlanningState(ApaPlanningState other) : this() {
      _hasBits0 = other._hasBits0;
      planState_ = other.planState_;
      planDir_ = other.planDir_;
      trajForSpotId_ = other.trajForSpotId_;
      avaliableSlots_ = other.avaliableSlots_.Clone();
      avaliableDir_ = other.avaliableDir_.Clone();
      apaScene_ = other.apaScene_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApaPlanningState Clone() {
      return new ApaPlanningState(this);
    }

    /// <summary>Field number for the "plan_state" field.</summary>
    public const int PlanStateFieldNumber = 1;
    private readonly static int PlanStateDefaultValue = 0;

    private int planState_;
    /// <summary>
    /// 规划状态，0:初始化，1:规划中，2:规划成功，3:规划失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlanState {
      get { if ((_hasBits0 & 1) != 0) { return planState_; } else { return PlanStateDefaultValue; } }
      set {
        _hasBits0 |= 1;
        planState_ = value;
      }
    }
    /// <summary>Gets whether the "plan_state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlanState {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "plan_state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlanState() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "plan_dir" field.</summary>
    public const int PlanDirFieldNumber = 2;
    private readonly static uint PlanDirDefaultValue = 0;

    private uint planDir_;
    /// <summary>
    /// 泊车规划方向，0:初始化，1:车尾泊入，2:车头泊入，3:车头泊出，4:车尾泊出
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlanDir {
      get { if ((_hasBits0 & 2) != 0) { return planDir_; } else { return PlanDirDefaultValue; } }
      set {
        _hasBits0 |= 2;
        planDir_ = value;
      }
    }
    /// <summary>Gets whether the "plan_dir" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlanDir {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "plan_dir" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlanDir() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "traj_for_spot_id" field.</summary>
    public const int TrajForSpotIdFieldNumber = 3;
    private readonly static int TrajForSpotIdDefaultValue = 0;

    private int trajForSpotId_;
    /// <summary>
    /// 当前规划的轨迹对应的车位id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TrajForSpotId {
      get { if ((_hasBits0 & 4) != 0) { return trajForSpotId_; } else { return TrajForSpotIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        trajForSpotId_ = value;
      }
    }
    /// <summary>Gets whether the "traj_for_spot_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTrajForSpotId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "traj_for_spot_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTrajForSpotId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "avaliable_slots" field.</summary>
    public const int AvaliableSlotsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Xviewer.Avaliableslot> _repeated_avaliableSlots_codec
        = pb::FieldCodec.ForMessage(34, global::Xviewer.Avaliableslot.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Avaliableslot> avaliableSlots_ = new pbc::RepeatedField<global::Xviewer.Avaliableslot>();
    /// <summary>
    /// 可泊入车位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Avaliableslot> AvaliableSlots {
      get { return avaliableSlots_; }
    }

    /// <summary>Field number for the "avaliable_dir" field.</summary>
    public const int AvaliableDirFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_avaliableDir_codec
        = pb::FieldCodec.ForInt32(40);
    private readonly pbc::RepeatedField<int> avaliableDir_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 泊出：“0”表示不可泊，“1”表示可泊
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AvaliableDir {
      get { return avaliableDir_; }
    }

    /// <summary>Field number for the "apa_scene" field.</summary>
    public const int ApaSceneFieldNumber = 6;
    private readonly static int ApaSceneDefaultValue = 0;

    private int apaScene_;
    /// <summary>
    /// APA场景描述，0:默认值，1:泊入，2:车头泊出，3:车尾泊出
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApaScene {
      get { if ((_hasBits0 & 8) != 0) { return apaScene_; } else { return ApaSceneDefaultValue; } }
      set {
        _hasBits0 |= 8;
        apaScene_ = value;
      }
    }
    /// <summary>Gets whether the "apa_scene" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasApaScene {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "apa_scene" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearApaScene() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApaPlanningState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApaPlanningState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlanState != other.PlanState) return false;
      if (PlanDir != other.PlanDir) return false;
      if (TrajForSpotId != other.TrajForSpotId) return false;
      if(!avaliableSlots_.Equals(other.avaliableSlots_)) return false;
      if(!avaliableDir_.Equals(other.avaliableDir_)) return false;
      if (ApaScene != other.ApaScene) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPlanState) hash ^= PlanState.GetHashCode();
      if (HasPlanDir) hash ^= PlanDir.GetHashCode();
      if (HasTrajForSpotId) hash ^= TrajForSpotId.GetHashCode();
      hash ^= avaliableSlots_.GetHashCode();
      hash ^= avaliableDir_.GetHashCode();
      if (HasApaScene) hash ^= ApaScene.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasPlanState) {
        output.WriteRawTag(8);
        output.WriteInt32(PlanState);
      }
      if (HasPlanDir) {
        output.WriteRawTag(16);
        output.WriteUInt32(PlanDir);
      }
      if (HasTrajForSpotId) {
        output.WriteRawTag(24);
        output.WriteInt32(TrajForSpotId);
      }
      avaliableSlots_.WriteTo(output, _repeated_avaliableSlots_codec);
      avaliableDir_.WriteTo(output, _repeated_avaliableDir_codec);
      if (HasApaScene) {
        output.WriteRawTag(48);
        output.WriteInt32(ApaScene);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPlanState) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlanState);
      }
      if (HasPlanDir) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlanDir);
      }
      if (HasTrajForSpotId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrajForSpotId);
      }
      size += avaliableSlots_.CalculateSize(_repeated_avaliableSlots_codec);
      size += avaliableDir_.CalculateSize(_repeated_avaliableDir_codec);
      if (HasApaScene) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApaScene);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApaPlanningState other) {
      if (other == null) {
        return;
      }
      if (other.HasPlanState) {
        PlanState = other.PlanState;
      }
      if (other.HasPlanDir) {
        PlanDir = other.PlanDir;
      }
      if (other.HasTrajForSpotId) {
        TrajForSpotId = other.TrajForSpotId;
      }
      avaliableSlots_.Add(other.avaliableSlots_);
      avaliableDir_.Add(other.avaliableDir_);
      if (other.HasApaScene) {
        ApaScene = other.ApaScene;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlanState = input.ReadInt32();
            break;
          }
          case 16: {
            PlanDir = input.ReadUInt32();
            break;
          }
          case 24: {
            TrajForSpotId = input.ReadInt32();
            break;
          }
          case 34: {
            avaliableSlots_.AddEntriesFrom(input, _repeated_avaliableSlots_codec);
            break;
          }
          case 42:
          case 40: {
            avaliableDir_.AddEntriesFrom(input, _repeated_avaliableDir_codec);
            break;
          }
          case 48: {
            ApaScene = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Avaliableslot : pb::IMessage<Avaliableslot> {
    private static readonly pb::MessageParser<Avaliableslot> _parser = new pb::MessageParser<Avaliableslot>(() => new Avaliableslot());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Avaliableslot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PncReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Avaliableslot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Avaliableslot(Avaliableslot other) : this() {
      _hasBits0 = other._hasBits0;
      parkingSlotId_ = other.parkingSlotId_;
      parkingDir_ = other.parkingDir_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Avaliableslot Clone() {
      return new Avaliableslot(this);
    }

    /// <summary>Field number for the "parking_slot_id" field.</summary>
    public const int ParkingSlotIdFieldNumber = 1;
    private readonly static int ParkingSlotIdDefaultValue = 0;

    private int parkingSlotId_;
    /// <summary>
    /// 可泊入车位的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ParkingSlotId {
      get { if ((_hasBits0 & 1) != 0) { return parkingSlotId_; } else { return ParkingSlotIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        parkingSlotId_ = value;
      }
    }
    /// <summary>Gets whether the "parking_slot_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasParkingSlotId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "parking_slot_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearParkingSlotId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "parking_dir" field.</summary>
    public const int ParkingDirFieldNumber = 2;
    private readonly static uint ParkingDirDefaultValue = 0;

    private uint parkingDir_;
    /// <summary>
    /// 可泊车位泊入方向，0:车头车尾均不可泊入，1:只车尾可泊入，2:只车头可泊入，3:车尾和车头均可泊入
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ParkingDir {
      get { if ((_hasBits0 & 2) != 0) { return parkingDir_; } else { return ParkingDirDefaultValue; } }
      set {
        _hasBits0 |= 2;
        parkingDir_ = value;
      }
    }
    /// <summary>Gets whether the "parking_dir" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasParkingDir {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "parking_dir" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearParkingDir() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Avaliableslot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Avaliableslot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ParkingSlotId != other.ParkingSlotId) return false;
      if (ParkingDir != other.ParkingDir) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasParkingSlotId) hash ^= ParkingSlotId.GetHashCode();
      if (HasParkingDir) hash ^= ParkingDir.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasParkingSlotId) {
        output.WriteRawTag(8);
        output.WriteInt32(ParkingSlotId);
      }
      if (HasParkingDir) {
        output.WriteRawTag(16);
        output.WriteUInt32(ParkingDir);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasParkingSlotId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParkingSlotId);
      }
      if (HasParkingDir) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ParkingDir);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Avaliableslot other) {
      if (other == null) {
        return;
      }
      if (other.HasParkingSlotId) {
        ParkingSlotId = other.ParkingSlotId;
      }
      if (other.HasParkingDir) {
        ParkingDir = other.ParkingDir;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ParkingSlotId = input.ReadInt32();
            break;
          }
          case 16: {
            ParkingDir = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Planning : pb::IMessage<Planning> {
    private static readonly pb::MessageParser<Planning> _parser = new pb::MessageParser<Planning>(() => new Planning());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Planning> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PncReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Planning() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Planning(Planning other) : this() {
      _hasBits0 = other._hasBits0;
      curves_ = other.curves_ != null ? other.curves_.Clone() : null;
      trajPoints_ = other.trajPoints_ != null ? other.trajPoints_.Clone() : null;
      lockCarportId_ = other.lockCarportId_;
      state_ = other.state_;
      highlightedObjectId_ = other.highlightedObjectId_.Clone();
      behaviorDebug_ = other.behaviorDebug_ != null ? other.behaviorDebug_.Clone() : null;
      plannerDebug_ = other.plannerDebug_ != null ? other.plannerDebug_.Clone() : null;
      pilotState_ = other.pilotState_;
      nudgeState_ = other.nudgeState_;
      parkingPause_ = other.parkingPause_;
      parkingPose_ = other.parkingPose_.Clone();
      avaliableParkingSlots_ = other.avaliableParkingSlots_.Clone();
      parkAutoPilotSystemStatus_ = other.parkAutoPilotSystemStatus_;
      timeConsume_ = other.timeConsume_ != null ? other.timeConsume_.Clone() : null;
      debugPath_ = other.debugPath_ != null ? other.debugPath_.Clone() : null;
      debugKey_ = other.debugKey_;
      apaPlanState_ = other.apaPlanState_ != null ? other.apaPlanState_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Planning Clone() {
      return new Planning(this);
    }

    /// <summary>Field number for the "curves" field.</summary>
    public const int CurvesFieldNumber = 1;
    private global::Xviewer.Curves curves_;
    /// <summary>
    /// 规划曲率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Curves Curves {
      get { return curves_; }
      set {
        curves_ = value;
      }
    }

    /// <summary>Field number for the "traj_points" field.</summary>
    public const int TrajPointsFieldNumber = 2;
    private global::Xviewer.TrajectoryStamped trajPoints_;
    /// <summary>
    /// 规划路径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.TrajectoryStamped TrajPoints {
      get { return trajPoints_; }
      set {
        trajPoints_ = value;
      }
    }

    /// <summary>Field number for the "lock_carport_id" field.</summary>
    public const int LockCarportIdFieldNumber = 3;
    private readonly static int LockCarportIdDefaultValue = 0;

    private int lockCarportId_;
    /// <summary>
    /// 决策规划锁定车位id号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LockCarportId {
      get { if ((_hasBits0 & 1) != 0) { return lockCarportId_; } else { return LockCarportIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        lockCarportId_ = value;
      }
    }
    /// <summary>Gets whether the "lock_carport_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLockCarportId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "lock_carport_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLockCarportId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 4;
    private readonly static int StateDefaultValue = 0;

    private int state_;
    /// <summary>
    /// 泊车状态  0 初始化， 1 可泊车位搜索，2 锁定车位ID，3 泊车进行，4 泊车成功，5 泊车失败，6 人工接管
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { if ((_hasBits0 & 2) != 0) { return state_; } else { return StateDefaultValue; } }
      set {
        _hasBits0 |= 2;
        state_ = value;
      }
    }
    /// <summary>Gets whether the "state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasState {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearState() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "highlighted_object_id" field.</summary>
    public const int HighlightedObjectIdFieldNumber = 5;
    private static readonly pb::FieldCodec<long> _repeated_highlightedObjectId_codec
        = pb::FieldCodec.ForInt64(40);
    private readonly pbc::RepeatedField<long> highlightedObjectId_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// 高亮显示目标物体id [0]是ego车道正前方物体id,［1］是target车道正前方物体id, 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> HighlightedObjectId {
      get { return highlightedObjectId_; }
    }

    /// <summary>Field number for the "behavior_debug" field.</summary>
    public const int BehaviorDebugFieldNumber = 6;
    private global::Xviewer.BehaviorDebugMsg behaviorDebug_;
    /// <summary>
    ///［2]是target车道正后方物体id, id值为-1则说明前方或者后方没有物体
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.BehaviorDebugMsg BehaviorDebug {
      get { return behaviorDebug_; }
      set {
        behaviorDebug_ = value;
      }
    }

    /// <summary>Field number for the "planner_debug" field.</summary>
    public const int PlannerDebugFieldNumber = 7;
    private global::Xviewer.STPubInfo plannerDebug_;
    /// <summary>
    /// 规划 debug
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.STPubInfo PlannerDebug {
      get { return plannerDebug_; }
      set {
        plannerDebug_ = value;
      }
    }

    /// <summary>Field number for the "pilot_state" field.</summary>
    public const int PilotStateFieldNumber = 8;
    private readonly static int PilotStateDefaultValue = 0;

    private int pilotState_;
    /// <summary>
    /// 行车状态， 0 未激活， 1 激活中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PilotState {
      get { if ((_hasBits0 & 4) != 0) { return pilotState_; } else { return PilotStateDefaultValue; } }
      set {
        _hasBits0 |= 4;
        pilotState_ = value;
      }
    }
    /// <summary>Gets whether the "pilot_state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPilotState {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "pilot_state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPilotState() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "nudge_state" field.</summary>
    public const int NudgeStateFieldNumber = 9;
    private readonly static int NudgeStateDefaultValue = 0;

    private int nudgeState_;
    /// <summary>
    /// 避障标志位 0 未激活，1 避障中， 2 避障成功， 3 避障取消， 4 避障接管
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NudgeState {
      get { if ((_hasBits0 & 8) != 0) { return nudgeState_; } else { return NudgeStateDefaultValue; } }
      set {
        _hasBits0 |= 8;
        nudgeState_ = value;
      }
    }
    /// <summary>Gets whether the "nudge_state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNudgeState {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "nudge_state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNudgeState() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "parking_pause" field.</summary>
    public const int ParkingPauseFieldNumber = 10;
    private readonly static int ParkingPauseDefaultValue = 0;

    private int parkingPause_;
    /// <summary>
    /// 障碍物导致泊车暂停, 0 没有动态障碍物入侵，1 动态障碍物导致泊车暂停
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ParkingPause {
      get { if ((_hasBits0 & 16) != 0) { return parkingPause_; } else { return ParkingPauseDefaultValue; } }
      set {
        _hasBits0 |= 16;
        parkingPause_ = value;
      }
    }
    /// <summary>Gets whether the "parking_pause" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasParkingPause {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "parking_pause" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearParkingPause() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "parking_pose" field.</summary>
    public const int ParkingPoseFieldNumber = 11;
    private static readonly pb::FieldCodec<double> _repeated_parkingPose_codec
        = pb::FieldCodec.ForDouble(89);
    private readonly pbc::RepeatedField<double> parkingPose_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// 泊车成功后, 车辆与感知车位的相对位姿关系
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> ParkingPose {
      get { return parkingPose_; }
    }

    /// <summary>Field number for the "avaliable_parking_slots" field.</summary>
    public const int AvaliableParkingSlotsFieldNumber = 12;
    private static readonly pb::FieldCodec<int> _repeated_avaliableParkingSlots_codec
        = pb::FieldCodec.ForInt32(96);
    private readonly pbc::RepeatedField<int> avaliableParkingSlots_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 决策规划可泊车位 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AvaliableParkingSlots {
      get { return avaliableParkingSlots_; }
    }

    /// <summary>Field number for the "park_auto_pilot_system_status" field.</summary>
    public const int ParkAutoPilotSystemStatusFieldNumber = 13;
    private readonly static int ParkAutoPilotSystemStatusDefaultValue = 0;

    private int parkAutoPilotSystemStatus_;
    /// <summary>
    /// dnp 行泊状态 0 默认状态, 1-3 行车, 4-6 泊车
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ParkAutoPilotSystemStatus {
      get { if ((_hasBits0 & 32) != 0) { return parkAutoPilotSystemStatus_; } else { return ParkAutoPilotSystemStatusDefaultValue; } }
      set {
        _hasBits0 |= 32;
        parkAutoPilotSystemStatus_ = value;
      }
    }
    /// <summary>Gets whether the "park_auto_pilot_system_status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasParkAutoPilotSystemStatus {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "park_auto_pilot_system_status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearParkAutoPilotSystemStatus() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "time_consume" field.</summary>
    public const int TimeConsumeFieldNumber = 14;
    private global::Xviewer.TimeConsume timeConsume_;
    /// <summary>
    /// 耗时
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.TimeConsume TimeConsume {
      get { return timeConsume_; }
      set {
        timeConsume_ = value;
      }
    }

    /// <summary>Field number for the "debug_path" field.</summary>
    public const int DebugPathFieldNumber = 15;
    private global::Xviewer.DebugPath debugPath_;
    /// <summary>
    /// 路径调试相关信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.DebugPath DebugPath {
      get { return debugPath_; }
      set {
        debugPath_ = value;
      }
    }

    /// <summary>Field number for the "debug_key" field.</summary>
    public const int DebugKeyFieldNumber = 16;
    private readonly static long DebugKeyDefaultValue = 0L;

    private long debugKey_;
    /// <summary>
    /// 默认值为MP debug msg = 0001，path_bounds打开 0010， bounds算法边界打开 0100，2023-12-4新增
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DebugKey {
      get { if ((_hasBits0 & 64) != 0) { return debugKey_; } else { return DebugKeyDefaultValue; } }
      set {
        _hasBits0 |= 64;
        debugKey_ = value;
      }
    }
    /// <summary>Gets whether the "debug_key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDebugKey {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "debug_key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDebugKey() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "apa_plan_state" field.</summary>
    public const int ApaPlanStateFieldNumber = 17;
    private global::Xviewer.ApaPlanningState apaPlanState_;
    /// <summary>
    /// APA规划状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.ApaPlanningState ApaPlanState {
      get { return apaPlanState_; }
      set {
        apaPlanState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Planning);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Planning other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Curves, other.Curves)) return false;
      if (!object.Equals(TrajPoints, other.TrajPoints)) return false;
      if (LockCarportId != other.LockCarportId) return false;
      if (State != other.State) return false;
      if(!highlightedObjectId_.Equals(other.highlightedObjectId_)) return false;
      if (!object.Equals(BehaviorDebug, other.BehaviorDebug)) return false;
      if (!object.Equals(PlannerDebug, other.PlannerDebug)) return false;
      if (PilotState != other.PilotState) return false;
      if (NudgeState != other.NudgeState) return false;
      if (ParkingPause != other.ParkingPause) return false;
      if(!parkingPose_.Equals(other.parkingPose_)) return false;
      if(!avaliableParkingSlots_.Equals(other.avaliableParkingSlots_)) return false;
      if (ParkAutoPilotSystemStatus != other.ParkAutoPilotSystemStatus) return false;
      if (!object.Equals(TimeConsume, other.TimeConsume)) return false;
      if (!object.Equals(DebugPath, other.DebugPath)) return false;
      if (DebugKey != other.DebugKey) return false;
      if (!object.Equals(ApaPlanState, other.ApaPlanState)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (curves_ != null) hash ^= Curves.GetHashCode();
      if (trajPoints_ != null) hash ^= TrajPoints.GetHashCode();
      if (HasLockCarportId) hash ^= LockCarportId.GetHashCode();
      if (HasState) hash ^= State.GetHashCode();
      hash ^= highlightedObjectId_.GetHashCode();
      if (behaviorDebug_ != null) hash ^= BehaviorDebug.GetHashCode();
      if (plannerDebug_ != null) hash ^= PlannerDebug.GetHashCode();
      if (HasPilotState) hash ^= PilotState.GetHashCode();
      if (HasNudgeState) hash ^= NudgeState.GetHashCode();
      if (HasParkingPause) hash ^= ParkingPause.GetHashCode();
      hash ^= parkingPose_.GetHashCode();
      hash ^= avaliableParkingSlots_.GetHashCode();
      if (HasParkAutoPilotSystemStatus) hash ^= ParkAutoPilotSystemStatus.GetHashCode();
      if (timeConsume_ != null) hash ^= TimeConsume.GetHashCode();
      if (debugPath_ != null) hash ^= DebugPath.GetHashCode();
      if (HasDebugKey) hash ^= DebugKey.GetHashCode();
      if (apaPlanState_ != null) hash ^= ApaPlanState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (curves_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Curves);
      }
      if (trajPoints_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TrajPoints);
      }
      if (HasLockCarportId) {
        output.WriteRawTag(24);
        output.WriteInt32(LockCarportId);
      }
      if (HasState) {
        output.WriteRawTag(32);
        output.WriteInt32(State);
      }
      highlightedObjectId_.WriteTo(output, _repeated_highlightedObjectId_codec);
      if (behaviorDebug_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(BehaviorDebug);
      }
      if (plannerDebug_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(PlannerDebug);
      }
      if (HasPilotState) {
        output.WriteRawTag(64);
        output.WriteInt32(PilotState);
      }
      if (HasNudgeState) {
        output.WriteRawTag(72);
        output.WriteInt32(NudgeState);
      }
      if (HasParkingPause) {
        output.WriteRawTag(80);
        output.WriteInt32(ParkingPause);
      }
      parkingPose_.WriteTo(output, _repeated_parkingPose_codec);
      avaliableParkingSlots_.WriteTo(output, _repeated_avaliableParkingSlots_codec);
      if (HasParkAutoPilotSystemStatus) {
        output.WriteRawTag(104);
        output.WriteInt32(ParkAutoPilotSystemStatus);
      }
      if (timeConsume_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(TimeConsume);
      }
      if (debugPath_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(DebugPath);
      }
      if (HasDebugKey) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(DebugKey);
      }
      if (apaPlanState_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(ApaPlanState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (curves_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Curves);
      }
      if (trajPoints_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrajPoints);
      }
      if (HasLockCarportId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LockCarportId);
      }
      if (HasState) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      size += highlightedObjectId_.CalculateSize(_repeated_highlightedObjectId_codec);
      if (behaviorDebug_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BehaviorDebug);
      }
      if (plannerDebug_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlannerDebug);
      }
      if (HasPilotState) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PilotState);
      }
      if (HasNudgeState) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NudgeState);
      }
      if (HasParkingPause) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParkingPause);
      }
      size += parkingPose_.CalculateSize(_repeated_parkingPose_codec);
      size += avaliableParkingSlots_.CalculateSize(_repeated_avaliableParkingSlots_codec);
      if (HasParkAutoPilotSystemStatus) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParkAutoPilotSystemStatus);
      }
      if (timeConsume_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeConsume);
      }
      if (debugPath_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DebugPath);
      }
      if (HasDebugKey) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(DebugKey);
      }
      if (apaPlanState_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ApaPlanState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Planning other) {
      if (other == null) {
        return;
      }
      if (other.curves_ != null) {
        if (curves_ == null) {
          Curves = new global::Xviewer.Curves();
        }
        Curves.MergeFrom(other.Curves);
      }
      if (other.trajPoints_ != null) {
        if (trajPoints_ == null) {
          TrajPoints = new global::Xviewer.TrajectoryStamped();
        }
        TrajPoints.MergeFrom(other.TrajPoints);
      }
      if (other.HasLockCarportId) {
        LockCarportId = other.LockCarportId;
      }
      if (other.HasState) {
        State = other.State;
      }
      highlightedObjectId_.Add(other.highlightedObjectId_);
      if (other.behaviorDebug_ != null) {
        if (behaviorDebug_ == null) {
          BehaviorDebug = new global::Xviewer.BehaviorDebugMsg();
        }
        BehaviorDebug.MergeFrom(other.BehaviorDebug);
      }
      if (other.plannerDebug_ != null) {
        if (plannerDebug_ == null) {
          PlannerDebug = new global::Xviewer.STPubInfo();
        }
        PlannerDebug.MergeFrom(other.PlannerDebug);
      }
      if (other.HasPilotState) {
        PilotState = other.PilotState;
      }
      if (other.HasNudgeState) {
        NudgeState = other.NudgeState;
      }
      if (other.HasParkingPause) {
        ParkingPause = other.ParkingPause;
      }
      parkingPose_.Add(other.parkingPose_);
      avaliableParkingSlots_.Add(other.avaliableParkingSlots_);
      if (other.HasParkAutoPilotSystemStatus) {
        ParkAutoPilotSystemStatus = other.ParkAutoPilotSystemStatus;
      }
      if (other.timeConsume_ != null) {
        if (timeConsume_ == null) {
          TimeConsume = new global::Xviewer.TimeConsume();
        }
        TimeConsume.MergeFrom(other.TimeConsume);
      }
      if (other.debugPath_ != null) {
        if (debugPath_ == null) {
          DebugPath = new global::Xviewer.DebugPath();
        }
        DebugPath.MergeFrom(other.DebugPath);
      }
      if (other.HasDebugKey) {
        DebugKey = other.DebugKey;
      }
      if (other.apaPlanState_ != null) {
        if (apaPlanState_ == null) {
          ApaPlanState = new global::Xviewer.ApaPlanningState();
        }
        ApaPlanState.MergeFrom(other.ApaPlanState);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (curves_ == null) {
              Curves = new global::Xviewer.Curves();
            }
            input.ReadMessage(Curves);
            break;
          }
          case 18: {
            if (trajPoints_ == null) {
              TrajPoints = new global::Xviewer.TrajectoryStamped();
            }
            input.ReadMessage(TrajPoints);
            break;
          }
          case 24: {
            LockCarportId = input.ReadInt32();
            break;
          }
          case 32: {
            State = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            highlightedObjectId_.AddEntriesFrom(input, _repeated_highlightedObjectId_codec);
            break;
          }
          case 50: {
            if (behaviorDebug_ == null) {
              BehaviorDebug = new global::Xviewer.BehaviorDebugMsg();
            }
            input.ReadMessage(BehaviorDebug);
            break;
          }
          case 58: {
            if (plannerDebug_ == null) {
              PlannerDebug = new global::Xviewer.STPubInfo();
            }
            input.ReadMessage(PlannerDebug);
            break;
          }
          case 64: {
            PilotState = input.ReadInt32();
            break;
          }
          case 72: {
            NudgeState = input.ReadInt32();
            break;
          }
          case 80: {
            ParkingPause = input.ReadInt32();
            break;
          }
          case 90:
          case 89: {
            parkingPose_.AddEntriesFrom(input, _repeated_parkingPose_codec);
            break;
          }
          case 98:
          case 96: {
            avaliableParkingSlots_.AddEntriesFrom(input, _repeated_avaliableParkingSlots_codec);
            break;
          }
          case 104: {
            ParkAutoPilotSystemStatus = input.ReadInt32();
            break;
          }
          case 114: {
            if (timeConsume_ == null) {
              TimeConsume = new global::Xviewer.TimeConsume();
            }
            input.ReadMessage(TimeConsume);
            break;
          }
          case 122: {
            if (debugPath_ == null) {
              DebugPath = new global::Xviewer.DebugPath();
            }
            input.ReadMessage(DebugPath);
            break;
          }
          case 128: {
            DebugKey = input.ReadInt64();
            break;
          }
          case 138: {
            if (apaPlanState_ == null) {
              ApaPlanState = new global::Xviewer.ApaPlanningState();
            }
            input.ReadMessage(ApaPlanState);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ----------------  控制消息结构 -----------------//
  /// </summary>
  public sealed partial class ControlPoint : pb::IMessage<ControlPoint> {
    private static readonly pb::MessageParser<ControlPoint> _parser = new pb::MessageParser<ControlPoint>(() => new ControlPoint());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ControlPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PncReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControlPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControlPoint(ControlPoint other) : this() {
      _hasBits0 = other._hasBits0;
      x_ = other.x_;
      y_ = other.y_;
      yawAngle_ = other.yawAngle_;
      speed_ = other.speed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControlPoint Clone() {
      return new ControlPoint(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private readonly static double XDefaultValue = 0D;

    private double x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X {
      get { if ((_hasBits0 & 1) != 0) { return x_; } else { return XDefaultValue; } }
      set {
        _hasBits0 |= 1;
        x_ = value;
      }
    }
    /// <summary>Gets whether the "x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasX {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearX() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private readonly static double YDefaultValue = 0D;

    private double y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y {
      get { if ((_hasBits0 & 2) != 0) { return y_; } else { return YDefaultValue; } }
      set {
        _hasBits0 |= 2;
        y_ = value;
      }
    }
    /// <summary>Gets whether the "y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasY {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearY() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "yaw_angle" field.</summary>
    public const int YawAngleFieldNumber = 3;
    private readonly static double YawAngleDefaultValue = 0D;

    private double yawAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double YawAngle {
      get { if ((_hasBits0 & 4) != 0) { return yawAngle_; } else { return YawAngleDefaultValue; } }
      set {
        _hasBits0 |= 4;
        yawAngle_ = value;
      }
    }
    /// <summary>Gets whether the "yaw_angle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasYawAngle {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "yaw_angle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearYawAngle() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 4;
    private readonly static double SpeedDefaultValue = 0D;

    private double speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Speed {
      get { if ((_hasBits0 & 8) != 0) { return speed_; } else { return SpeedDefaultValue; } }
      set {
        _hasBits0 |= 8;
        speed_ = value;
      }
    }
    /// <summary>Gets whether the "speed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSpeed {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "speed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSpeed() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ControlPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ControlPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(YawAngle, other.YawAngle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Speed, other.Speed)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasX) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(X);
      if (HasY) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Y);
      if (HasYawAngle) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(YawAngle);
      if (HasSpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Speed);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasX) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (HasY) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
      if (HasYawAngle) {
        output.WriteRawTag(25);
        output.WriteDouble(YawAngle);
      }
      if (HasSpeed) {
        output.WriteRawTag(33);
        output.WriteDouble(Speed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasX) {
        size += 1 + 8;
      }
      if (HasY) {
        size += 1 + 8;
      }
      if (HasYawAngle) {
        size += 1 + 8;
      }
      if (HasSpeed) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ControlPoint other) {
      if (other == null) {
        return;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      if (other.HasYawAngle) {
        YawAngle = other.YawAngle;
      }
      if (other.HasSpeed) {
        Speed = other.Speed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
          case 25: {
            YawAngle = input.ReadDouble();
            break;
          }
          case 33: {
            Speed = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ControlVisual : pb::IMessage<ControlVisual> {
    private static readonly pb::MessageParser<ControlVisual> _parser = new pb::MessageParser<ControlVisual>(() => new ControlVisual());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ControlVisual> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PncReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControlVisual() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControlVisual(ControlVisual other) : this() {
      _hasBits0 = other._hasBits0;
      refPoints_ = other.refPoints_.Clone();
      prvPoints_ = other.prvPoints_.Clone();
      curves_ = other.curves_.Clone();
      wheelAngle_ = other.wheelAngle_;
      ePsi_ = other.ePsi_;
      cte_ = other.cte_;
      eV_ = other.eV_;
      eS_ = other.eS_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControlVisual Clone() {
      return new ControlVisual(this);
    }

    /// <summary>Field number for the "ref_points" field.</summary>
    public const int RefPointsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Xviewer.ControlPoint> _repeated_refPoints_codec
        = pb::FieldCodec.ForMessage(10, global::Xviewer.ControlPoint.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.ControlPoint> refPoints_ = new pbc::RepeatedField<global::Xviewer.ControlPoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.ControlPoint> RefPoints {
      get { return refPoints_; }
    }

    /// <summary>Field number for the "prv_points" field.</summary>
    public const int PrvPointsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xviewer.ControlPoint> _repeated_prvPoints_codec
        = pb::FieldCodec.ForMessage(18, global::Xviewer.ControlPoint.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.ControlPoint> prvPoints_ = new pbc::RepeatedField<global::Xviewer.ControlPoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.ControlPoint> PrvPoints {
      get { return prvPoints_; }
    }

    /// <summary>Field number for the "curves" field.</summary>
    public const int CurvesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Xviewer.OneCurve> _repeated_curves_codec
        = pb::FieldCodec.ForMessage(26, global::Xviewer.OneCurve.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.OneCurve> curves_ = new pbc::RepeatedField<global::Xviewer.OneCurve>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.OneCurve> Curves {
      get { return curves_; }
    }

    /// <summary>Field number for the "wheel_angle" field.</summary>
    public const int WheelAngleFieldNumber = 4;
    private readonly static double WheelAngleDefaultValue = 0D;

    private double wheelAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WheelAngle {
      get { if ((_hasBits0 & 1) != 0) { return wheelAngle_; } else { return WheelAngleDefaultValue; } }
      set {
        _hasBits0 |= 1;
        wheelAngle_ = value;
      }
    }
    /// <summary>Gets whether the "wheel_angle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWheelAngle {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "wheel_angle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWheelAngle() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "e_psi" field.</summary>
    public const int EPsiFieldNumber = 5;
    private readonly static double EPsiDefaultValue = 0D;

    private double ePsi_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EPsi {
      get { if ((_hasBits0 & 2) != 0) { return ePsi_; } else { return EPsiDefaultValue; } }
      set {
        _hasBits0 |= 2;
        ePsi_ = value;
      }
    }
    /// <summary>Gets whether the "e_psi" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEPsi {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "e_psi" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEPsi() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "cte" field.</summary>
    public const int CteFieldNumber = 6;
    private readonly static double CteDefaultValue = 0D;

    private double cte_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Cte {
      get { if ((_hasBits0 & 4) != 0) { return cte_; } else { return CteDefaultValue; } }
      set {
        _hasBits0 |= 4;
        cte_ = value;
      }
    }
    /// <summary>Gets whether the "cte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCte {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "cte" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCte() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "e_v" field.</summary>
    public const int EVFieldNumber = 7;
    private readonly static double EVDefaultValue = 0D;

    private double eV_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EV {
      get { if ((_hasBits0 & 8) != 0) { return eV_; } else { return EVDefaultValue; } }
      set {
        _hasBits0 |= 8;
        eV_ = value;
      }
    }
    /// <summary>Gets whether the "e_v" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEV {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "e_v" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEV() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "e_s" field.</summary>
    public const int ESFieldNumber = 8;
    private readonly static double ESDefaultValue = 0D;

    private double eS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ES {
      get { if ((_hasBits0 & 16) != 0) { return eS_; } else { return ESDefaultValue; } }
      set {
        _hasBits0 |= 16;
        eS_ = value;
      }
    }
    /// <summary>Gets whether the "e_s" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasES {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "e_s" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearES() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ControlVisual);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ControlVisual other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!refPoints_.Equals(other.refPoints_)) return false;
      if(!prvPoints_.Equals(other.prvPoints_)) return false;
      if(!curves_.Equals(other.curves_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(WheelAngle, other.WheelAngle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EPsi, other.EPsi)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Cte, other.Cte)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EV, other.EV)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ES, other.ES)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= refPoints_.GetHashCode();
      hash ^= prvPoints_.GetHashCode();
      hash ^= curves_.GetHashCode();
      if (HasWheelAngle) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(WheelAngle);
      if (HasEPsi) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EPsi);
      if (HasCte) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Cte);
      if (HasEV) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EV);
      if (HasES) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ES);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      refPoints_.WriteTo(output, _repeated_refPoints_codec);
      prvPoints_.WriteTo(output, _repeated_prvPoints_codec);
      curves_.WriteTo(output, _repeated_curves_codec);
      if (HasWheelAngle) {
        output.WriteRawTag(33);
        output.WriteDouble(WheelAngle);
      }
      if (HasEPsi) {
        output.WriteRawTag(41);
        output.WriteDouble(EPsi);
      }
      if (HasCte) {
        output.WriteRawTag(49);
        output.WriteDouble(Cte);
      }
      if (HasEV) {
        output.WriteRawTag(57);
        output.WriteDouble(EV);
      }
      if (HasES) {
        output.WriteRawTag(65);
        output.WriteDouble(ES);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += refPoints_.CalculateSize(_repeated_refPoints_codec);
      size += prvPoints_.CalculateSize(_repeated_prvPoints_codec);
      size += curves_.CalculateSize(_repeated_curves_codec);
      if (HasWheelAngle) {
        size += 1 + 8;
      }
      if (HasEPsi) {
        size += 1 + 8;
      }
      if (HasCte) {
        size += 1 + 8;
      }
      if (HasEV) {
        size += 1 + 8;
      }
      if (HasES) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ControlVisual other) {
      if (other == null) {
        return;
      }
      refPoints_.Add(other.refPoints_);
      prvPoints_.Add(other.prvPoints_);
      curves_.Add(other.curves_);
      if (other.HasWheelAngle) {
        WheelAngle = other.WheelAngle;
      }
      if (other.HasEPsi) {
        EPsi = other.EPsi;
      }
      if (other.HasCte) {
        Cte = other.Cte;
      }
      if (other.HasEV) {
        EV = other.EV;
      }
      if (other.HasES) {
        ES = other.ES;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            refPoints_.AddEntriesFrom(input, _repeated_refPoints_codec);
            break;
          }
          case 18: {
            prvPoints_.AddEntriesFrom(input, _repeated_prvPoints_codec);
            break;
          }
          case 26: {
            curves_.AddEntriesFrom(input, _repeated_curves_codec);
            break;
          }
          case 33: {
            WheelAngle = input.ReadDouble();
            break;
          }
          case 41: {
            EPsi = input.ReadDouble();
            break;
          }
          case 49: {
            Cte = input.ReadDouble();
            break;
          }
          case 57: {
            EV = input.ReadDouble();
            break;
          }
          case 65: {
            ES = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TravelStatus : pb::IMessage<TravelStatus> {
    private static readonly pb::MessageParser<TravelStatus> _parser = new pb::MessageParser<TravelStatus>(() => new TravelStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TravelStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PncReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TravelStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TravelStatus(TravelStatus other) : this() {
      travelstatus_ = other.travelstatus_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TravelStatus Clone() {
      return new TravelStatus(this);
    }

    /// <summary>Field number for the "travelstatus" field.</summary>
    public const int TravelstatusFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_travelstatus_codec
        = pb::FieldCodec.ForInt32(8);
    private readonly pbc::RepeatedField<int> travelstatus_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///  travelstatus[0]: 轨迹行驶状态，“0”表示未结束，“1”表示结束；    后续保留
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Travelstatus {
      get { return travelstatus_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TravelStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TravelStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!travelstatus_.Equals(other.travelstatus_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= travelstatus_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      travelstatus_.WriteTo(output, _repeated_travelstatus_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += travelstatus_.CalculateSize(_repeated_travelstatus_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TravelStatus other) {
      if (other == null) {
        return;
      }
      travelstatus_.Add(other.travelstatus_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            travelstatus_.AddEntriesFrom(input, _repeated_travelstatus_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Controling : pb::IMessage<Controling> {
    private static readonly pb::MessageParser<Controling> _parser = new pb::MessageParser<Controling>(() => new Controling());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Controling> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PncReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Controling() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Controling(Controling other) : this() {
      controlVisual_ = other.controlVisual_ != null ? other.controlVisual_.Clone() : null;
      controlTravel_ = other.controlTravel_ != null ? other.controlTravel_.Clone() : null;
      controlDebug_ = other.controlDebug_ != null ? other.controlDebug_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Controling Clone() {
      return new Controling(this);
    }

    /// <summary>Field number for the "control_visual" field.</summary>
    public const int ControlVisualFieldNumber = 1;
    private global::Xviewer.ControlVisual controlVisual_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.ControlVisual ControlVisual {
      get { return controlVisual_; }
      set {
        controlVisual_ = value;
      }
    }

    /// <summary>Field number for the "control_travel" field.</summary>
    public const int ControlTravelFieldNumber = 2;
    private global::Xviewer.TravelStatus controlTravel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.TravelStatus ControlTravel {
      get { return controlTravel_; }
      set {
        controlTravel_ = value;
      }
    }

    /// <summary>Field number for the "control_debug" field.</summary>
    public const int ControlDebugFieldNumber = 3;
    private global::Xviewer.ControlVisual controlDebug_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.ControlVisual ControlDebug {
      get { return controlDebug_; }
      set {
        controlDebug_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Controling);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Controling other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ControlVisual, other.ControlVisual)) return false;
      if (!object.Equals(ControlTravel, other.ControlTravel)) return false;
      if (!object.Equals(ControlDebug, other.ControlDebug)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (controlVisual_ != null) hash ^= ControlVisual.GetHashCode();
      if (controlTravel_ != null) hash ^= ControlTravel.GetHashCode();
      if (controlDebug_ != null) hash ^= ControlDebug.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (controlVisual_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ControlVisual);
      }
      if (controlTravel_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ControlTravel);
      }
      if (controlDebug_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ControlDebug);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (controlVisual_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ControlVisual);
      }
      if (controlTravel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ControlTravel);
      }
      if (controlDebug_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ControlDebug);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Controling other) {
      if (other == null) {
        return;
      }
      if (other.controlVisual_ != null) {
        if (controlVisual_ == null) {
          ControlVisual = new global::Xviewer.ControlVisual();
        }
        ControlVisual.MergeFrom(other.ControlVisual);
      }
      if (other.controlTravel_ != null) {
        if (controlTravel_ == null) {
          ControlTravel = new global::Xviewer.TravelStatus();
        }
        ControlTravel.MergeFrom(other.ControlTravel);
      }
      if (other.controlDebug_ != null) {
        if (controlDebug_ == null) {
          ControlDebug = new global::Xviewer.ControlVisual();
        }
        ControlDebug.MergeFrom(other.ControlDebug);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (controlVisual_ == null) {
              ControlVisual = new global::Xviewer.ControlVisual();
            }
            input.ReadMessage(ControlVisual);
            break;
          }
          case 18: {
            if (controlTravel_ == null) {
              ControlTravel = new global::Xviewer.TravelStatus();
            }
            input.ReadMessage(ControlTravel);
            break;
          }
          case 26: {
            if (controlDebug_ == null) {
              ControlDebug = new global::Xviewer.ControlVisual();
            }
            input.ReadMessage(ControlDebug);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
