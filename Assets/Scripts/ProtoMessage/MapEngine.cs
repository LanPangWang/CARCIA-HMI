// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: map_engine.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Xviewer {

  /// <summary>Holder for reflection information generated from map_engine.proto</summary>
  public static partial class MapEngineReflection {

    #region Descriptor
    /// <summary>File descriptor for map_engine.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MapEngineReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBtYXBfZW5naW5lLnByb3RvEgd4dmlld2VyGgxiYXNpY3MucHJvdG8igwEK",
            "DlBhdGhQbGFuUmVzdWx0EgwKBGNvZGUYASABKAUSDgoGcmVhc29uGAIgASgJ",
            "EikKCnV0bV9wb2ludHMYAyADKAsyFS54dmlld2VyLlBvbHlnb25Qb2ludBIo",
            "Cgl3YXlwb2ludHMYBCADKAsyFS54dmlld2VyLlBvbHlnb25Qb2ludCI9CgpN",
            "YXBTdGF0aW9uEhIKCnN0YXRpb25faWQYASABKAkSGwoDcG9zGAIgASgLMg4u",
            "eHZpZXdlci5Qb2ludCKpAQoHTWFwUm9hZBIKCgJpZBgBIAEoCRIRCglzZWN0",
            "aW9uaWQYAiABKAkSDgoGZGlyZWN0GAMgASgFEg8KB2xhbmVudW0YBCABKAUS",
            "HwoFbGFuZXMYBSADKAsyEC54dmlld2VyLk1hcExhbmUSFgoOaW50ZXJfZ2Vv",
            "ZmVuY2UYBiABKAUSJQoNdHJhZmZpY19saWdodBgHIAMoCzIOLnh2aWV3ZXIu",
            "UG9pbnQiPgoPTWFwSW50ZXJzZWN0aW9uEgwKBHR5cGUYASABKAUSEAoIZGlz",
            "dGFuY2UYAiABKAESCwoDZGlyGAMgASgFIoQBCghNYXBDcm9zcxIMCgR0eXBl",
            "GAEgASgNEhAKCGRpc3RhbmNlGAIgASgCEgsKA2RpchgDIAEoDRIjCgtndWlk",
            "ZXBvaW50cxgEIAMoCzIOLnh2aWV3ZXIuUG9pbnQSEwoLZnJvbWxhbmVkaXIY",
            "BSADKA0SEQoJdG9sYW5lZGlyGAYgAygNIn8KCE1hcFJvYWRzEh8KBXJvYWRz",
            "GAEgAygLMhAueHZpZXdlci5NYXBSb2FkEi4KDGludGVyc2VjdGlvbhgCIAEo",
            "CzIYLnh2aWV3ZXIuTWFwSW50ZXJzZWN0aW9uEiIKB2Nyb3NzZXMYAyADKAsy",
            "ES54dmlld2VyLk1hcENyb3NzIkMKFE1hcFRyYWZmaWNPYmplY3RUeXBlEg0K",
            "BXR5cGUxGAEgASgJEg0KBXR5cGUyGAIgASgJEg0KBXR5cGUzGAMgASgJInsK",
            "EE1hcFRyYWZmaWNPYmplY3QSCgoCaWQYASABKAkSKwoEdHlwZRgCIAEoCzId",
            "Lnh2aWV3ZXIuTWFwVHJhZmZpY09iamVjdFR5cGUSDAoEbmFtZRgDIAEoCRIg",
            "Cghwb3NpdGlvbhgEIAEoCzIOLnh2aWV3ZXIuUG9pbnQiUQoRTWFwVHJhZmZp",
            "Y09iamVjdHMSKgoHb2JqZWN0cxgBIAMoCzIZLnh2aWV3ZXIuTWFwVHJhZmZp",
            "Y09iamVjdBIQCghkaXN0YW5jZRgCIAEoBSJKCgdNYXBMYW5lEg8KB2xhbmVf",
            "aWQYASABKAUSDAoEdHlwZRgCIAEoDRINCgV3aWR0aBgDIAEoARIRCglkaXZl",
            "cnNpb24YBCABKA0i6gEKCU1hcEVuZ2luZRItCgxyb3V0aW5nX3BhdGgYASAB",
            "KAsyFy54dmlld2VyLlBhdGhQbGFuUmVzdWx0EikKDG1hcF9zdGF0aW9ucxgC",
            "IAMoCzITLnh2aWV3ZXIuTWFwU3RhdGlvbhIoCg1wcmVkaWN0X3JvYWRzGAMg",
            "ASgLMhEueHZpZXdlci5NYXBSb2FkcxIzCg9wcmVkaWN0X29iamVjdHMYBCAB",
            "KAsyGi54dmlld2VyLk1hcFRyYWZmaWNPYmplY3RzEiQKCXB1Yl9yb2FkcxgF",
            "IAEoCzIRLnh2aWV3ZXIuTWFwUm9hZHM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Xviewer.BasicsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.PathPlanResult), global::Xviewer.PathPlanResult.Parser, new[]{ "Code", "Reason", "UtmPoints", "Waypoints" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.MapStation), global::Xviewer.MapStation.Parser, new[]{ "StationId", "Pos" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.MapRoad), global::Xviewer.MapRoad.Parser, new[]{ "Id", "Sectionid", "Direct", "Lanenum", "Lanes", "InterGeofence", "TrafficLight" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.MapIntersection), global::Xviewer.MapIntersection.Parser, new[]{ "Type", "Distance", "Dir" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.MapCross), global::Xviewer.MapCross.Parser, new[]{ "Type", "Distance", "Dir", "Guidepoints", "Fromlanedir", "Tolanedir" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.MapRoads), global::Xviewer.MapRoads.Parser, new[]{ "Roads", "Intersection", "Crosses" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.MapTrafficObjectType), global::Xviewer.MapTrafficObjectType.Parser, new[]{ "Type1", "Type2", "Type3" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.MapTrafficObject), global::Xviewer.MapTrafficObject.Parser, new[]{ "Id", "Type", "Name", "Position" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.MapTrafficObjects), global::Xviewer.MapTrafficObjects.Parser, new[]{ "Objects", "Distance" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.MapLane), global::Xviewer.MapLane.Parser, new[]{ "LaneId", "Type", "Width", "Diversion" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.MapEngine), global::Xviewer.MapEngine.Parser, new[]{ "RoutingPath", "MapStations", "PredictRoads", "PredictObjects", "PubRoads" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PathPlanResult : pb::IMessage<PathPlanResult> {
    private static readonly pb::MessageParser<PathPlanResult> _parser = new pb::MessageParser<PathPlanResult>(() => new PathPlanResult());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PathPlanResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.MapEngineReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathPlanResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathPlanResult(PathPlanResult other) : this() {
      _hasBits0 = other._hasBits0;
      code_ = other.code_;
      reason_ = other.reason_;
      utmPoints_ = other.utmPoints_.Clone();
      waypoints_ = other.waypoints_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathPlanResult Clone() {
      return new PathPlanResult(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private readonly static int CodeDefaultValue = 0;

    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 2;
    private readonly static string ReasonDefaultValue = "";

    private string reason_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_ ?? ReasonDefaultValue; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "reason" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReason {
      get { return reason_ != null; }
    }
    /// <summary>Clears the value of the "reason" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReason() {
      reason_ = null;
    }

    /// <summary>Field number for the "utm_points" field.</summary>
    public const int UtmPointsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Xviewer.PolygonPoint> _repeated_utmPoints_codec
        = pb::FieldCodec.ForMessage(26, global::Xviewer.PolygonPoint.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.PolygonPoint> utmPoints_ = new pbc::RepeatedField<global::Xviewer.PolygonPoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.PolygonPoint> UtmPoints {
      get { return utmPoints_; }
    }

    /// <summary>Field number for the "waypoints" field.</summary>
    public const int WaypointsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Xviewer.PolygonPoint> _repeated_waypoints_codec
        = pb::FieldCodec.ForMessage(34, global::Xviewer.PolygonPoint.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.PolygonPoint> waypoints_ = new pbc::RepeatedField<global::Xviewer.PolygonPoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.PolygonPoint> Waypoints {
      get { return waypoints_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PathPlanResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PathPlanResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Reason != other.Reason) return false;
      if(!utmPoints_.Equals(other.utmPoints_)) return false;
      if(!waypoints_.Equals(other.waypoints_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCode) hash ^= Code.GetHashCode();
      if (HasReason) hash ^= Reason.GetHashCode();
      hash ^= utmPoints_.GetHashCode();
      hash ^= waypoints_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (HasReason) {
        output.WriteRawTag(18);
        output.WriteString(Reason);
      }
      utmPoints_.WriteTo(output, _repeated_utmPoints_codec);
      waypoints_.WriteTo(output, _repeated_waypoints_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (HasReason) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      size += utmPoints_.CalculateSize(_repeated_utmPoints_codec);
      size += waypoints_.CalculateSize(_repeated_waypoints_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PathPlanResult other) {
      if (other == null) {
        return;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      if (other.HasReason) {
        Reason = other.Reason;
      }
      utmPoints_.Add(other.utmPoints_);
      waypoints_.Add(other.waypoints_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Reason = input.ReadString();
            break;
          }
          case 26: {
            utmPoints_.AddEntriesFrom(input, _repeated_utmPoints_codec);
            break;
          }
          case 34: {
            waypoints_.AddEntriesFrom(input, _repeated_waypoints_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MapStation : pb::IMessage<MapStation> {
    private static readonly pb::MessageParser<MapStation> _parser = new pb::MessageParser<MapStation>(() => new MapStation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapStation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.MapEngineReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapStation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapStation(MapStation other) : this() {
      stationId_ = other.stationId_;
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapStation Clone() {
      return new MapStation(this);
    }

    /// <summary>Field number for the "station_id" field.</summary>
    public const int StationIdFieldNumber = 1;
    private readonly static string StationIdDefaultValue = "";

    private string stationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StationId {
      get { return stationId_ ?? StationIdDefaultValue; }
      set {
        stationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "station_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStationId {
      get { return stationId_ != null; }
    }
    /// <summary>Clears the value of the "station_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStationId() {
      stationId_ = null;
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private global::Xviewer.Point pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Point Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapStation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapStation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StationId != other.StationId) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStationId) hash ^= StationId.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasStationId) {
        output.WriteRawTag(10);
        output.WriteString(StationId);
      }
      if (pos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStationId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StationId);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapStation other) {
      if (other == null) {
        return;
      }
      if (other.HasStationId) {
        StationId = other.StationId;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          Pos = new global::Xviewer.Point();
        }
        Pos.MergeFrom(other.Pos);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            StationId = input.ReadString();
            break;
          }
          case 18: {
            if (pos_ == null) {
              Pos = new global::Xviewer.Point();
            }
            input.ReadMessage(Pos);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MapRoad : pb::IMessage<MapRoad> {
    private static readonly pb::MessageParser<MapRoad> _parser = new pb::MessageParser<MapRoad>(() => new MapRoad());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapRoad> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.MapEngineReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRoad() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRoad(MapRoad other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      sectionid_ = other.sectionid_;
      direct_ = other.direct_;
      lanenum_ = other.lanenum_;
      lanes_ = other.lanes_.Clone();
      interGeofence_ = other.interGeofence_;
      trafficLight_ = other.trafficLight_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRoad Clone() {
      return new MapRoad(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    /// <summary>
    /// 道路id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "sectionid" field.</summary>
    public const int SectionidFieldNumber = 2;
    private readonly static string SectionidDefaultValue = "";

    private string sectionid_;
    /// <summary>
    /// 路段id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sectionid {
      get { return sectionid_ ?? SectionidDefaultValue; }
      set {
        sectionid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "sectionid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSectionid {
      get { return sectionid_ != null; }
    }
    /// <summary>Clears the value of the "sectionid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSectionid() {
      sectionid_ = null;
    }

    /// <summary>Field number for the "direct" field.</summary>
    public const int DirectFieldNumber = 3;
    private readonly static int DirectDefaultValue = 0;

    private int direct_;
    /// <summary>
    /// road direct sdmap              
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Direct {
      get { if ((_hasBits0 & 1) != 0) { return direct_; } else { return DirectDefaultValue; } }
      set {
        _hasBits0 |= 1;
        direct_ = value;
      }
    }
    /// <summary>Gets whether the "direct" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDirect {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "direct" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDirect() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lanenum" field.</summary>
    public const int LanenumFieldNumber = 4;
    private readonly static int LanenumDefaultValue = 0;

    private int lanenum_;
    /// <summary>
    /// 车道数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lanenum {
      get { if ((_hasBits0 & 2) != 0) { return lanenum_; } else { return LanenumDefaultValue; } }
      set {
        _hasBits0 |= 2;
        lanenum_ = value;
      }
    }
    /// <summary>Gets whether the "lanenum" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLanenum {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "lanenum" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLanenum() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "lanes" field.</summary>
    public const int LanesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Xviewer.MapLane> _repeated_lanes_codec
        = pb::FieldCodec.ForMessage(42, global::Xviewer.MapLane.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.MapLane> lanes_ = new pbc::RepeatedField<global::Xviewer.MapLane>();
    /// <summary>
    /// 车道集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.MapLane> Lanes {
      get { return lanes_; }
    }

    /// <summary>Field number for the "inter_geofence" field.</summary>
    public const int InterGeofenceFieldNumber = 6;
    private readonly static int InterGeofenceDefaultValue = 0;

    private int interGeofence_;
    /// <summary>
    /// 电子围栏
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InterGeofence {
      get { if ((_hasBits0 & 4) != 0) { return interGeofence_; } else { return InterGeofenceDefaultValue; } }
      set {
        _hasBits0 |= 4;
        interGeofence_ = value;
      }
    }
    /// <summary>Gets whether the "inter_geofence" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInterGeofence {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "inter_geofence" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInterGeofence() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "traffic_light" field.</summary>
    public const int TrafficLightFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_trafficLight_codec
        = pb::FieldCodec.ForMessage(58, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> trafficLight_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// traffic_light utm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> TrafficLight {
      get { return trafficLight_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapRoad);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapRoad other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Sectionid != other.Sectionid) return false;
      if (Direct != other.Direct) return false;
      if (Lanenum != other.Lanenum) return false;
      if(!lanes_.Equals(other.lanes_)) return false;
      if (InterGeofence != other.InterGeofence) return false;
      if(!trafficLight_.Equals(other.trafficLight_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasSectionid) hash ^= Sectionid.GetHashCode();
      if (HasDirect) hash ^= Direct.GetHashCode();
      if (HasLanenum) hash ^= Lanenum.GetHashCode();
      hash ^= lanes_.GetHashCode();
      if (HasInterGeofence) hash ^= InterGeofence.GetHashCode();
      hash ^= trafficLight_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasSectionid) {
        output.WriteRawTag(18);
        output.WriteString(Sectionid);
      }
      if (HasDirect) {
        output.WriteRawTag(24);
        output.WriteInt32(Direct);
      }
      if (HasLanenum) {
        output.WriteRawTag(32);
        output.WriteInt32(Lanenum);
      }
      lanes_.WriteTo(output, _repeated_lanes_codec);
      if (HasInterGeofence) {
        output.WriteRawTag(48);
        output.WriteInt32(InterGeofence);
      }
      trafficLight_.WriteTo(output, _repeated_trafficLight_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (HasSectionid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sectionid);
      }
      if (HasDirect) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Direct);
      }
      if (HasLanenum) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lanenum);
      }
      size += lanes_.CalculateSize(_repeated_lanes_codec);
      if (HasInterGeofence) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InterGeofence);
      }
      size += trafficLight_.CalculateSize(_repeated_trafficLight_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapRoad other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasSectionid) {
        Sectionid = other.Sectionid;
      }
      if (other.HasDirect) {
        Direct = other.Direct;
      }
      if (other.HasLanenum) {
        Lanenum = other.Lanenum;
      }
      lanes_.Add(other.lanes_);
      if (other.HasInterGeofence) {
        InterGeofence = other.InterGeofence;
      }
      trafficLight_.Add(other.trafficLight_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Sectionid = input.ReadString();
            break;
          }
          case 24: {
            Direct = input.ReadInt32();
            break;
          }
          case 32: {
            Lanenum = input.ReadInt32();
            break;
          }
          case 42: {
            lanes_.AddEntriesFrom(input, _repeated_lanes_codec);
            break;
          }
          case 48: {
            InterGeofence = input.ReadInt32();
            break;
          }
          case 58: {
            trafficLight_.AddEntriesFrom(input, _repeated_trafficLight_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MapIntersection : pb::IMessage<MapIntersection> {
    private static readonly pb::MessageParser<MapIntersection> _parser = new pb::MessageParser<MapIntersection>(() => new MapIntersection());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapIntersection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.MapEngineReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapIntersection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapIntersection(MapIntersection other) : this() {
      _hasBits0 = other._hasBits0;
      type_ = other.type_;
      distance_ = other.distance_;
      dir_ = other.dir_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapIntersection Clone() {
      return new MapIntersection(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static int TypeDefaultValue = 0;

    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "distance" field.</summary>
    public const int DistanceFieldNumber = 2;
    private readonly static double DistanceDefaultValue = 0D;

    private double distance_;
    /// <summary>
    /// 停止线距离
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Distance {
      get { if ((_hasBits0 & 2) != 0) { return distance_; } else { return DistanceDefaultValue; } }
      set {
        _hasBits0 |= 2;
        distance_ = value;
      }
    }
    /// <summary>Gets whether the "distance" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDistance {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "distance" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDistance() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 3;
    private readonly static int DirDefaultValue = 0;

    private int dir_;
    /// <summary>
    /// 转向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Dir {
      get { if ((_hasBits0 & 4) != 0) { return dir_; } else { return DirDefaultValue; } }
      set {
        _hasBits0 |= 4;
        dir_ = value;
      }
    }
    /// <summary>Gets whether the "dir" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDir {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "dir" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDir() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapIntersection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapIntersection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Distance, other.Distance)) return false;
      if (Dir != other.Dir) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      if (HasDistance) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Distance);
      if (HasDir) hash ^= Dir.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasType) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (HasDistance) {
        output.WriteRawTag(17);
        output.WriteDouble(Distance);
      }
      if (HasDir) {
        output.WriteRawTag(24);
        output.WriteInt32(Dir);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (HasDistance) {
        size += 1 + 8;
      }
      if (HasDir) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dir);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapIntersection other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasDistance) {
        Distance = other.Distance;
      }
      if (other.HasDir) {
        Dir = other.Dir;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 17: {
            Distance = input.ReadDouble();
            break;
          }
          case 24: {
            Dir = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MapCross : pb::IMessage<MapCross> {
    private static readonly pb::MessageParser<MapCross> _parser = new pb::MessageParser<MapCross>(() => new MapCross());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapCross> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.MapEngineReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapCross() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapCross(MapCross other) : this() {
      _hasBits0 = other._hasBits0;
      type_ = other.type_;
      distance_ = other.distance_;
      dir_ = other.dir_;
      guidepoints_ = other.guidepoints_.Clone();
      fromlanedir_ = other.fromlanedir_.Clone();
      tolanedir_ = other.tolanedir_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapCross Clone() {
      return new MapCross(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static uint TypeDefaultValue = 0;

    private uint type_;
    /// <summary>
    /// 是否在当前路口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "distance" field.</summary>
    public const int DistanceFieldNumber = 2;
    private readonly static float DistanceDefaultValue = 0F;

    private float distance_;
    /// <summary>
    /// 到路口距离/到link起始点距离 在路口时dis=0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Distance {
      get { if ((_hasBits0 & 2) != 0) { return distance_; } else { return DistanceDefaultValue; } }
      set {
        _hasBits0 |= 2;
        distance_ = value;
      }
    }
    /// <summary>Gets whether the "distance" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDistance {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "distance" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDistance() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 3;
    private readonly static uint DirDefaultValue = 0;

    private uint dir_;
    /// <summary>
    /// 当前路口导航指令  0：直行，1：左转，2：右转，3：左掉头，4：右掉头，5：提前左转，6：提前右转，7：匝道
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Dir {
      get { if ((_hasBits0 & 4) != 0) { return dir_; } else { return DirDefaultValue; } }
      set {
        _hasBits0 |= 4;
        dir_ = value;
      }
    }
    /// <summary>Gets whether the "dir" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDir {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "dir" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDir() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "guidepoints" field.</summary>
    public const int GuidepointsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Xviewer.Point> _repeated_guidepoints_codec
        = pb::FieldCodec.ForMessage(34, global::Xviewer.Point.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.Point> guidepoints_ = new pbc::RepeatedField<global::Xviewer.Point>();
    /// <summary>
    /// 诱导点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.Point> Guidepoints {
      get { return guidepoints_; }
    }

    /// <summary>Field number for the "fromlanedir" field.</summary>
    public const int FromlanedirFieldNumber = 5;
    private static readonly pb::FieldCodec<uint> _repeated_fromlanedir_codec
        = pb::FieldCodec.ForUInt32(40);
    private readonly pbc::RepeatedField<uint> fromlanedir_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 进入路口所有车道导流方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Fromlanedir {
      get { return fromlanedir_; }
    }

    /// <summary>Field number for the "tolanedir" field.</summary>
    public const int TolanedirFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_tolanedir_codec
        = pb::FieldCodec.ForUInt32(48);
    private readonly pbc::RepeatedField<uint> tolanedir_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 离开路口所有车道导流方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Tolanedir {
      get { return tolanedir_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapCross);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapCross other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Distance, other.Distance)) return false;
      if (Dir != other.Dir) return false;
      if(!guidepoints_.Equals(other.guidepoints_)) return false;
      if(!fromlanedir_.Equals(other.fromlanedir_)) return false;
      if(!tolanedir_.Equals(other.tolanedir_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      if (HasDistance) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Distance);
      if (HasDir) hash ^= Dir.GetHashCode();
      hash ^= guidepoints_.GetHashCode();
      hash ^= fromlanedir_.GetHashCode();
      hash ^= tolanedir_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasType) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (HasDistance) {
        output.WriteRawTag(21);
        output.WriteFloat(Distance);
      }
      if (HasDir) {
        output.WriteRawTag(24);
        output.WriteUInt32(Dir);
      }
      guidepoints_.WriteTo(output, _repeated_guidepoints_codec);
      fromlanedir_.WriteTo(output, _repeated_fromlanedir_codec);
      tolanedir_.WriteTo(output, _repeated_tolanedir_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (HasDistance) {
        size += 1 + 4;
      }
      if (HasDir) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Dir);
      }
      size += guidepoints_.CalculateSize(_repeated_guidepoints_codec);
      size += fromlanedir_.CalculateSize(_repeated_fromlanedir_codec);
      size += tolanedir_.CalculateSize(_repeated_tolanedir_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapCross other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasDistance) {
        Distance = other.Distance;
      }
      if (other.HasDir) {
        Dir = other.Dir;
      }
      guidepoints_.Add(other.guidepoints_);
      fromlanedir_.Add(other.fromlanedir_);
      tolanedir_.Add(other.tolanedir_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 21: {
            Distance = input.ReadFloat();
            break;
          }
          case 24: {
            Dir = input.ReadUInt32();
            break;
          }
          case 34: {
            guidepoints_.AddEntriesFrom(input, _repeated_guidepoints_codec);
            break;
          }
          case 42:
          case 40: {
            fromlanedir_.AddEntriesFrom(input, _repeated_fromlanedir_codec);
            break;
          }
          case 50:
          case 48: {
            tolanedir_.AddEntriesFrom(input, _repeated_tolanedir_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MapRoads : pb::IMessage<MapRoads> {
    private static readonly pb::MessageParser<MapRoads> _parser = new pb::MessageParser<MapRoads>(() => new MapRoads());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapRoads> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.MapEngineReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRoads() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRoads(MapRoads other) : this() {
      roads_ = other.roads_.Clone();
      intersection_ = other.intersection_ != null ? other.intersection_.Clone() : null;
      crosses_ = other.crosses_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapRoads Clone() {
      return new MapRoads(this);
    }

    /// <summary>Field number for the "roads" field.</summary>
    public const int RoadsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Xviewer.MapRoad> _repeated_roads_codec
        = pb::FieldCodec.ForMessage(10, global::Xviewer.MapRoad.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.MapRoad> roads_ = new pbc::RepeatedField<global::Xviewer.MapRoad>();
    /// <summary>
    /// 道路结果集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.MapRoad> Roads {
      get { return roads_; }
    }

    /// <summary>Field number for the "intersection" field.</summary>
    public const int IntersectionFieldNumber = 2;
    private global::Xviewer.MapIntersection intersection_;
    /// <summary>
    /// 路口信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.MapIntersection Intersection {
      get { return intersection_; }
      set {
        intersection_ = value;
      }
    }

    /// <summary>Field number for the "crosses" field.</summary>
    public const int CrossesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Xviewer.MapCross> _repeated_crosses_codec
        = pb::FieldCodec.ForMessage(26, global::Xviewer.MapCross.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.MapCross> crosses_ = new pbc::RepeatedField<global::Xviewer.MapCross>();
    /// <summary>
    /// 前方路口信息合集
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.MapCross> Crosses {
      get { return crosses_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapRoads);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapRoads other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!roads_.Equals(other.roads_)) return false;
      if (!object.Equals(Intersection, other.Intersection)) return false;
      if(!crosses_.Equals(other.crosses_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= roads_.GetHashCode();
      if (intersection_ != null) hash ^= Intersection.GetHashCode();
      hash ^= crosses_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roads_.WriteTo(output, _repeated_roads_codec);
      if (intersection_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Intersection);
      }
      crosses_.WriteTo(output, _repeated_crosses_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roads_.CalculateSize(_repeated_roads_codec);
      if (intersection_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Intersection);
      }
      size += crosses_.CalculateSize(_repeated_crosses_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapRoads other) {
      if (other == null) {
        return;
      }
      roads_.Add(other.roads_);
      if (other.intersection_ != null) {
        if (intersection_ == null) {
          Intersection = new global::Xviewer.MapIntersection();
        }
        Intersection.MergeFrom(other.Intersection);
      }
      crosses_.Add(other.crosses_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            roads_.AddEntriesFrom(input, _repeated_roads_codec);
            break;
          }
          case 18: {
            if (intersection_ == null) {
              Intersection = new global::Xviewer.MapIntersection();
            }
            input.ReadMessage(Intersection);
            break;
          }
          case 26: {
            crosses_.AddEntriesFrom(input, _repeated_crosses_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MapTrafficObjectType : pb::IMessage<MapTrafficObjectType> {
    private static readonly pb::MessageParser<MapTrafficObjectType> _parser = new pb::MessageParser<MapTrafficObjectType>(() => new MapTrafficObjectType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapTrafficObjectType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.MapEngineReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapTrafficObjectType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapTrafficObjectType(MapTrafficObjectType other) : this() {
      type1_ = other.type1_;
      type2_ = other.type2_;
      type3_ = other.type3_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapTrafficObjectType Clone() {
      return new MapTrafficObjectType(this);
    }

    /// <summary>Field number for the "type1" field.</summary>
    public const int Type1FieldNumber = 1;
    private readonly static string Type1DefaultValue = "";

    private string type1_;
    /// <summary>
    ///#对象1级类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type1 {
      get { return type1_ ?? Type1DefaultValue; }
      set {
        type1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "type1" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType1 {
      get { return type1_ != null; }
    }
    /// <summary>Clears the value of the "type1" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType1() {
      type1_ = null;
    }

    /// <summary>Field number for the "type2" field.</summary>
    public const int Type2FieldNumber = 2;
    private readonly static string Type2DefaultValue = "";

    private string type2_;
    /// <summary>
    ///#对象2级类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type2 {
      get { return type2_ ?? Type2DefaultValue; }
      set {
        type2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "type2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType2 {
      get { return type2_ != null; }
    }
    /// <summary>Clears the value of the "type2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType2() {
      type2_ = null;
    }

    /// <summary>Field number for the "type3" field.</summary>
    public const int Type3FieldNumber = 3;
    private readonly static string Type3DefaultValue = "";

    private string type3_;
    /// <summary>
    ///#对象3级类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type3 {
      get { return type3_ ?? Type3DefaultValue; }
      set {
        type3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "type3" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType3 {
      get { return type3_ != null; }
    }
    /// <summary>Clears the value of the "type3" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType3() {
      type3_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapTrafficObjectType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapTrafficObjectType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type1 != other.Type1) return false;
      if (Type2 != other.Type2) return false;
      if (Type3 != other.Type3) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType1) hash ^= Type1.GetHashCode();
      if (HasType2) hash ^= Type2.GetHashCode();
      if (HasType3) hash ^= Type3.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasType1) {
        output.WriteRawTag(10);
        output.WriteString(Type1);
      }
      if (HasType2) {
        output.WriteRawTag(18);
        output.WriteString(Type2);
      }
      if (HasType3) {
        output.WriteRawTag(26);
        output.WriteString(Type3);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType1) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type1);
      }
      if (HasType2) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type2);
      }
      if (HasType3) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type3);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapTrafficObjectType other) {
      if (other == null) {
        return;
      }
      if (other.HasType1) {
        Type1 = other.Type1;
      }
      if (other.HasType2) {
        Type2 = other.Type2;
      }
      if (other.HasType3) {
        Type3 = other.Type3;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type1 = input.ReadString();
            break;
          }
          case 18: {
            Type2 = input.ReadString();
            break;
          }
          case 26: {
            Type3 = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MapTrafficObject : pb::IMessage<MapTrafficObject> {
    private static readonly pb::MessageParser<MapTrafficObject> _parser = new pb::MessageParser<MapTrafficObject>(() => new MapTrafficObject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapTrafficObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.MapEngineReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapTrafficObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapTrafficObject(MapTrafficObject other) : this() {
      id_ = other.id_;
      type_ = other.type_ != null ? other.type_.Clone() : null;
      name_ = other.name_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapTrafficObject Clone() {
      return new MapTrafficObject(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    /// <summary>
    /// 对象id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Xviewer.MapTrafficObjectType type_;
    /// <summary>
    /// 对象类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.MapTrafficObjectType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private readonly static string NameDefaultValue = "";

    private string name_;
    /// <summary>
    /// 对象名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 4;
    private global::Xviewer.Point position_;
    /// <summary>
    /// 对象位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Point Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapTrafficObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapTrafficObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Type, other.Type)) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(Position, other.Position)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (type_ != null) hash ^= Type.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (type_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Type);
      }
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (position_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Position);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (type_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapTrafficObject other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.type_ != null) {
        if (type_ == null) {
          Type = new global::Xviewer.MapTrafficObjectType();
        }
        Type.MergeFrom(other.Type);
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Xviewer.Point();
        }
        Position.MergeFrom(other.Position);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (type_ == null) {
              Type = new global::Xviewer.MapTrafficObjectType();
            }
            input.ReadMessage(Type);
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            if (position_ == null) {
              Position = new global::Xviewer.Point();
            }
            input.ReadMessage(Position);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MapTrafficObjects : pb::IMessage<MapTrafficObjects> {
    private static readonly pb::MessageParser<MapTrafficObjects> _parser = new pb::MessageParser<MapTrafficObjects>(() => new MapTrafficObjects());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapTrafficObjects> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.MapEngineReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapTrafficObjects() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapTrafficObjects(MapTrafficObjects other) : this() {
      _hasBits0 = other._hasBits0;
      objects_ = other.objects_.Clone();
      distance_ = other.distance_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapTrafficObjects Clone() {
      return new MapTrafficObjects(this);
    }

    /// <summary>Field number for the "objects" field.</summary>
    public const int ObjectsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Xviewer.MapTrafficObject> _repeated_objects_codec
        = pb::FieldCodec.ForMessage(10, global::Xviewer.MapTrafficObject.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.MapTrafficObject> objects_ = new pbc::RepeatedField<global::Xviewer.MapTrafficObject>();
    /// <summary>
    /// 对象类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.MapTrafficObject> Objects {
      get { return objects_; }
    }

    /// <summary>Field number for the "distance" field.</summary>
    public const int DistanceFieldNumber = 2;
    private readonly static int DistanceDefaultValue = 0;

    private int distance_;
    /// <summary>
    /// 预测距离
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Distance {
      get { if ((_hasBits0 & 1) != 0) { return distance_; } else { return DistanceDefaultValue; } }
      set {
        _hasBits0 |= 1;
        distance_ = value;
      }
    }
    /// <summary>Gets whether the "distance" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDistance {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "distance" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDistance() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapTrafficObjects);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapTrafficObjects other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!objects_.Equals(other.objects_)) return false;
      if (Distance != other.Distance) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= objects_.GetHashCode();
      if (HasDistance) hash ^= Distance.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      objects_.WriteTo(output, _repeated_objects_codec);
      if (HasDistance) {
        output.WriteRawTag(16);
        output.WriteInt32(Distance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += objects_.CalculateSize(_repeated_objects_codec);
      if (HasDistance) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Distance);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapTrafficObjects other) {
      if (other == null) {
        return;
      }
      objects_.Add(other.objects_);
      if (other.HasDistance) {
        Distance = other.Distance;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            objects_.AddEntriesFrom(input, _repeated_objects_codec);
            break;
          }
          case 16: {
            Distance = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MapLane : pb::IMessage<MapLane> {
    private static readonly pb::MessageParser<MapLane> _parser = new pb::MessageParser<MapLane>(() => new MapLane());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapLane> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.MapEngineReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapLane() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapLane(MapLane other) : this() {
      _hasBits0 = other._hasBits0;
      laneId_ = other.laneId_;
      type_ = other.type_;
      width_ = other.width_;
      diversion_ = other.diversion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapLane Clone() {
      return new MapLane(this);
    }

    /// <summary>Field number for the "lane_id" field.</summary>
    public const int LaneIdFieldNumber = 1;
    private readonly static int LaneIdDefaultValue = 0;

    private int laneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LaneId {
      get { if ((_hasBits0 & 1) != 0) { return laneId_; } else { return LaneIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        laneId_ = value;
      }
    }
    /// <summary>Gets whether the "lane_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLaneId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "lane_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLaneId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private readonly static uint TypeDefaultValue = 0;

    private uint type_;
    /// <summary>
    ///车道类型(普通0,1限行,2人行横道,3禁行区域)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { if ((_hasBits0 & 2) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 3;
    private readonly static double WidthDefaultValue = 0D;

    private double width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Width {
      get { if ((_hasBits0 & 4) != 0) { return width_; } else { return WidthDefaultValue; } }
      set {
        _hasBits0 |= 4;
        width_ = value;
      }
    }
    /// <summary>Gets whether the "width" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWidth {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "width" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWidth() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "diversion" field.</summary>
    public const int DiversionFieldNumber = 4;
    private readonly static uint DiversionDefaultValue = 0;

    private uint diversion_;
    /// <summary>
    ///车道导流方向(直行0, 左转1, 直行+左转2, 右转3, 直行+右转4, 左掉头5, 左转+右转6, 直行+左转+右转7, 右掉头8, 直行+左掉头9, 直行+右掉头10, 左转+左掉头11, 右转+右掉头12 直行+左转+左掉头13 直行+左转+左掉头+右转14 （辅路进主路）15（主路进辅路）16)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Diversion {
      get { if ((_hasBits0 & 8) != 0) { return diversion_; } else { return DiversionDefaultValue; } }
      set {
        _hasBits0 |= 8;
        diversion_ = value;
      }
    }
    /// <summary>Gets whether the "diversion" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDiversion {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "diversion" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDiversion() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapLane);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapLane other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LaneId != other.LaneId) return false;
      if (Type != other.Type) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Width, other.Width)) return false;
      if (Diversion != other.Diversion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLaneId) hash ^= LaneId.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (HasWidth) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Width);
      if (HasDiversion) hash ^= Diversion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasLaneId) {
        output.WriteRawTag(8);
        output.WriteInt32(LaneId);
      }
      if (HasType) {
        output.WriteRawTag(16);
        output.WriteUInt32(Type);
      }
      if (HasWidth) {
        output.WriteRawTag(25);
        output.WriteDouble(Width);
      }
      if (HasDiversion) {
        output.WriteRawTag(32);
        output.WriteUInt32(Diversion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasLaneId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LaneId);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (HasWidth) {
        size += 1 + 8;
      }
      if (HasDiversion) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Diversion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapLane other) {
      if (other == null) {
        return;
      }
      if (other.HasLaneId) {
        LaneId = other.LaneId;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasWidth) {
        Width = other.Width;
      }
      if (other.HasDiversion) {
        Diversion = other.Diversion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LaneId = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadUInt32();
            break;
          }
          case 25: {
            Width = input.ReadDouble();
            break;
          }
          case 32: {
            Diversion = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// --- 地图 ---
  /// </summary>
  public sealed partial class MapEngine : pb::IMessage<MapEngine> {
    private static readonly pb::MessageParser<MapEngine> _parser = new pb::MessageParser<MapEngine>(() => new MapEngine());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapEngine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.MapEngineReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapEngine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapEngine(MapEngine other) : this() {
      routingPath_ = other.routingPath_ != null ? other.routingPath_.Clone() : null;
      mapStations_ = other.mapStations_.Clone();
      predictRoads_ = other.predictRoads_ != null ? other.predictRoads_.Clone() : null;
      predictObjects_ = other.predictObjects_ != null ? other.predictObjects_.Clone() : null;
      pubRoads_ = other.pubRoads_ != null ? other.pubRoads_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapEngine Clone() {
      return new MapEngine(this);
    }

    /// <summary>Field number for the "routing_path" field.</summary>
    public const int RoutingPathFieldNumber = 1;
    private global::Xviewer.PathPlanResult routingPath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.PathPlanResult RoutingPath {
      get { return routingPath_; }
      set {
        routingPath_ = value;
      }
    }

    /// <summary>Field number for the "map_stations" field.</summary>
    public const int MapStationsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xviewer.MapStation> _repeated_mapStations_codec
        = pb::FieldCodec.ForMessage(18, global::Xviewer.MapStation.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.MapStation> mapStations_ = new pbc::RepeatedField<global::Xviewer.MapStation>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.MapStation> MapStations {
      get { return mapStations_; }
    }

    /// <summary>Field number for the "predict_roads" field.</summary>
    public const int PredictRoadsFieldNumber = 3;
    private global::Xviewer.MapRoads predictRoads_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.MapRoads PredictRoads {
      get { return predictRoads_; }
      set {
        predictRoads_ = value;
      }
    }

    /// <summary>Field number for the "predict_objects" field.</summary>
    public const int PredictObjectsFieldNumber = 4;
    private global::Xviewer.MapTrafficObjects predictObjects_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.MapTrafficObjects PredictObjects {
      get { return predictObjects_; }
      set {
        predictObjects_ = value;
      }
    }

    /// <summary>Field number for the "pub_roads" field.</summary>
    public const int PubRoadsFieldNumber = 5;
    private global::Xviewer.MapRoads pubRoads_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.MapRoads PubRoads {
      get { return pubRoads_; }
      set {
        pubRoads_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapEngine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapEngine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoutingPath, other.RoutingPath)) return false;
      if(!mapStations_.Equals(other.mapStations_)) return false;
      if (!object.Equals(PredictRoads, other.PredictRoads)) return false;
      if (!object.Equals(PredictObjects, other.PredictObjects)) return false;
      if (!object.Equals(PubRoads, other.PubRoads)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (routingPath_ != null) hash ^= RoutingPath.GetHashCode();
      hash ^= mapStations_.GetHashCode();
      if (predictRoads_ != null) hash ^= PredictRoads.GetHashCode();
      if (predictObjects_ != null) hash ^= PredictObjects.GetHashCode();
      if (pubRoads_ != null) hash ^= PubRoads.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (routingPath_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoutingPath);
      }
      mapStations_.WriteTo(output, _repeated_mapStations_codec);
      if (predictRoads_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PredictRoads);
      }
      if (predictObjects_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PredictObjects);
      }
      if (pubRoads_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PubRoads);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (routingPath_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoutingPath);
      }
      size += mapStations_.CalculateSize(_repeated_mapStations_codec);
      if (predictRoads_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PredictRoads);
      }
      if (predictObjects_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PredictObjects);
      }
      if (pubRoads_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PubRoads);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapEngine other) {
      if (other == null) {
        return;
      }
      if (other.routingPath_ != null) {
        if (routingPath_ == null) {
          RoutingPath = new global::Xviewer.PathPlanResult();
        }
        RoutingPath.MergeFrom(other.RoutingPath);
      }
      mapStations_.Add(other.mapStations_);
      if (other.predictRoads_ != null) {
        if (predictRoads_ == null) {
          PredictRoads = new global::Xviewer.MapRoads();
        }
        PredictRoads.MergeFrom(other.PredictRoads);
      }
      if (other.predictObjects_ != null) {
        if (predictObjects_ == null) {
          PredictObjects = new global::Xviewer.MapTrafficObjects();
        }
        PredictObjects.MergeFrom(other.PredictObjects);
      }
      if (other.pubRoads_ != null) {
        if (pubRoads_ == null) {
          PubRoads = new global::Xviewer.MapRoads();
        }
        PubRoads.MergeFrom(other.PubRoads);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (routingPath_ == null) {
              RoutingPath = new global::Xviewer.PathPlanResult();
            }
            input.ReadMessage(RoutingPath);
            break;
          }
          case 18: {
            mapStations_.AddEntriesFrom(input, _repeated_mapStations_codec);
            break;
          }
          case 26: {
            if (predictRoads_ == null) {
              PredictRoads = new global::Xviewer.MapRoads();
            }
            input.ReadMessage(PredictRoads);
            break;
          }
          case 34: {
            if (predictObjects_ == null) {
              PredictObjects = new global::Xviewer.MapTrafficObjects();
            }
            input.ReadMessage(PredictObjects);
            break;
          }
          case 42: {
            if (pubRoads_ == null) {
              PubRoads = new global::Xviewer.MapRoads();
            }
            input.ReadMessage(PubRoads);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
