// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: hmi.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Xviewer {

  /// <summary>Holder for reflection information generated from hmi.proto</summary>
  public static partial class HmiReflection {

    #region Descriptor
    /// <summary>File descriptor for hmi.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HmiReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglobWkucHJvdG8SB3h2aWV3ZXIaDGJhc2ljcy5wcm90byK6AQoGRWdvQ2Fy",
            "EgoKAmlkGAEgASgJEg8KB2hlYWRpbmcYAiABKAESEgoKcG9zaXRpb25feBgD",
            "IAEoARISCgpwb3NpdGlvbl95GAQgASgBEh0KBXNwZWVkGAUgASgLMg4ueHZp",
            "ZXdlci5Qb2ludBIqChJzcGVlZF9hY2NlbGVyYXRpb24YBiABKAsyDi54dmll",
            "d2VyLlBvaW50EiAKBHRpbWUYByABKAsyEi54dmlld2VyLlRpbWVXb3JsZCI/",
            "CgpSb3NiYWdJbmZvEhUKDXJvc2JhZ19zdGF0dXMYASABKAgSGgoScm9zYmFn",
            "X2ZvbGRlcl9uYW1lGAIgASgJImsKCVRvcGljSW5mbxISCgp0b3BpY19uYW1l",
            "GAEgASgJEhQKDHRvcGljX3N0YXR1cxgCIAEoCBIXCg90b3BpY19mcmVxdWVu",
            "Y3kYAyABKAESGwoTdG9waWNfcHVibGlzaGVyX251bRgEIAEoBSKLAgoDSG1p",
            "EhoKEmtleV9jaG9vc2VfY2FycG9ydBgBIAEoBRIVCg1yb3NiYWdfcmVjb3Jk",
            "GAIgASgFEh8KF3VzZXJfY29udHJvbGxlZF9hY3Rpb25zGAMgASgFEg0KBWNs",
            "ZWFyGAQgASgFEhQKDHN5c3RlbV9vcmRlchgFIAEoBRIVCg1zdGFydF9wb2lu",
            "dF94GAYgASgBEhUKDXN0YXJ0X3BvaW50X3kYByABKAESFgoOdGFyZ2V0X3Bv",
            "aW50X3gYCCABKAESFgoOdGFyZ2V0X3BvaW50X3kYCSABKAESFgoOY3VycmVu",
            "dF9zdGF0dXMYCiABKAUSFQoNc3RhcnRfdXBfbW9kZRgLIAEoBQ=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Xviewer.BasicsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.EgoCar), global::Xviewer.EgoCar.Parser, new[]{ "Id", "Heading", "PositionX", "PositionY", "Speed", "SpeedAcceleration", "Time" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.RosbagInfo), global::Xviewer.RosbagInfo.Parser, new[]{ "RosbagStatus", "RosbagFolderName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.TopicInfo), global::Xviewer.TopicInfo.Parser, new[]{ "TopicName", "TopicStatus", "TopicFrequency", "TopicPublisherNum" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.Hmi), global::Xviewer.Hmi.Parser, new[]{ "KeyChooseCarport", "RosbagRecord", "UserControlledActions", "Clear", "SystemOrder", "StartPointX", "StartPointY", "TargetPointX", "TargetPointY", "CurrentStatus", "StartUpMode" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// ------------------------- Ego Car -------------------------- //
  /// </summary>
  public sealed partial class EgoCar : pb::IMessage<EgoCar> {
    private static readonly pb::MessageParser<EgoCar> _parser = new pb::MessageParser<EgoCar>(() => new EgoCar());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EgoCar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.HmiReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgoCar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgoCar(EgoCar other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      heading_ = other.heading_;
      positionX_ = other.positionX_;
      positionY_ = other.positionY_;
      speed_ = other.speed_ != null ? other.speed_.Clone() : null;
      speedAcceleration_ = other.speedAcceleration_ != null ? other.speedAcceleration_.Clone() : null;
      time_ = other.time_ != null ? other.time_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EgoCar Clone() {
      return new EgoCar(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    /// <summary>
    /// ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "heading" field.</summary>
    public const int HeadingFieldNumber = 2;
    private readonly static double HeadingDefaultValue = 0D;

    private double heading_;
    /// <summary>
    /// Position Info
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Heading {
      get { if ((_hasBits0 & 1) != 0) { return heading_; } else { return HeadingDefaultValue; } }
      set {
        _hasBits0 |= 1;
        heading_ = value;
      }
    }
    /// <summary>Gets whether the "heading" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeading {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "heading" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeading() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "position_x" field.</summary>
    public const int PositionXFieldNumber = 3;
    private readonly static double PositionXDefaultValue = 0D;

    private double positionX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PositionX {
      get { if ((_hasBits0 & 2) != 0) { return positionX_; } else { return PositionXDefaultValue; } }
      set {
        _hasBits0 |= 2;
        positionX_ = value;
      }
    }
    /// <summary>Gets whether the "position_x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPositionX {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "position_x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPositionX() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "position_y" field.</summary>
    public const int PositionYFieldNumber = 4;
    private readonly static double PositionYDefaultValue = 0D;

    private double positionY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PositionY {
      get { if ((_hasBits0 & 4) != 0) { return positionY_; } else { return PositionYDefaultValue; } }
      set {
        _hasBits0 |= 4;
        positionY_ = value;
      }
    }
    /// <summary>Gets whether the "position_y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPositionY {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "position_y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPositionY() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 5;
    private global::Xviewer.Point speed_;
    /// <summary>
    /// in m/s, can be negative
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Point Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "speed_acceleration" field.</summary>
    public const int SpeedAccelerationFieldNumber = 6;
    private global::Xviewer.Point speedAcceleration_;
    /// <summary>
    /// in m/s^2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.Point SpeedAcceleration {
      get { return speedAcceleration_; }
      set {
        speedAcceleration_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 7;
    private global::Xviewer.TimeWorld time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.TimeWorld Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EgoCar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EgoCar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Heading, other.Heading)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PositionX, other.PositionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PositionY, other.PositionY)) return false;
      if (!object.Equals(Speed, other.Speed)) return false;
      if (!object.Equals(SpeedAcceleration, other.SpeedAcceleration)) return false;
      if (!object.Equals(Time, other.Time)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasHeading) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Heading);
      if (HasPositionX) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PositionX);
      if (HasPositionY) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PositionY);
      if (speed_ != null) hash ^= Speed.GetHashCode();
      if (speedAcceleration_ != null) hash ^= SpeedAcceleration.GetHashCode();
      if (time_ != null) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasHeading) {
        output.WriteRawTag(17);
        output.WriteDouble(Heading);
      }
      if (HasPositionX) {
        output.WriteRawTag(25);
        output.WriteDouble(PositionX);
      }
      if (HasPositionY) {
        output.WriteRawTag(33);
        output.WriteDouble(PositionY);
      }
      if (speed_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Speed);
      }
      if (speedAcceleration_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(SpeedAcceleration);
      }
      if (time_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (HasHeading) {
        size += 1 + 8;
      }
      if (HasPositionX) {
        size += 1 + 8;
      }
      if (HasPositionY) {
        size += 1 + 8;
      }
      if (speed_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Speed);
      }
      if (speedAcceleration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpeedAcceleration);
      }
      if (time_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EgoCar other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasHeading) {
        Heading = other.Heading;
      }
      if (other.HasPositionX) {
        PositionX = other.PositionX;
      }
      if (other.HasPositionY) {
        PositionY = other.PositionY;
      }
      if (other.speed_ != null) {
        if (speed_ == null) {
          Speed = new global::Xviewer.Point();
        }
        Speed.MergeFrom(other.Speed);
      }
      if (other.speedAcceleration_ != null) {
        if (speedAcceleration_ == null) {
          SpeedAcceleration = new global::Xviewer.Point();
        }
        SpeedAcceleration.MergeFrom(other.SpeedAcceleration);
      }
      if (other.time_ != null) {
        if (time_ == null) {
          Time = new global::Xviewer.TimeWorld();
        }
        Time.MergeFrom(other.Time);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 17: {
            Heading = input.ReadDouble();
            break;
          }
          case 25: {
            PositionX = input.ReadDouble();
            break;
          }
          case 33: {
            PositionY = input.ReadDouble();
            break;
          }
          case 42: {
            if (speed_ == null) {
              Speed = new global::Xviewer.Point();
            }
            input.ReadMessage(Speed);
            break;
          }
          case 50: {
            if (speedAcceleration_ == null) {
              SpeedAcceleration = new global::Xviewer.Point();
            }
            input.ReadMessage(SpeedAcceleration);
            break;
          }
          case 58: {
            if (time_ == null) {
              Time = new global::Xviewer.TimeWorld();
            }
            input.ReadMessage(Time);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RosbagInfo : pb::IMessage<RosbagInfo> {
    private static readonly pb::MessageParser<RosbagInfo> _parser = new pb::MessageParser<RosbagInfo>(() => new RosbagInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RosbagInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.HmiReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RosbagInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RosbagInfo(RosbagInfo other) : this() {
      _hasBits0 = other._hasBits0;
      rosbagStatus_ = other.rosbagStatus_;
      rosbagFolderName_ = other.rosbagFolderName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RosbagInfo Clone() {
      return new RosbagInfo(this);
    }

    /// <summary>Field number for the "rosbag_status" field.</summary>
    public const int RosbagStatusFieldNumber = 1;
    private readonly static bool RosbagStatusDefaultValue = false;

    private bool rosbagStatus_;
    /// <summary>
    /// rosbag 当前录制状态， true 录制中， false 非录制中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RosbagStatus {
      get { if ((_hasBits0 & 1) != 0) { return rosbagStatus_; } else { return RosbagStatusDefaultValue; } }
      set {
        _hasBits0 |= 1;
        rosbagStatus_ = value;
      }
    }
    /// <summary>Gets whether the "rosbag_status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRosbagStatus {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "rosbag_status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRosbagStatus() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "rosbag_folder_name" field.</summary>
    public const int RosbagFolderNameFieldNumber = 2;
    private readonly static string RosbagFolderNameDefaultValue = "";

    private string rosbagFolderName_;
    /// <summary>
    /// rosbag 文件夹名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RosbagFolderName {
      get { return rosbagFolderName_ ?? RosbagFolderNameDefaultValue; }
      set {
        rosbagFolderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "rosbag_folder_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRosbagFolderName {
      get { return rosbagFolderName_ != null; }
    }
    /// <summary>Clears the value of the "rosbag_folder_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRosbagFolderName() {
      rosbagFolderName_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RosbagInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RosbagInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RosbagStatus != other.RosbagStatus) return false;
      if (RosbagFolderName != other.RosbagFolderName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRosbagStatus) hash ^= RosbagStatus.GetHashCode();
      if (HasRosbagFolderName) hash ^= RosbagFolderName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasRosbagStatus) {
        output.WriteRawTag(8);
        output.WriteBool(RosbagStatus);
      }
      if (HasRosbagFolderName) {
        output.WriteRawTag(18);
        output.WriteString(RosbagFolderName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRosbagStatus) {
        size += 1 + 1;
      }
      if (HasRosbagFolderName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RosbagFolderName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RosbagInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasRosbagStatus) {
        RosbagStatus = other.RosbagStatus;
      }
      if (other.HasRosbagFolderName) {
        RosbagFolderName = other.RosbagFolderName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RosbagStatus = input.ReadBool();
            break;
          }
          case 18: {
            RosbagFolderName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ----------------  话题信息 消息结构 --------------------//
  /// </summary>
  public sealed partial class TopicInfo : pb::IMessage<TopicInfo> {
    private static readonly pb::MessageParser<TopicInfo> _parser = new pb::MessageParser<TopicInfo>(() => new TopicInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TopicInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.HmiReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopicInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopicInfo(TopicInfo other) : this() {
      _hasBits0 = other._hasBits0;
      topicName_ = other.topicName_;
      topicStatus_ = other.topicStatus_;
      topicFrequency_ = other.topicFrequency_;
      topicPublisherNum_ = other.topicPublisherNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopicInfo Clone() {
      return new TopicInfo(this);
    }

    /// <summary>Field number for the "topic_name" field.</summary>
    public const int TopicNameFieldNumber = 1;
    private readonly static string TopicNameDefaultValue = "";

    private string topicName_;
    /// <summary>
    /// 话题 名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TopicName {
      get { return topicName_ ?? TopicNameDefaultValue; }
      set {
        topicName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "topic_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTopicName {
      get { return topicName_ != null; }
    }
    /// <summary>Clears the value of the "topic_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTopicName() {
      topicName_ = null;
    }

    /// <summary>Field number for the "topic_status" field.</summary>
    public const int TopicStatusFieldNumber = 2;
    private readonly static bool TopicStatusDefaultValue = false;

    private bool topicStatus_;
    /// <summary>
    /// 话题 接收状态 false 失败, true 正常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TopicStatus {
      get { if ((_hasBits0 & 1) != 0) { return topicStatus_; } else { return TopicStatusDefaultValue; } }
      set {
        _hasBits0 |= 1;
        topicStatus_ = value;
      }
    }
    /// <summary>Gets whether the "topic_status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTopicStatus {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "topic_status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTopicStatus() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "topic_frequency" field.</summary>
    public const int TopicFrequencyFieldNumber = 3;
    private readonly static double TopicFrequencyDefaultValue = 0D;

    private double topicFrequency_;
    /// <summary>
    /// 话题 频率 hz
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TopicFrequency {
      get { if ((_hasBits0 & 2) != 0) { return topicFrequency_; } else { return TopicFrequencyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        topicFrequency_ = value;
      }
    }
    /// <summary>Gets whether the "topic_frequency" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTopicFrequency {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "topic_frequency" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTopicFrequency() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "topic_publisher_num" field.</summary>
    public const int TopicPublisherNumFieldNumber = 4;
    private readonly static int TopicPublisherNumDefaultValue = 0;

    private int topicPublisherNum_;
    /// <summary>
    /// 话题 发布者数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TopicPublisherNum {
      get { if ((_hasBits0 & 4) != 0) { return topicPublisherNum_; } else { return TopicPublisherNumDefaultValue; } }
      set {
        _hasBits0 |= 4;
        topicPublisherNum_ = value;
      }
    }
    /// <summary>Gets whether the "topic_publisher_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTopicPublisherNum {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "topic_publisher_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTopicPublisherNum() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TopicInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TopicInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TopicName != other.TopicName) return false;
      if (TopicStatus != other.TopicStatus) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TopicFrequency, other.TopicFrequency)) return false;
      if (TopicPublisherNum != other.TopicPublisherNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTopicName) hash ^= TopicName.GetHashCode();
      if (HasTopicStatus) hash ^= TopicStatus.GetHashCode();
      if (HasTopicFrequency) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TopicFrequency);
      if (HasTopicPublisherNum) hash ^= TopicPublisherNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTopicName) {
        output.WriteRawTag(10);
        output.WriteString(TopicName);
      }
      if (HasTopicStatus) {
        output.WriteRawTag(16);
        output.WriteBool(TopicStatus);
      }
      if (HasTopicFrequency) {
        output.WriteRawTag(25);
        output.WriteDouble(TopicFrequency);
      }
      if (HasTopicPublisherNum) {
        output.WriteRawTag(32);
        output.WriteInt32(TopicPublisherNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTopicName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TopicName);
      }
      if (HasTopicStatus) {
        size += 1 + 1;
      }
      if (HasTopicFrequency) {
        size += 1 + 8;
      }
      if (HasTopicPublisherNum) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TopicPublisherNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TopicInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasTopicName) {
        TopicName = other.TopicName;
      }
      if (other.HasTopicStatus) {
        TopicStatus = other.TopicStatus;
      }
      if (other.HasTopicFrequency) {
        TopicFrequency = other.TopicFrequency;
      }
      if (other.HasTopicPublisherNum) {
        TopicPublisherNum = other.TopicPublisherNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TopicName = input.ReadString();
            break;
          }
          case 16: {
            TopicStatus = input.ReadBool();
            break;
          }
          case 25: {
            TopicFrequency = input.ReadDouble();
            break;
          }
          case 32: {
            TopicPublisherNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ----------------  HMI消息结构 --------------------//
  /// </summary>
  public sealed partial class Hmi : pb::IMessage<Hmi> {
    private static readonly pb::MessageParser<Hmi> _parser = new pb::MessageParser<Hmi>(() => new Hmi());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Hmi> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.HmiReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hmi() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hmi(Hmi other) : this() {
      _hasBits0 = other._hasBits0;
      keyChooseCarport_ = other.keyChooseCarport_;
      rosbagRecord_ = other.rosbagRecord_;
      userControlledActions_ = other.userControlledActions_;
      clear_ = other.clear_;
      systemOrder_ = other.systemOrder_;
      startPointX_ = other.startPointX_;
      startPointY_ = other.startPointY_;
      targetPointX_ = other.targetPointX_;
      targetPointY_ = other.targetPointY_;
      currentStatus_ = other.currentStatus_;
      startUpMode_ = other.startUpMode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hmi Clone() {
      return new Hmi(this);
    }

    /// <summary>Field number for the "key_choose_carport" field.</summary>
    public const int KeyChooseCarportFieldNumber = 1;
    private readonly static int KeyChooseCarportDefaultValue = 0;

    private int keyChooseCarport_;
    /// <summary>
    /// 选择车位泊车: -1 开始泊车, 0 ~ 20 车位ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KeyChooseCarport {
      get { if ((_hasBits0 & 1) != 0) { return keyChooseCarport_; } else { return KeyChooseCarportDefaultValue; } }
      set {
        _hasBits0 |= 1;
        keyChooseCarport_ = value;
      }
    }
    /// <summary>Gets whether the "key_choose_carport" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKeyChooseCarport {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "key_choose_carport" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKeyChooseCarport() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "rosbag_record" field.</summary>
    public const int RosbagRecordFieldNumber = 2;
    private readonly static int RosbagRecordDefaultValue = 0;

    private int rosbagRecord_;
    /// <summary>
    /// rosbag包录制状态: 0 空闲状态, 1 录制中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RosbagRecord {
      get { if ((_hasBits0 & 2) != 0) { return rosbagRecord_; } else { return RosbagRecordDefaultValue; } }
      set {
        _hasBits0 |= 2;
        rosbagRecord_ = value;
      }
    }
    /// <summary>Gets whether the "rosbag_record" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRosbagRecord {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "rosbag_record" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRosbagRecord() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "user_controlled_actions" field.</summary>
    public const int UserControlledActionsFieldNumber = 3;
    private readonly static int UserControlledActionsDefaultValue = 0;

    private int userControlledActions_;
    /// <summary>
    /// 用户控制操作: 13 刷新Apa感知信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserControlledActions {
      get { if ((_hasBits0 & 4) != 0) { return userControlledActions_; } else { return UserControlledActionsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        userControlledActions_ = value;
      }
    }
    /// <summary>Gets whether the "user_controlled_actions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUserControlledActions {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "user_controlled_actions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUserControlledActions() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "clear" field.</summary>
    public const int ClearFieldNumber = 4;
    private readonly static int ClearDefaultValue = 0;

    private int clear_;
    /// <summary>
    /// 清空画面: 0 默认, 1 清空
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Clear {
      get { if ((_hasBits0 & 8) != 0) { return clear_; } else { return ClearDefaultValue; } }
      set {
        _hasBits0 |= 8;
        clear_ = value;
      }
    }
    /// <summary>Gets whether the "clear" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClear {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "clear" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClear() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "system_order" field.</summary>
    public const int SystemOrderFieldNumber = 5;
    private readonly static int SystemOrderDefaultValue = 0;

    private int systemOrder_;
    /// <summary>
    /// 系统模式： 1 自动驾驶模式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SystemOrder {
      get { if ((_hasBits0 & 16) != 0) { return systemOrder_; } else { return SystemOrderDefaultValue; } }
      set {
        _hasBits0 |= 16;
        systemOrder_ = value;
      }
    }
    /// <summary>Gets whether the "system_order" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSystemOrder {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "system_order" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSystemOrder() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "start_point_x" field.</summary>
    public const int StartPointXFieldNumber = 6;
    private readonly static double StartPointXDefaultValue = 0D;

    private double startPointX_;
    /// <summary>
    /// 行车路径 起始点 x
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StartPointX {
      get { if ((_hasBits0 & 32) != 0) { return startPointX_; } else { return StartPointXDefaultValue; } }
      set {
        _hasBits0 |= 32;
        startPointX_ = value;
      }
    }
    /// <summary>Gets whether the "start_point_x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStartPointX {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "start_point_x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStartPointX() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "start_point_y" field.</summary>
    public const int StartPointYFieldNumber = 7;
    private readonly static double StartPointYDefaultValue = 0D;

    private double startPointY_;
    /// <summary>
    /// 行车路径 起始点 y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StartPointY {
      get { if ((_hasBits0 & 64) != 0) { return startPointY_; } else { return StartPointYDefaultValue; } }
      set {
        _hasBits0 |= 64;
        startPointY_ = value;
      }
    }
    /// <summary>Gets whether the "start_point_y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStartPointY {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "start_point_y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStartPointY() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "target_point_x" field.</summary>
    public const int TargetPointXFieldNumber = 8;
    private readonly static double TargetPointXDefaultValue = 0D;

    private double targetPointX_;
    /// <summary>
    /// 行车路径 目标点 x
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TargetPointX {
      get { if ((_hasBits0 & 128) != 0) { return targetPointX_; } else { return TargetPointXDefaultValue; } }
      set {
        _hasBits0 |= 128;
        targetPointX_ = value;
      }
    }
    /// <summary>Gets whether the "target_point_x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetPointX {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "target_point_x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetPointX() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "target_point_y" field.</summary>
    public const int TargetPointYFieldNumber = 9;
    private readonly static double TargetPointYDefaultValue = 0D;

    private double targetPointY_;
    /// <summary>
    /// 行车路径 目标点 y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TargetPointY {
      get { if ((_hasBits0 & 256) != 0) { return targetPointY_; } else { return TargetPointYDefaultValue; } }
      set {
        _hasBits0 |= 256;
        targetPointY_ = value;
      }
    }
    /// <summary>Gets whether the "target_point_y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetPointY {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "target_point_y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetPointY() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "current_status" field.</summary>
    public const int CurrentStatusFieldNumber = 10;
    private readonly static int CurrentStatusDefaultValue = 0;

    private int currentStatus_;
    /// <summary>
    /// HMI 自定义当前状态: 0 行车 (默认), 1 泊车
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentStatus {
      get { if ((_hasBits0 & 512) != 0) { return currentStatus_; } else { return CurrentStatusDefaultValue; } }
      set {
        _hasBits0 |= 512;
        currentStatus_ = value;
      }
    }
    /// <summary>Gets whether the "current_status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCurrentStatus {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "current_status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCurrentStatus() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "start_up_mode" field.</summary>
    public const int StartUpModeFieldNumber = 11;
    private readonly static int StartUpModeDefaultValue = 0;

    private int startUpMode_;
    /// <summary>
    /// 启动模式：0 关闭， 1 启动窄车位泊车项目，2 启动园区项目， 3 启动行车项目
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartUpMode {
      get { if ((_hasBits0 & 1024) != 0) { return startUpMode_; } else { return StartUpModeDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        startUpMode_ = value;
      }
    }
    /// <summary>Gets whether the "start_up_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStartUpMode {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "start_up_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStartUpMode() {
      _hasBits0 &= ~1024;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Hmi);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Hmi other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KeyChooseCarport != other.KeyChooseCarport) return false;
      if (RosbagRecord != other.RosbagRecord) return false;
      if (UserControlledActions != other.UserControlledActions) return false;
      if (Clear != other.Clear) return false;
      if (SystemOrder != other.SystemOrder) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StartPointX, other.StartPointX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StartPointY, other.StartPointY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TargetPointX, other.TargetPointX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TargetPointY, other.TargetPointY)) return false;
      if (CurrentStatus != other.CurrentStatus) return false;
      if (StartUpMode != other.StartUpMode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasKeyChooseCarport) hash ^= KeyChooseCarport.GetHashCode();
      if (HasRosbagRecord) hash ^= RosbagRecord.GetHashCode();
      if (HasUserControlledActions) hash ^= UserControlledActions.GetHashCode();
      if (HasClear) hash ^= Clear.GetHashCode();
      if (HasSystemOrder) hash ^= SystemOrder.GetHashCode();
      if (HasStartPointX) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StartPointX);
      if (HasStartPointY) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StartPointY);
      if (HasTargetPointX) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TargetPointX);
      if (HasTargetPointY) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TargetPointY);
      if (HasCurrentStatus) hash ^= CurrentStatus.GetHashCode();
      if (HasStartUpMode) hash ^= StartUpMode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasKeyChooseCarport) {
        output.WriteRawTag(8);
        output.WriteInt32(KeyChooseCarport);
      }
      if (HasRosbagRecord) {
        output.WriteRawTag(16);
        output.WriteInt32(RosbagRecord);
      }
      if (HasUserControlledActions) {
        output.WriteRawTag(24);
        output.WriteInt32(UserControlledActions);
      }
      if (HasClear) {
        output.WriteRawTag(32);
        output.WriteInt32(Clear);
      }
      if (HasSystemOrder) {
        output.WriteRawTag(40);
        output.WriteInt32(SystemOrder);
      }
      if (HasStartPointX) {
        output.WriteRawTag(49);
        output.WriteDouble(StartPointX);
      }
      if (HasStartPointY) {
        output.WriteRawTag(57);
        output.WriteDouble(StartPointY);
      }
      if (HasTargetPointX) {
        output.WriteRawTag(65);
        output.WriteDouble(TargetPointX);
      }
      if (HasTargetPointY) {
        output.WriteRawTag(73);
        output.WriteDouble(TargetPointY);
      }
      if (HasCurrentStatus) {
        output.WriteRawTag(80);
        output.WriteInt32(CurrentStatus);
      }
      if (HasStartUpMode) {
        output.WriteRawTag(88);
        output.WriteInt32(StartUpMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasKeyChooseCarport) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KeyChooseCarport);
      }
      if (HasRosbagRecord) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RosbagRecord);
      }
      if (HasUserControlledActions) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserControlledActions);
      }
      if (HasClear) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Clear);
      }
      if (HasSystemOrder) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SystemOrder);
      }
      if (HasStartPointX) {
        size += 1 + 8;
      }
      if (HasStartPointY) {
        size += 1 + 8;
      }
      if (HasTargetPointX) {
        size += 1 + 8;
      }
      if (HasTargetPointY) {
        size += 1 + 8;
      }
      if (HasCurrentStatus) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentStatus);
      }
      if (HasStartUpMode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartUpMode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Hmi other) {
      if (other == null) {
        return;
      }
      if (other.HasKeyChooseCarport) {
        KeyChooseCarport = other.KeyChooseCarport;
      }
      if (other.HasRosbagRecord) {
        RosbagRecord = other.RosbagRecord;
      }
      if (other.HasUserControlledActions) {
        UserControlledActions = other.UserControlledActions;
      }
      if (other.HasClear) {
        Clear = other.Clear;
      }
      if (other.HasSystemOrder) {
        SystemOrder = other.SystemOrder;
      }
      if (other.HasStartPointX) {
        StartPointX = other.StartPointX;
      }
      if (other.HasStartPointY) {
        StartPointY = other.StartPointY;
      }
      if (other.HasTargetPointX) {
        TargetPointX = other.TargetPointX;
      }
      if (other.HasTargetPointY) {
        TargetPointY = other.TargetPointY;
      }
      if (other.HasCurrentStatus) {
        CurrentStatus = other.CurrentStatus;
      }
      if (other.HasStartUpMode) {
        StartUpMode = other.StartUpMode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            KeyChooseCarport = input.ReadInt32();
            break;
          }
          case 16: {
            RosbagRecord = input.ReadInt32();
            break;
          }
          case 24: {
            UserControlledActions = input.ReadInt32();
            break;
          }
          case 32: {
            Clear = input.ReadInt32();
            break;
          }
          case 40: {
            SystemOrder = input.ReadInt32();
            break;
          }
          case 49: {
            StartPointX = input.ReadDouble();
            break;
          }
          case 57: {
            StartPointY = input.ReadDouble();
            break;
          }
          case 65: {
            TargetPointX = input.ReadDouble();
            break;
          }
          case 73: {
            TargetPointY = input.ReadDouble();
            break;
          }
          case 80: {
            CurrentStatus = input.ReadInt32();
            break;
          }
          case 88: {
            StartUpMode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
