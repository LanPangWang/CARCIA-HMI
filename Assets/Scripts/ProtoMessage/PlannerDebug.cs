// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: planner_debug.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Xviewer {

  /// <summary>Holder for reflection information generated from planner_debug.proto</summary>
  public static partial class PlannerDebugReflection {

    #region Descriptor
    /// <summary>File descriptor for planner_debug.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlannerDebugReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNwbGFubmVyX2RlYnVnLnByb3RvEgd4dmlld2VyIkcKBk9iSW5mbxIKCgJp",
            "ZBgBIAEoBRIXCg9maXJzdF90aW1lc3RhbXAYAiABKAESGAoQc2Vjb25kX3Rp",
            "bWVzdGFtcBgDIAEoASJECgVPYk1hcBIYChByZWNvcmRfdGltZXN0YW1wGAEg",
            "ASgBEiEKCG9ic19pbmZvGAIgAygLMg8ueHZpZXdlci5PYkluZm8iNQoJU1RQ",
            "b2ludDNEEgwKAXgYASABKAI6ATASDAoBeRgCIAEoAjoBMBIMCgF6GAMgASgC",
            "OgEwImYKDlNUUGF0aFdheXBvaW50EiQKCHdheXBvaW50GAEgASgLMhIueHZp",
            "ZXdlci5TVFBvaW50M0QSDAoBcxgCIAEoAjoBMBIOCgN5YXcYAyABKAI6ATAS",
            "EAoFa2FwcGEYBCABKAI6ATAimgEKBlNUUGF0aBIUCgl0aW1lc3RhbXAYASAB",
            "KAE6ATASIQoWZXhwZWN0ZWRfdHJhbnNmZXJfdGltZRgCIAEoAToBMBIvCg5w",
            "YXRoX3dheXBvaW50cxgDIAMoCzIXLnh2aWV3ZXIuU1RQYXRoV2F5cG9pbnQS",
            "JgoXaXNfcmVmZXJlbmNlX2xpbmVfc2hvcnQYBCABKAg6BWZhbHNlIioKB1NU",
            "UG9pbnQSCQoBcxgBIAEoAhIJCgF0GAIgASgCEgkKAWwYAyABKAIiggEKEFNU",
            "T2JqZWN0Qm91bmRhcnkSEQoJdGltZXN0YW1wGAEgASgBEicKDXN0X3VwcGVy",
            "Ym91bmQYAiADKAsyEC54dmlld2VyLlNUUG9pbnQSJwoNc3RfbG93ZXJib3Vu",
            "ZBgDIAMoCzIQLnh2aWV3ZXIuU1RQb2ludBIJCgF2GAQgAygCIrYBChpPYnN0",
            "YWNsZVByZWRpY3RpdmVEeW5vSW5mbxIQCghkdXJhdGlvbhgBIAEoAhIXCgp0",
            "X2ludGVydmFsGAIgASgCOgMwLjESKQoNd2F5cG9pbnRfbGlzdBgDIAMoCzIS",
            "Lnh2aWV3ZXIuU1RQb2ludDNEEhUKDXZlbG9jaXR5X2xpc3QYBCADKAISGQoR",
            "YWNjZWxlcmF0aW9uX2xpc3QYBSADKAISEAoIeWF3X2xpc3QYBiADKAIivAQK",
            "DFNUT2JqZWN0SW5mbxIRCgl0aW1lc3RhbXAYASABKAESMAoNc3RfYm91bmRh",
            "cmllcxgCIAEoCzIZLnh2aWV3ZXIuU1RPYmplY3RCb3VuZGFyeRI+ChFwcmVk",
            "aWN0X2R5bm9faW5mbxgDIAEoCzIjLnh2aWV3ZXIuT2JzdGFjbGVQcmVkaWN0",
            "aXZlRHlub0luZm8SIwobc19wcm9qZWN0ZWRfb25fcGxhbm5lZF9wYXRoGAQg",
            "ASgCEhMKC3BvbGljeV90eXBlGAUgASgFEgoKAmlkGAYgASgFEgwKBHR5cGUY",
            "ByABKAUSCQoBdxgIIAEoAhIJCgFsGAkgASgCEhEKCWlzX3N0YXRpYxgKIAEo",
            "CBInCgtib3hfY29ybmVycxgLIAMoCzISLnh2aWV3ZXIuU1RQb2ludDNEEgkK",
            "AXYYDCABKAISDwoHbGFuZV9pZBgNIAEoBRIeCg9pc192aXJ0dWFsX2VkZ2UY",
            "DiABKAg6BWZhbHNlEi4KH2lzX3ZpcnR1YWxfZWRnZV9mb3JfbGFuZV9jaGFu",
            "Z2UYDyABKAg6BWZhbHNlEisKHGlzX3ZpcnR1YWxfZWRnZV9mb3JfY3Jvc3Np",
            "bmcYECABKAg6BWZhbHNlEiQKFWlzX2xhbmVfY2hhbmdpbmdfd2FsbBgRIAEo",
            "CDoFZmFsc2USKAodbGFuZV9jaGFuZ2luZ193YWxsX2V4cGVjdF9kaXMYEiAB",
            "KAE6ATASGAoNdmlydHVhbF9jb2VmZhgTIAEoAToBMCLBAgodU1RSZWZpbmVk",
            "VmVoaWNsZVN0YXR1c1N0YW1wZWQSEQoJdGltZXN0YW1wGAEgASgBEiQKCGxv",
            "Y2F0aW9uGAIgASgLMhIueHZpZXdlci5TVFBvaW50M0QSFQoNaGVhZGluZ19h",
            "bmdsZRgDIAEoAhIXCg9saW5lYXJfdmVsb2NpdHkYBCABKAISGwoTbGluZWFy",
            "X2FjY2VsZXJhdGlvbhgFIAEoAhITCgt3aGVlbF9hbmdsZRgGIAEoAhIuCiZs",
            "YXRlcmFsX2Rpc3RhbmNlX3RvX2Vnb19yZWZlcmVuY2VfbGluZRgHIAEoAhIV",
            "Cg15YXdfYXRfb3JpZ2luGAggASgCEhwKFHJlYWxfbGluZWFyX3ZlbG9jaXR5",
            "GAkgASgCEiAKGHJlYWxfbGluZWFyX2FjY2VsZXJhdGlvbhgKIAEoAiK2AQoR",
            "Q2hhc3Npc0R5bm9MaW1pdHMSHwoXbWF4X25vcm1hbF9hY2NlbGVyYXRpb24Y",
            "ASABKAISHwoXbWF4X25vcm1hbF9kZWNlbGVyYXRpb24YAiABKAISGAoQYWVi",
            "X2RlY2VsZXJhdGlvbhgDIAEoAhIfChdtYXhfcmFkaWFsX2FjY2VsZXJhdGlv",
            "bhgEIAEoAhIkChxtYXhfY2hhbmdlX2xhbmVfYWNjZWxlcmF0aW9uGAUgASgC",
            "IoYBCgtDaGFzc2lzSW5mbxIOCgZsZW5ndGgYASABKAISDQoFd2lkdGgYAiAB",
            "KAISEgoKd2hlZWxfYmFzZRgDIAEoAhITCgtncHNfdG9faGVhZBgEIAEoAhIv",
            "CgtkeW5vX2xpbWl0cxgFIAEoCzIaLnh2aWV3ZXIuQ2hhc3Npc0R5bm9MaW1p",
            "dHMipwMKE1NwZWVkUGxhbm5pbmdEZXRhaWwSFAoMYnJha2Vfc3RhdHVzGAEg",
            "ASgIEiAKEWxhc3RfaXNfaW5fZm9sbG93GAIgASgIOgVmYWxzZRIbCgxpbl9s",
            "b3dlcl9kZWMYAyABKAg6BWZhbHNlEigKGWxvbmdfY2FyX2ZvbGxvd19uZWFy",
            "X21vZGUYBCABKAg6BWZhbHNlEiMKFGNhcl9mb2xsb3dfbmVhcl9tb2RlGAUg",
            "ASgIOgVmYWxzZRIiChNhZGRfdmlydHVhbF9vYl9tb2RlGAYgASgIOgVmYWxz",
            "ZRIrChxpc19pbl9keW5hbWljX2VtZXJnZW5jeV96b25lGAcgASgIOgVmYWxz",
            "ZRIeCgZvYl9tYXAYCCABKAsyDi54dmlld2VyLk9iTWFwEigKEHZpcnR1YWxf",
            "ZWRnZV9tYXAYCSABKAsyDi54dmlld2VyLk9iTWFwEioKG3ZpcnR1YWxfZW1l",
            "cmdlbmN5X3pvbmVfZmxhZxgKIAEoCDoFZmFsc2USJQoWbGFzdF9pc19pbl9z",
            "bG93X2N1dF9pbhgLIAEoCDoFZmFsc2UilAQKB1NURGVidWcSIAoHc3RfcGF0",
            "aBgBIAEoCzIPLnh2aWV3ZXIuU1RQYXRoEisKDHN0X2luZm9fbGlzdBgCIAMo",
            "CzIVLnh2aWV3ZXIuU1RPYmplY3RJbmZvEj4KDnZlaGljbGVfc3RhdHVzGAMg",
            "ASgLMiYueHZpZXdlci5TVFJlZmluZWRWZWhpY2xlU3RhdHVzU3RhbXBlZBIq",
            "CgxjaGFzc2lzX2luZm8YBCABKAsyFC54dmlld2VyLkNoYXNzaXNJbmZvEh0K",
            "FWxvY2FsX3JlY29tbWVuZF9zcGVlZBgFIAEoAhIWCg5pbl9jaGFuZ2VfbGFu",
            "ZRgGIAEoCBIUCgxjcnVpc2Vfc3BlZWQYByABKAISLQoQcm9hZF9zcGVlZF9s",
            "aW1pdBgIIAEoCzITLnh2aWV3ZXIuU3BlZWRMaW1pdBI7ChVzcGVlZF9wbGFu",
            "bmluZ19kZXRhaWwYCSABKAsyHC54dmlld2VyLlNwZWVkUGxhbm5pbmdEZXRh",
            "aWwSEQoJdGltZXN0YW1wGAogASgBEi0KEWNydWlzZV9zcGVlZF9saXN0GAsg",
            "ASgLMhIueHZpZXdlci5TcGVlZERhdGESGwoTbGF0ZXJhbF9wb2xpY3lfdHlw",
            "ZRgMIAEoBRIaChJsYW5lX2NoYW5nZV9zdGF0dXMYDSABKAUSGgoSbWluX3N0",
            "YXRpY19vYnNfZGlzGA4gASgBIkQKClNwZWVkUG9pbnQSCQoBcxgBIAEoAhIJ",
            "CgF2GAIgASgCEgkKAWEYAyABKAISCgoCZGEYBCABKAISCQoBdBgFIAEoAiI2",
            "CglTcGVlZERhdGESKQoMc3BlZWRfcG9pbnRzGAEgAygLMhMueHZpZXdlci5T",
            "cGVlZFBvaW50Ih8KB1NWUG9pbnQSCQoBcxgBIAEoAhIJCgF2GAIgASgCIjoK",
            "ClNwZWVkTGltaXQSLAoSc3BlZWRfbGltaXRfcG9pbnRzGAEgAygLMhAueHZp",
            "ZXdlci5TVlBvaW50InYKDUZlYXNpYmxlUG9pbnQSDQoFc19taW4YASABKAIS",
            "DQoFc19tYXgYAiABKAISDQoFdl9taW4YAyABKAISDQoFdl9tYXgYBCABKAIS",
            "DQoFYV9taW4YBSABKAISDQoFYV9tYXgYBiABKAISCwoDdF9zGAcgASgCIj8K",
            "DEZlYXNpYmxlRGF0YRIvCg9mZWFzaWJsZV9wb2ludHMYASADKAsyFi54dmll",
            "d2VyLkZlYXNpYmxlUG9pbnQiWwoOVmlydHVhbE9ic0RhdGESCgoCaWQYASAB",
            "KAUSJwoLYm94X2Nvcm5lcnMYAiADKAsyEi54dmlld2VyLlNUUG9pbnQzRBIJ",
            "CgF3GAMgASgCEgkKAWwYBCABKAIiRwoPRGVzaXJlZEFjY1BvaW50EhkKEWFj",
            "Y2VsX21heF9kZXNpcmVkGAEgASgCEhkKEWFjY2VsX21pbl9kZXNpcmVkGAIg",
            "ASgCIksKE0Rlc2lyZWRBY2NlbGVyYXRpb24SNAoSZGVzaXJlZF9hY2NfcG9p",
            "bnRzGAEgAygLMhgueHZpZXdlci5EZXNpcmVkQWNjUG9pbnQiKgoPT2JzSW50",
            "ZW50aW9uUGVyEgoKAmlkGAEgAygEEgsKA3BlchgCIAMoASLoBQoJU1RQdWJJ",
            "bmZvEiIKCHN0X2RlYnVnGAEgASgLMhAueHZpZXdlci5TVERlYnVnEhwKFHN0",
            "X3BsYW5uaW5nX2Vycl9jb2RlGAIgASgFEjAKDXN0X2JvdW5kYXJpZXMYAyAB",
            "KAsyGS54dmlld2VyLlNUT2JqZWN0Qm91bmRhcnkSLwoTc3BlZWRfZGF0YV9m",
            "YWxsYmFjaxgEIAEoCzISLnh2aWV3ZXIuU3BlZWREYXRhEikKDXNwZWVkX2Rh",
            "dGFfZHAYBSABKAsyEi54dmlld2VyLlNwZWVkRGF0YRIpCg1zcGVlZF9kYXRh",
            "X3FwGAYgASgLMhIueHZpZXdlci5TcGVlZERhdGESFAoMc3RfdHJhal90eXBl",
            "GAcgASgFEiAKGHN0X3BsYW5uaW5nX2Vycl9jb2RlX3N0chgIIAEoCRIoCgtz",
            "cGVlZF9saW1pdBgJIAEoCzITLnh2aWV3ZXIuU3BlZWRMaW1pdBIsCg1mZWFz",
            "aWJsZV9kYXRhGAogASgLMhUueHZpZXdlci5GZWFzaWJsZURhdGESEQoJdGlt",
            "ZXN0YW1wGAsgASgBEjMKFHN0X2luZm9fbGlzdF92aXJ0dWFsGAwgAygLMhUu",
            "eHZpZXdlci5TVE9iamVjdEluZm8SFwoPaW50ZW50aW9uX29iX2lkGA0gAygE",
            "EhcKD2Nyb3NzYWJsZV9vYl9pZBgOIAMoBBIxChB2aXJ0dWFsX29ic19kYXRh",
            "GA8gAygLMhcueHZpZXdlci5WaXJ0dWFsT2JzRGF0YRIxCgtkZXNpcmVkX2Fj",
            "YxgQIAEoCzIcLnh2aWV3ZXIuRGVzaXJlZEFjY2VsZXJhdGlvbhIVCg1zX21h",
            "eF9kZXNpcmVkGBEgAygCEhcKD3JlZmVyZW5jZV9zcGVlZBgSIAMoAhIpCgdv",
            "YnNfcGVyGBMgASgLMhgueHZpZXdlci5PYnNJbnRlbnRpb25QZXISFQoNc19t",
            "aW5fZGVzaXJlZBgUIAMoAg=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.ObInfo), global::Xviewer.ObInfo.Parser, new[]{ "Id", "FirstTimestamp", "SecondTimestamp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.ObMap), global::Xviewer.ObMap.Parser, new[]{ "RecordTimestamp", "ObsInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.STPoint3D), global::Xviewer.STPoint3D.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.STPathWaypoint), global::Xviewer.STPathWaypoint.Parser, new[]{ "Waypoint", "S", "Yaw", "Kappa" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.STPath), global::Xviewer.STPath.Parser, new[]{ "Timestamp", "ExpectedTransferTime", "PathWaypoints", "IsReferenceLineShort" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.STPoint), global::Xviewer.STPoint.Parser, new[]{ "S", "T", "L" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.STObjectBoundary), global::Xviewer.STObjectBoundary.Parser, new[]{ "Timestamp", "StUpperbound", "StLowerbound", "V" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.ObstaclePredictiveDynoInfo), global::Xviewer.ObstaclePredictiveDynoInfo.Parser, new[]{ "Duration", "TInterval", "WaypointList", "VelocityList", "AccelerationList", "YawList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.STObjectInfo), global::Xviewer.STObjectInfo.Parser, new[]{ "Timestamp", "StBoundaries", "PredictDynoInfo", "SProjectedOnPlannedPath", "PolicyType", "Id", "Type", "W", "L", "IsStatic", "BoxCorners", "V", "LaneId", "IsVirtualEdge", "IsVirtualEdgeForLaneChange", "IsVirtualEdgeForCrossing", "IsLaneChangingWall", "LaneChangingWallExpectDis", "VirtualCoeff" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.STRefinedVehicleStatusStamped), global::Xviewer.STRefinedVehicleStatusStamped.Parser, new[]{ "Timestamp", "Location", "HeadingAngle", "LinearVelocity", "LinearAcceleration", "WheelAngle", "LateralDistanceToEgoReferenceLine", "YawAtOrigin", "RealLinearVelocity", "RealLinearAcceleration" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.ChassisDynoLimits), global::Xviewer.ChassisDynoLimits.Parser, new[]{ "MaxNormalAcceleration", "MaxNormalDeceleration", "AebDeceleration", "MaxRadialAcceleration", "MaxChangeLaneAcceleration" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.ChassisInfo), global::Xviewer.ChassisInfo.Parser, new[]{ "Length", "Width", "WheelBase", "GpsToHead", "DynoLimits" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.SpeedPlanningDetail), global::Xviewer.SpeedPlanningDetail.Parser, new[]{ "BrakeStatus", "LastIsInFollow", "InLowerDec", "LongCarFollowNearMode", "CarFollowNearMode", "AddVirtualObMode", "IsInDynamicEmergencyZone", "ObMap", "VirtualEdgeMap", "VirtualEmergencyZoneFlag", "LastIsInSlowCutIn" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.STDebug), global::Xviewer.STDebug.Parser, new[]{ "StPath", "StInfoList", "VehicleStatus", "ChassisInfo", "LocalRecommendSpeed", "InChangeLane", "CruiseSpeed", "RoadSpeedLimit", "SpeedPlanningDetail", "Timestamp", "CruiseSpeedList", "LateralPolicyType", "LaneChangeStatus", "MinStaticObsDis" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.SpeedPoint), global::Xviewer.SpeedPoint.Parser, new[]{ "S", "V", "A", "Da", "T" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.SpeedData), global::Xviewer.SpeedData.Parser, new[]{ "SpeedPoints" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.SVPoint), global::Xviewer.SVPoint.Parser, new[]{ "S", "V" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.SpeedLimit), global::Xviewer.SpeedLimit.Parser, new[]{ "SpeedLimitPoints" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.FeasiblePoint), global::Xviewer.FeasiblePoint.Parser, new[]{ "SMin", "SMax", "VMin", "VMax", "AMin", "AMax", "TS" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.FeasibleData), global::Xviewer.FeasibleData.Parser, new[]{ "FeasiblePoints" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.VirtualObsData), global::Xviewer.VirtualObsData.Parser, new[]{ "Id", "BoxCorners", "W", "L" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.DesiredAccPoint), global::Xviewer.DesiredAccPoint.Parser, new[]{ "AccelMaxDesired", "AccelMinDesired" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.DesiredAcceleration), global::Xviewer.DesiredAcceleration.Parser, new[]{ "DesiredAccPoints" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.ObsIntentionPer), global::Xviewer.ObsIntentionPer.Parser, new[]{ "Id", "Per" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xviewer.STPubInfo), global::Xviewer.STPubInfo.Parser, new[]{ "StDebug", "StPlanningErrCode", "StBoundaries", "SpeedDataFallback", "SpeedDataDp", "SpeedDataQp", "StTrajType", "StPlanningErrCodeStr", "SpeedLimit", "FeasibleData", "Timestamp", "StInfoListVirtual", "IntentionObId", "CrossableObId", "VirtualObsData", "DesiredAcc", "SMaxDesired", "ReferenceSpeed", "ObsPer", "SMinDesired" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ObInfo : pb::IMessage<ObInfo> {
    private static readonly pb::MessageParser<ObInfo> _parser = new pb::MessageParser<ObInfo>(() => new ObInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PlannerDebugReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObInfo(ObInfo other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      firstTimestamp_ = other.firstTimestamp_;
      secondTimestamp_ = other.secondTimestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObInfo Clone() {
      return new ObInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static int IdDefaultValue = 0;

    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "first_timestamp" field.</summary>
    public const int FirstTimestampFieldNumber = 2;
    private readonly static double FirstTimestampDefaultValue = 0D;

    private double firstTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FirstTimestamp {
      get { if ((_hasBits0 & 2) != 0) { return firstTimestamp_; } else { return FirstTimestampDefaultValue; } }
      set {
        _hasBits0 |= 2;
        firstTimestamp_ = value;
      }
    }
    /// <summary>Gets whether the "first_timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFirstTimestamp {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "first_timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFirstTimestamp() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "second_timestamp" field.</summary>
    public const int SecondTimestampFieldNumber = 3;
    private readonly static double SecondTimestampDefaultValue = 0D;

    private double secondTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SecondTimestamp {
      get { if ((_hasBits0 & 4) != 0) { return secondTimestamp_; } else { return SecondTimestampDefaultValue; } }
      set {
        _hasBits0 |= 4;
        secondTimestamp_ = value;
      }
    }
    /// <summary>Gets whether the "second_timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSecondTimestamp {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "second_timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSecondTimestamp() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FirstTimestamp, other.FirstTimestamp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SecondTimestamp, other.SecondTimestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasFirstTimestamp) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FirstTimestamp);
      if (HasSecondTimestamp) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SecondTimestamp);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (HasFirstTimestamp) {
        output.WriteRawTag(17);
        output.WriteDouble(FirstTimestamp);
      }
      if (HasSecondTimestamp) {
        output.WriteRawTag(25);
        output.WriteDouble(SecondTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (HasFirstTimestamp) {
        size += 1 + 8;
      }
      if (HasSecondTimestamp) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasFirstTimestamp) {
        FirstTimestamp = other.FirstTimestamp;
      }
      if (other.HasSecondTimestamp) {
        SecondTimestamp = other.SecondTimestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 17: {
            FirstTimestamp = input.ReadDouble();
            break;
          }
          case 25: {
            SecondTimestamp = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObMap : pb::IMessage<ObMap> {
    private static readonly pb::MessageParser<ObMap> _parser = new pb::MessageParser<ObMap>(() => new ObMap());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PlannerDebugReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObMap(ObMap other) : this() {
      _hasBits0 = other._hasBits0;
      recordTimestamp_ = other.recordTimestamp_;
      obsInfo_ = other.obsInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObMap Clone() {
      return new ObMap(this);
    }

    /// <summary>Field number for the "record_timestamp" field.</summary>
    public const int RecordTimestampFieldNumber = 1;
    private readonly static double RecordTimestampDefaultValue = 0D;

    private double recordTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RecordTimestamp {
      get { if ((_hasBits0 & 1) != 0) { return recordTimestamp_; } else { return RecordTimestampDefaultValue; } }
      set {
        _hasBits0 |= 1;
        recordTimestamp_ = value;
      }
    }
    /// <summary>Gets whether the "record_timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRecordTimestamp {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "record_timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRecordTimestamp() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "obs_info" field.</summary>
    public const int ObsInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xviewer.ObInfo> _repeated_obsInfo_codec
        = pb::FieldCodec.ForMessage(18, global::Xviewer.ObInfo.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.ObInfo> obsInfo_ = new pbc::RepeatedField<global::Xviewer.ObInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.ObInfo> ObsInfo {
      get { return obsInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RecordTimestamp, other.RecordTimestamp)) return false;
      if(!obsInfo_.Equals(other.obsInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRecordTimestamp) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RecordTimestamp);
      hash ^= obsInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasRecordTimestamp) {
        output.WriteRawTag(9);
        output.WriteDouble(RecordTimestamp);
      }
      obsInfo_.WriteTo(output, _repeated_obsInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRecordTimestamp) {
        size += 1 + 8;
      }
      size += obsInfo_.CalculateSize(_repeated_obsInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObMap other) {
      if (other == null) {
        return;
      }
      if (other.HasRecordTimestamp) {
        RecordTimestamp = other.RecordTimestamp;
      }
      obsInfo_.Add(other.obsInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            RecordTimestamp = input.ReadDouble();
            break;
          }
          case 18: {
            obsInfo_.AddEntriesFrom(input, _repeated_obsInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class STPoint3D : pb::IMessage<STPoint3D> {
    private static readonly pb::MessageParser<STPoint3D> _parser = new pb::MessageParser<STPoint3D>(() => new STPoint3D());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<STPoint3D> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PlannerDebugReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STPoint3D() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STPoint3D(STPoint3D other) : this() {
      _hasBits0 = other._hasBits0;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STPoint3D Clone() {
      return new STPoint3D(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private readonly static float XDefaultValue = 0F;

    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { if ((_hasBits0 & 1) != 0) { return x_; } else { return XDefaultValue; } }
      set {
        _hasBits0 |= 1;
        x_ = value;
      }
    }
    /// <summary>Gets whether the "x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasX {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearX() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private readonly static float YDefaultValue = 0F;

    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { if ((_hasBits0 & 2) != 0) { return y_; } else { return YDefaultValue; } }
      set {
        _hasBits0 |= 2;
        y_ = value;
      }
    }
    /// <summary>Gets whether the "y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasY {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearY() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private readonly static float ZDefaultValue = 0F;

    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { if ((_hasBits0 & 4) != 0) { return z_; } else { return ZDefaultValue; } }
      set {
        _hasBits0 |= 4;
        z_ = value;
      }
    }
    /// <summary>Gets whether the "z" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasZ {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "z" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearZ() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as STPoint3D);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(STPoint3D other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasX) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (HasY) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (HasZ) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasX) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (HasY) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (HasZ) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasX) {
        size += 1 + 4;
      }
      if (HasY) {
        size += 1 + 4;
      }
      if (HasZ) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(STPoint3D other) {
      if (other == null) {
        return;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      if (other.HasZ) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class STPathWaypoint : pb::IMessage<STPathWaypoint> {
    private static readonly pb::MessageParser<STPathWaypoint> _parser = new pb::MessageParser<STPathWaypoint>(() => new STPathWaypoint());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<STPathWaypoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PlannerDebugReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STPathWaypoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STPathWaypoint(STPathWaypoint other) : this() {
      _hasBits0 = other._hasBits0;
      waypoint_ = other.waypoint_ != null ? other.waypoint_.Clone() : null;
      s_ = other.s_;
      yaw_ = other.yaw_;
      kappa_ = other.kappa_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STPathWaypoint Clone() {
      return new STPathWaypoint(this);
    }

    /// <summary>Field number for the "waypoint" field.</summary>
    public const int WaypointFieldNumber = 1;
    private global::Xviewer.STPoint3D waypoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.STPoint3D Waypoint {
      get { return waypoint_; }
      set {
        waypoint_ = value;
      }
    }

    /// <summary>Field number for the "s" field.</summary>
    public const int SFieldNumber = 2;
    private readonly static float SDefaultValue = 0F;

    private float s_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float S {
      get { if ((_hasBits0 & 1) != 0) { return s_; } else { return SDefaultValue; } }
      set {
        _hasBits0 |= 1;
        s_ = value;
      }
    }
    /// <summary>Gets whether the "s" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasS {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "s" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearS() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "yaw" field.</summary>
    public const int YawFieldNumber = 3;
    private readonly static float YawDefaultValue = 0F;

    private float yaw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Yaw {
      get { if ((_hasBits0 & 2) != 0) { return yaw_; } else { return YawDefaultValue; } }
      set {
        _hasBits0 |= 2;
        yaw_ = value;
      }
    }
    /// <summary>Gets whether the "yaw" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasYaw {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "yaw" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearYaw() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "kappa" field.</summary>
    public const int KappaFieldNumber = 4;
    private readonly static float KappaDefaultValue = 0F;

    private float kappa_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Kappa {
      get { if ((_hasBits0 & 4) != 0) { return kappa_; } else { return KappaDefaultValue; } }
      set {
        _hasBits0 |= 4;
        kappa_ = value;
      }
    }
    /// <summary>Gets whether the "kappa" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKappa {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "kappa" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKappa() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as STPathWaypoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(STPathWaypoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Waypoint, other.Waypoint)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(S, other.S)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Yaw, other.Yaw)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Kappa, other.Kappa)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (waypoint_ != null) hash ^= Waypoint.GetHashCode();
      if (HasS) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(S);
      if (HasYaw) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Yaw);
      if (HasKappa) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Kappa);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (waypoint_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Waypoint);
      }
      if (HasS) {
        output.WriteRawTag(21);
        output.WriteFloat(S);
      }
      if (HasYaw) {
        output.WriteRawTag(29);
        output.WriteFloat(Yaw);
      }
      if (HasKappa) {
        output.WriteRawTag(37);
        output.WriteFloat(Kappa);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (waypoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Waypoint);
      }
      if (HasS) {
        size += 1 + 4;
      }
      if (HasYaw) {
        size += 1 + 4;
      }
      if (HasKappa) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(STPathWaypoint other) {
      if (other == null) {
        return;
      }
      if (other.waypoint_ != null) {
        if (waypoint_ == null) {
          Waypoint = new global::Xviewer.STPoint3D();
        }
        Waypoint.MergeFrom(other.Waypoint);
      }
      if (other.HasS) {
        S = other.S;
      }
      if (other.HasYaw) {
        Yaw = other.Yaw;
      }
      if (other.HasKappa) {
        Kappa = other.Kappa;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (waypoint_ == null) {
              Waypoint = new global::Xviewer.STPoint3D();
            }
            input.ReadMessage(Waypoint);
            break;
          }
          case 21: {
            S = input.ReadFloat();
            break;
          }
          case 29: {
            Yaw = input.ReadFloat();
            break;
          }
          case 37: {
            Kappa = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class STPath : pb::IMessage<STPath> {
    private static readonly pb::MessageParser<STPath> _parser = new pb::MessageParser<STPath>(() => new STPath());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<STPath> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PlannerDebugReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STPath() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STPath(STPath other) : this() {
      _hasBits0 = other._hasBits0;
      timestamp_ = other.timestamp_;
      expectedTransferTime_ = other.expectedTransferTime_;
      pathWaypoints_ = other.pathWaypoints_.Clone();
      isReferenceLineShort_ = other.isReferenceLineShort_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STPath Clone() {
      return new STPath(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private readonly static double TimestampDefaultValue = 0D;

    private double timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Timestamp {
      get { if ((_hasBits0 & 1) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 1;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimestamp {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestamp() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "expected_transfer_time" field.</summary>
    public const int ExpectedTransferTimeFieldNumber = 2;
    private readonly static double ExpectedTransferTimeDefaultValue = 0D;

    private double expectedTransferTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ExpectedTransferTime {
      get { if ((_hasBits0 & 2) != 0) { return expectedTransferTime_; } else { return ExpectedTransferTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        expectedTransferTime_ = value;
      }
    }
    /// <summary>Gets whether the "expected_transfer_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExpectedTransferTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "expected_transfer_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExpectedTransferTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "path_waypoints" field.</summary>
    public const int PathWaypointsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Xviewer.STPathWaypoint> _repeated_pathWaypoints_codec
        = pb::FieldCodec.ForMessage(26, global::Xviewer.STPathWaypoint.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.STPathWaypoint> pathWaypoints_ = new pbc::RepeatedField<global::Xviewer.STPathWaypoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.STPathWaypoint> PathWaypoints {
      get { return pathWaypoints_; }
    }

    /// <summary>Field number for the "is_reference_line_short" field.</summary>
    public const int IsReferenceLineShortFieldNumber = 4;
    private readonly static bool IsReferenceLineShortDefaultValue = false;

    private bool isReferenceLineShort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReferenceLineShort {
      get { if ((_hasBits0 & 4) != 0) { return isReferenceLineShort_; } else { return IsReferenceLineShortDefaultValue; } }
      set {
        _hasBits0 |= 4;
        isReferenceLineShort_ = value;
      }
    }
    /// <summary>Gets whether the "is_reference_line_short" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsReferenceLineShort {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "is_reference_line_short" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsReferenceLineShort() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as STPath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(STPath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Timestamp, other.Timestamp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ExpectedTransferTime, other.ExpectedTransferTime)) return false;
      if(!pathWaypoints_.Equals(other.pathWaypoints_)) return false;
      if (IsReferenceLineShort != other.IsReferenceLineShort) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTimestamp) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Timestamp);
      if (HasExpectedTransferTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ExpectedTransferTime);
      hash ^= pathWaypoints_.GetHashCode();
      if (HasIsReferenceLineShort) hash ^= IsReferenceLineShort.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTimestamp) {
        output.WriteRawTag(9);
        output.WriteDouble(Timestamp);
      }
      if (HasExpectedTransferTime) {
        output.WriteRawTag(17);
        output.WriteDouble(ExpectedTransferTime);
      }
      pathWaypoints_.WriteTo(output, _repeated_pathWaypoints_codec);
      if (HasIsReferenceLineShort) {
        output.WriteRawTag(32);
        output.WriteBool(IsReferenceLineShort);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTimestamp) {
        size += 1 + 8;
      }
      if (HasExpectedTransferTime) {
        size += 1 + 8;
      }
      size += pathWaypoints_.CalculateSize(_repeated_pathWaypoints_codec);
      if (HasIsReferenceLineShort) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(STPath other) {
      if (other == null) {
        return;
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      if (other.HasExpectedTransferTime) {
        ExpectedTransferTime = other.ExpectedTransferTime;
      }
      pathWaypoints_.Add(other.pathWaypoints_);
      if (other.HasIsReferenceLineShort) {
        IsReferenceLineShort = other.IsReferenceLineShort;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Timestamp = input.ReadDouble();
            break;
          }
          case 17: {
            ExpectedTransferTime = input.ReadDouble();
            break;
          }
          case 26: {
            pathWaypoints_.AddEntriesFrom(input, _repeated_pathWaypoints_codec);
            break;
          }
          case 32: {
            IsReferenceLineShort = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class STPoint : pb::IMessage<STPoint> {
    private static readonly pb::MessageParser<STPoint> _parser = new pb::MessageParser<STPoint>(() => new STPoint());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<STPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PlannerDebugReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STPoint(STPoint other) : this() {
      _hasBits0 = other._hasBits0;
      s_ = other.s_;
      t_ = other.t_;
      l_ = other.l_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STPoint Clone() {
      return new STPoint(this);
    }

    /// <summary>Field number for the "s" field.</summary>
    public const int SFieldNumber = 1;
    private readonly static float SDefaultValue = 0F;

    private float s_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float S {
      get { if ((_hasBits0 & 1) != 0) { return s_; } else { return SDefaultValue; } }
      set {
        _hasBits0 |= 1;
        s_ = value;
      }
    }
    /// <summary>Gets whether the "s" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasS {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "s" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearS() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "t" field.</summary>
    public const int TFieldNumber = 2;
    private readonly static float TDefaultValue = 0F;

    private float t_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float T {
      get { if ((_hasBits0 & 2) != 0) { return t_; } else { return TDefaultValue; } }
      set {
        _hasBits0 |= 2;
        t_ = value;
      }
    }
    /// <summary>Gets whether the "t" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasT {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "t" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearT() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "l" field.</summary>
    public const int LFieldNumber = 3;
    private readonly static float LDefaultValue = 0F;

    private float l_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float L {
      get { if ((_hasBits0 & 4) != 0) { return l_; } else { return LDefaultValue; } }
      set {
        _hasBits0 |= 4;
        l_ = value;
      }
    }
    /// <summary>Gets whether the "l" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasL {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "l" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearL() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as STPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(STPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(S, other.S)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(T, other.T)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(L, other.L)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasS) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(S);
      if (HasT) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(T);
      if (HasL) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(L);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasS) {
        output.WriteRawTag(13);
        output.WriteFloat(S);
      }
      if (HasT) {
        output.WriteRawTag(21);
        output.WriteFloat(T);
      }
      if (HasL) {
        output.WriteRawTag(29);
        output.WriteFloat(L);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasS) {
        size += 1 + 4;
      }
      if (HasT) {
        size += 1 + 4;
      }
      if (HasL) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(STPoint other) {
      if (other == null) {
        return;
      }
      if (other.HasS) {
        S = other.S;
      }
      if (other.HasT) {
        T = other.T;
      }
      if (other.HasL) {
        L = other.L;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            S = input.ReadFloat();
            break;
          }
          case 21: {
            T = input.ReadFloat();
            break;
          }
          case 29: {
            L = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class STObjectBoundary : pb::IMessage<STObjectBoundary> {
    private static readonly pb::MessageParser<STObjectBoundary> _parser = new pb::MessageParser<STObjectBoundary>(() => new STObjectBoundary());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<STObjectBoundary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PlannerDebugReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STObjectBoundary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STObjectBoundary(STObjectBoundary other) : this() {
      _hasBits0 = other._hasBits0;
      timestamp_ = other.timestamp_;
      stUpperbound_ = other.stUpperbound_.Clone();
      stLowerbound_ = other.stLowerbound_.Clone();
      v_ = other.v_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STObjectBoundary Clone() {
      return new STObjectBoundary(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private readonly static double TimestampDefaultValue = 0D;

    private double timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Timestamp {
      get { if ((_hasBits0 & 1) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 1;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimestamp {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestamp() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "st_upperbound" field.</summary>
    public const int StUpperboundFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xviewer.STPoint> _repeated_stUpperbound_codec
        = pb::FieldCodec.ForMessage(18, global::Xviewer.STPoint.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.STPoint> stUpperbound_ = new pbc::RepeatedField<global::Xviewer.STPoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.STPoint> StUpperbound {
      get { return stUpperbound_; }
    }

    /// <summary>Field number for the "st_lowerbound" field.</summary>
    public const int StLowerboundFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Xviewer.STPoint> _repeated_stLowerbound_codec
        = pb::FieldCodec.ForMessage(26, global::Xviewer.STPoint.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.STPoint> stLowerbound_ = new pbc::RepeatedField<global::Xviewer.STPoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.STPoint> StLowerbound {
      get { return stLowerbound_; }
    }

    /// <summary>Field number for the "v" field.</summary>
    public const int VFieldNumber = 4;
    private static readonly pb::FieldCodec<float> _repeated_v_codec
        = pb::FieldCodec.ForFloat(37);
    private readonly pbc::RepeatedField<float> v_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> V {
      get { return v_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as STObjectBoundary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(STObjectBoundary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Timestamp, other.Timestamp)) return false;
      if(!stUpperbound_.Equals(other.stUpperbound_)) return false;
      if(!stLowerbound_.Equals(other.stLowerbound_)) return false;
      if(!v_.Equals(other.v_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTimestamp) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Timestamp);
      hash ^= stUpperbound_.GetHashCode();
      hash ^= stLowerbound_.GetHashCode();
      hash ^= v_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTimestamp) {
        output.WriteRawTag(9);
        output.WriteDouble(Timestamp);
      }
      stUpperbound_.WriteTo(output, _repeated_stUpperbound_codec);
      stLowerbound_.WriteTo(output, _repeated_stLowerbound_codec);
      v_.WriteTo(output, _repeated_v_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTimestamp) {
        size += 1 + 8;
      }
      size += stUpperbound_.CalculateSize(_repeated_stUpperbound_codec);
      size += stLowerbound_.CalculateSize(_repeated_stLowerbound_codec);
      size += v_.CalculateSize(_repeated_v_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(STObjectBoundary other) {
      if (other == null) {
        return;
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      stUpperbound_.Add(other.stUpperbound_);
      stLowerbound_.Add(other.stLowerbound_);
      v_.Add(other.v_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Timestamp = input.ReadDouble();
            break;
          }
          case 18: {
            stUpperbound_.AddEntriesFrom(input, _repeated_stUpperbound_codec);
            break;
          }
          case 26: {
            stLowerbound_.AddEntriesFrom(input, _repeated_stLowerbound_codec);
            break;
          }
          case 34:
          case 37: {
            v_.AddEntriesFrom(input, _repeated_v_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObstaclePredictiveDynoInfo : pb::IMessage<ObstaclePredictiveDynoInfo> {
    private static readonly pb::MessageParser<ObstaclePredictiveDynoInfo> _parser = new pb::MessageParser<ObstaclePredictiveDynoInfo>(() => new ObstaclePredictiveDynoInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObstaclePredictiveDynoInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PlannerDebugReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObstaclePredictiveDynoInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObstaclePredictiveDynoInfo(ObstaclePredictiveDynoInfo other) : this() {
      _hasBits0 = other._hasBits0;
      duration_ = other.duration_;
      tInterval_ = other.tInterval_;
      waypointList_ = other.waypointList_.Clone();
      velocityList_ = other.velocityList_.Clone();
      accelerationList_ = other.accelerationList_.Clone();
      yawList_ = other.yawList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObstaclePredictiveDynoInfo Clone() {
      return new ObstaclePredictiveDynoInfo(this);
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 1;
    private readonly static float DurationDefaultValue = 0F;

    private float duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Duration {
      get { if ((_hasBits0 & 1) != 0) { return duration_; } else { return DurationDefaultValue; } }
      set {
        _hasBits0 |= 1;
        duration_ = value;
      }
    }
    /// <summary>Gets whether the "duration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDuration {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "duration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDuration() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "t_interval" field.</summary>
    public const int TIntervalFieldNumber = 2;
    private readonly static float TIntervalDefaultValue = 0.1F;

    private float tInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TInterval {
      get { if ((_hasBits0 & 2) != 0) { return tInterval_; } else { return TIntervalDefaultValue; } }
      set {
        _hasBits0 |= 2;
        tInterval_ = value;
      }
    }
    /// <summary>Gets whether the "t_interval" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTInterval {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "t_interval" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTInterval() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "waypoint_list" field.</summary>
    public const int WaypointListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Xviewer.STPoint3D> _repeated_waypointList_codec
        = pb::FieldCodec.ForMessage(26, global::Xviewer.STPoint3D.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.STPoint3D> waypointList_ = new pbc::RepeatedField<global::Xviewer.STPoint3D>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.STPoint3D> WaypointList {
      get { return waypointList_; }
    }

    /// <summary>Field number for the "velocity_list" field.</summary>
    public const int VelocityListFieldNumber = 4;
    private static readonly pb::FieldCodec<float> _repeated_velocityList_codec
        = pb::FieldCodec.ForFloat(37);
    private readonly pbc::RepeatedField<float> velocityList_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> VelocityList {
      get { return velocityList_; }
    }

    /// <summary>Field number for the "acceleration_list" field.</summary>
    public const int AccelerationListFieldNumber = 5;
    private static readonly pb::FieldCodec<float> _repeated_accelerationList_codec
        = pb::FieldCodec.ForFloat(45);
    private readonly pbc::RepeatedField<float> accelerationList_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> AccelerationList {
      get { return accelerationList_; }
    }

    /// <summary>Field number for the "yaw_list" field.</summary>
    public const int YawListFieldNumber = 6;
    private static readonly pb::FieldCodec<float> _repeated_yawList_codec
        = pb::FieldCodec.ForFloat(53);
    private readonly pbc::RepeatedField<float> yawList_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> YawList {
      get { return yawList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObstaclePredictiveDynoInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObstaclePredictiveDynoInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Duration, other.Duration)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TInterval, other.TInterval)) return false;
      if(!waypointList_.Equals(other.waypointList_)) return false;
      if(!velocityList_.Equals(other.velocityList_)) return false;
      if(!accelerationList_.Equals(other.accelerationList_)) return false;
      if(!yawList_.Equals(other.yawList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDuration) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Duration);
      if (HasTInterval) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TInterval);
      hash ^= waypointList_.GetHashCode();
      hash ^= velocityList_.GetHashCode();
      hash ^= accelerationList_.GetHashCode();
      hash ^= yawList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasDuration) {
        output.WriteRawTag(13);
        output.WriteFloat(Duration);
      }
      if (HasTInterval) {
        output.WriteRawTag(21);
        output.WriteFloat(TInterval);
      }
      waypointList_.WriteTo(output, _repeated_waypointList_codec);
      velocityList_.WriteTo(output, _repeated_velocityList_codec);
      accelerationList_.WriteTo(output, _repeated_accelerationList_codec);
      yawList_.WriteTo(output, _repeated_yawList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasDuration) {
        size += 1 + 4;
      }
      if (HasTInterval) {
        size += 1 + 4;
      }
      size += waypointList_.CalculateSize(_repeated_waypointList_codec);
      size += velocityList_.CalculateSize(_repeated_velocityList_codec);
      size += accelerationList_.CalculateSize(_repeated_accelerationList_codec);
      size += yawList_.CalculateSize(_repeated_yawList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObstaclePredictiveDynoInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasDuration) {
        Duration = other.Duration;
      }
      if (other.HasTInterval) {
        TInterval = other.TInterval;
      }
      waypointList_.Add(other.waypointList_);
      velocityList_.Add(other.velocityList_);
      accelerationList_.Add(other.accelerationList_);
      yawList_.Add(other.yawList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Duration = input.ReadFloat();
            break;
          }
          case 21: {
            TInterval = input.ReadFloat();
            break;
          }
          case 26: {
            waypointList_.AddEntriesFrom(input, _repeated_waypointList_codec);
            break;
          }
          case 34:
          case 37: {
            velocityList_.AddEntriesFrom(input, _repeated_velocityList_codec);
            break;
          }
          case 42:
          case 45: {
            accelerationList_.AddEntriesFrom(input, _repeated_accelerationList_codec);
            break;
          }
          case 50:
          case 53: {
            yawList_.AddEntriesFrom(input, _repeated_yawList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class STObjectInfo : pb::IMessage<STObjectInfo> {
    private static readonly pb::MessageParser<STObjectInfo> _parser = new pb::MessageParser<STObjectInfo>(() => new STObjectInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<STObjectInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PlannerDebugReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STObjectInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STObjectInfo(STObjectInfo other) : this() {
      _hasBits0 = other._hasBits0;
      timestamp_ = other.timestamp_;
      stBoundaries_ = other.stBoundaries_ != null ? other.stBoundaries_.Clone() : null;
      predictDynoInfo_ = other.predictDynoInfo_ != null ? other.predictDynoInfo_.Clone() : null;
      sProjectedOnPlannedPath_ = other.sProjectedOnPlannedPath_;
      policyType_ = other.policyType_;
      id_ = other.id_;
      type_ = other.type_;
      w_ = other.w_;
      l_ = other.l_;
      isStatic_ = other.isStatic_;
      boxCorners_ = other.boxCorners_.Clone();
      v_ = other.v_;
      laneId_ = other.laneId_;
      isVirtualEdge_ = other.isVirtualEdge_;
      isVirtualEdgeForLaneChange_ = other.isVirtualEdgeForLaneChange_;
      isVirtualEdgeForCrossing_ = other.isVirtualEdgeForCrossing_;
      isLaneChangingWall_ = other.isLaneChangingWall_;
      laneChangingWallExpectDis_ = other.laneChangingWallExpectDis_;
      virtualCoeff_ = other.virtualCoeff_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STObjectInfo Clone() {
      return new STObjectInfo(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private readonly static double TimestampDefaultValue = 0D;

    private double timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Timestamp {
      get { if ((_hasBits0 & 1) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 1;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimestamp {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestamp() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "st_boundaries" field.</summary>
    public const int StBoundariesFieldNumber = 2;
    private global::Xviewer.STObjectBoundary stBoundaries_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.STObjectBoundary StBoundaries {
      get { return stBoundaries_; }
      set {
        stBoundaries_ = value;
      }
    }

    /// <summary>Field number for the "predict_dyno_info" field.</summary>
    public const int PredictDynoInfoFieldNumber = 3;
    private global::Xviewer.ObstaclePredictiveDynoInfo predictDynoInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.ObstaclePredictiveDynoInfo PredictDynoInfo {
      get { return predictDynoInfo_; }
      set {
        predictDynoInfo_ = value;
      }
    }

    /// <summary>Field number for the "s_projected_on_planned_path" field.</summary>
    public const int SProjectedOnPlannedPathFieldNumber = 4;
    private readonly static float SProjectedOnPlannedPathDefaultValue = 0F;

    private float sProjectedOnPlannedPath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SProjectedOnPlannedPath {
      get { if ((_hasBits0 & 2) != 0) { return sProjectedOnPlannedPath_; } else { return SProjectedOnPlannedPathDefaultValue; } }
      set {
        _hasBits0 |= 2;
        sProjectedOnPlannedPath_ = value;
      }
    }
    /// <summary>Gets whether the "s_projected_on_planned_path" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSProjectedOnPlannedPath {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "s_projected_on_planned_path" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSProjectedOnPlannedPath() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "policy_type" field.</summary>
    public const int PolicyTypeFieldNumber = 5;
    private readonly static int PolicyTypeDefaultValue = 0;

    private int policyType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PolicyType {
      get { if ((_hasBits0 & 4) != 0) { return policyType_; } else { return PolicyTypeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        policyType_ = value;
      }
    }
    /// <summary>Gets whether the "policy_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPolicyType {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "policy_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPolicyType() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 6;
    private readonly static int IdDefaultValue = 0;

    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { if ((_hasBits0 & 8) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 7;
    private readonly static int TypeDefaultValue = 0;

    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { if ((_hasBits0 & 16) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 8;
    private readonly static float WDefaultValue = 0F;

    private float w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float W {
      get { if ((_hasBits0 & 32) != 0) { return w_; } else { return WDefaultValue; } }
      set {
        _hasBits0 |= 32;
        w_ = value;
      }
    }
    /// <summary>Gets whether the "w" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasW {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "w" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearW() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "l" field.</summary>
    public const int LFieldNumber = 9;
    private readonly static float LDefaultValue = 0F;

    private float l_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float L {
      get { if ((_hasBits0 & 64) != 0) { return l_; } else { return LDefaultValue; } }
      set {
        _hasBits0 |= 64;
        l_ = value;
      }
    }
    /// <summary>Gets whether the "l" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasL {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "l" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearL() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "is_static" field.</summary>
    public const int IsStaticFieldNumber = 10;
    private readonly static bool IsStaticDefaultValue = false;

    private bool isStatic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStatic {
      get { if ((_hasBits0 & 128) != 0) { return isStatic_; } else { return IsStaticDefaultValue; } }
      set {
        _hasBits0 |= 128;
        isStatic_ = value;
      }
    }
    /// <summary>Gets whether the "is_static" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsStatic {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "is_static" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsStatic() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "box_corners" field.</summary>
    public const int BoxCornersFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Xviewer.STPoint3D> _repeated_boxCorners_codec
        = pb::FieldCodec.ForMessage(90, global::Xviewer.STPoint3D.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.STPoint3D> boxCorners_ = new pbc::RepeatedField<global::Xviewer.STPoint3D>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.STPoint3D> BoxCorners {
      get { return boxCorners_; }
    }

    /// <summary>Field number for the "v" field.</summary>
    public const int VFieldNumber = 12;
    private readonly static float VDefaultValue = 0F;

    private float v_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float V {
      get { if ((_hasBits0 & 256) != 0) { return v_; } else { return VDefaultValue; } }
      set {
        _hasBits0 |= 256;
        v_ = value;
      }
    }
    /// <summary>Gets whether the "v" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasV {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "v" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearV() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "lane_id" field.</summary>
    public const int LaneIdFieldNumber = 13;
    private readonly static int LaneIdDefaultValue = 0;

    private int laneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LaneId {
      get { if ((_hasBits0 & 512) != 0) { return laneId_; } else { return LaneIdDefaultValue; } }
      set {
        _hasBits0 |= 512;
        laneId_ = value;
      }
    }
    /// <summary>Gets whether the "lane_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLaneId {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "lane_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLaneId() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "is_virtual_edge" field.</summary>
    public const int IsVirtualEdgeFieldNumber = 14;
    private readonly static bool IsVirtualEdgeDefaultValue = false;

    private bool isVirtualEdge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsVirtualEdge {
      get { if ((_hasBits0 & 1024) != 0) { return isVirtualEdge_; } else { return IsVirtualEdgeDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        isVirtualEdge_ = value;
      }
    }
    /// <summary>Gets whether the "is_virtual_edge" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsVirtualEdge {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "is_virtual_edge" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsVirtualEdge() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "is_virtual_edge_for_lane_change" field.</summary>
    public const int IsVirtualEdgeForLaneChangeFieldNumber = 15;
    private readonly static bool IsVirtualEdgeForLaneChangeDefaultValue = false;

    private bool isVirtualEdgeForLaneChange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsVirtualEdgeForLaneChange {
      get { if ((_hasBits0 & 2048) != 0) { return isVirtualEdgeForLaneChange_; } else { return IsVirtualEdgeForLaneChangeDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        isVirtualEdgeForLaneChange_ = value;
      }
    }
    /// <summary>Gets whether the "is_virtual_edge_for_lane_change" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsVirtualEdgeForLaneChange {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "is_virtual_edge_for_lane_change" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsVirtualEdgeForLaneChange() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "is_virtual_edge_for_crossing" field.</summary>
    public const int IsVirtualEdgeForCrossingFieldNumber = 16;
    private readonly static bool IsVirtualEdgeForCrossingDefaultValue = false;

    private bool isVirtualEdgeForCrossing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsVirtualEdgeForCrossing {
      get { if ((_hasBits0 & 4096) != 0) { return isVirtualEdgeForCrossing_; } else { return IsVirtualEdgeForCrossingDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        isVirtualEdgeForCrossing_ = value;
      }
    }
    /// <summary>Gets whether the "is_virtual_edge_for_crossing" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsVirtualEdgeForCrossing {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "is_virtual_edge_for_crossing" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsVirtualEdgeForCrossing() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "is_lane_changing_wall" field.</summary>
    public const int IsLaneChangingWallFieldNumber = 17;
    private readonly static bool IsLaneChangingWallDefaultValue = false;

    private bool isLaneChangingWall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLaneChangingWall {
      get { if ((_hasBits0 & 8192) != 0) { return isLaneChangingWall_; } else { return IsLaneChangingWallDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        isLaneChangingWall_ = value;
      }
    }
    /// <summary>Gets whether the "is_lane_changing_wall" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsLaneChangingWall {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "is_lane_changing_wall" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsLaneChangingWall() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "lane_changing_wall_expect_dis" field.</summary>
    public const int LaneChangingWallExpectDisFieldNumber = 18;
    private readonly static double LaneChangingWallExpectDisDefaultValue = 0D;

    private double laneChangingWallExpectDis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LaneChangingWallExpectDis {
      get { if ((_hasBits0 & 16384) != 0) { return laneChangingWallExpectDis_; } else { return LaneChangingWallExpectDisDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        laneChangingWallExpectDis_ = value;
      }
    }
    /// <summary>Gets whether the "lane_changing_wall_expect_dis" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLaneChangingWallExpectDis {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "lane_changing_wall_expect_dis" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLaneChangingWallExpectDis() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "virtual_coeff" field.</summary>
    public const int VirtualCoeffFieldNumber = 19;
    private readonly static double VirtualCoeffDefaultValue = 0D;

    private double virtualCoeff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VirtualCoeff {
      get { if ((_hasBits0 & 32768) != 0) { return virtualCoeff_; } else { return VirtualCoeffDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        virtualCoeff_ = value;
      }
    }
    /// <summary>Gets whether the "virtual_coeff" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVirtualCoeff {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "virtual_coeff" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVirtualCoeff() {
      _hasBits0 &= ~32768;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as STObjectInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(STObjectInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Timestamp, other.Timestamp)) return false;
      if (!object.Equals(StBoundaries, other.StBoundaries)) return false;
      if (!object.Equals(PredictDynoInfo, other.PredictDynoInfo)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SProjectedOnPlannedPath, other.SProjectedOnPlannedPath)) return false;
      if (PolicyType != other.PolicyType) return false;
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(W, other.W)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(L, other.L)) return false;
      if (IsStatic != other.IsStatic) return false;
      if(!boxCorners_.Equals(other.boxCorners_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(V, other.V)) return false;
      if (LaneId != other.LaneId) return false;
      if (IsVirtualEdge != other.IsVirtualEdge) return false;
      if (IsVirtualEdgeForLaneChange != other.IsVirtualEdgeForLaneChange) return false;
      if (IsVirtualEdgeForCrossing != other.IsVirtualEdgeForCrossing) return false;
      if (IsLaneChangingWall != other.IsLaneChangingWall) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LaneChangingWallExpectDis, other.LaneChangingWallExpectDis)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VirtualCoeff, other.VirtualCoeff)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTimestamp) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Timestamp);
      if (stBoundaries_ != null) hash ^= StBoundaries.GetHashCode();
      if (predictDynoInfo_ != null) hash ^= PredictDynoInfo.GetHashCode();
      if (HasSProjectedOnPlannedPath) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SProjectedOnPlannedPath);
      if (HasPolicyType) hash ^= PolicyType.GetHashCode();
      if (HasId) hash ^= Id.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (HasW) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(W);
      if (HasL) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(L);
      if (HasIsStatic) hash ^= IsStatic.GetHashCode();
      hash ^= boxCorners_.GetHashCode();
      if (HasV) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(V);
      if (HasLaneId) hash ^= LaneId.GetHashCode();
      if (HasIsVirtualEdge) hash ^= IsVirtualEdge.GetHashCode();
      if (HasIsVirtualEdgeForLaneChange) hash ^= IsVirtualEdgeForLaneChange.GetHashCode();
      if (HasIsVirtualEdgeForCrossing) hash ^= IsVirtualEdgeForCrossing.GetHashCode();
      if (HasIsLaneChangingWall) hash ^= IsLaneChangingWall.GetHashCode();
      if (HasLaneChangingWallExpectDis) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LaneChangingWallExpectDis);
      if (HasVirtualCoeff) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VirtualCoeff);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTimestamp) {
        output.WriteRawTag(9);
        output.WriteDouble(Timestamp);
      }
      if (stBoundaries_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StBoundaries);
      }
      if (predictDynoInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PredictDynoInfo);
      }
      if (HasSProjectedOnPlannedPath) {
        output.WriteRawTag(37);
        output.WriteFloat(SProjectedOnPlannedPath);
      }
      if (HasPolicyType) {
        output.WriteRawTag(40);
        output.WriteInt32(PolicyType);
      }
      if (HasId) {
        output.WriteRawTag(48);
        output.WriteInt32(Id);
      }
      if (HasType) {
        output.WriteRawTag(56);
        output.WriteInt32(Type);
      }
      if (HasW) {
        output.WriteRawTag(69);
        output.WriteFloat(W);
      }
      if (HasL) {
        output.WriteRawTag(77);
        output.WriteFloat(L);
      }
      if (HasIsStatic) {
        output.WriteRawTag(80);
        output.WriteBool(IsStatic);
      }
      boxCorners_.WriteTo(output, _repeated_boxCorners_codec);
      if (HasV) {
        output.WriteRawTag(101);
        output.WriteFloat(V);
      }
      if (HasLaneId) {
        output.WriteRawTag(104);
        output.WriteInt32(LaneId);
      }
      if (HasIsVirtualEdge) {
        output.WriteRawTag(112);
        output.WriteBool(IsVirtualEdge);
      }
      if (HasIsVirtualEdgeForLaneChange) {
        output.WriteRawTag(120);
        output.WriteBool(IsVirtualEdgeForLaneChange);
      }
      if (HasIsVirtualEdgeForCrossing) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsVirtualEdgeForCrossing);
      }
      if (HasIsLaneChangingWall) {
        output.WriteRawTag(136, 1);
        output.WriteBool(IsLaneChangingWall);
      }
      if (HasLaneChangingWallExpectDis) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(LaneChangingWallExpectDis);
      }
      if (HasVirtualCoeff) {
        output.WriteRawTag(153, 1);
        output.WriteDouble(VirtualCoeff);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTimestamp) {
        size += 1 + 8;
      }
      if (stBoundaries_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StBoundaries);
      }
      if (predictDynoInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PredictDynoInfo);
      }
      if (HasSProjectedOnPlannedPath) {
        size += 1 + 4;
      }
      if (HasPolicyType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PolicyType);
      }
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (HasW) {
        size += 1 + 4;
      }
      if (HasL) {
        size += 1 + 4;
      }
      if (HasIsStatic) {
        size += 1 + 1;
      }
      size += boxCorners_.CalculateSize(_repeated_boxCorners_codec);
      if (HasV) {
        size += 1 + 4;
      }
      if (HasLaneId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LaneId);
      }
      if (HasIsVirtualEdge) {
        size += 1 + 1;
      }
      if (HasIsVirtualEdgeForLaneChange) {
        size += 1 + 1;
      }
      if (HasIsVirtualEdgeForCrossing) {
        size += 2 + 1;
      }
      if (HasIsLaneChangingWall) {
        size += 2 + 1;
      }
      if (HasLaneChangingWallExpectDis) {
        size += 2 + 8;
      }
      if (HasVirtualCoeff) {
        size += 2 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(STObjectInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      if (other.stBoundaries_ != null) {
        if (stBoundaries_ == null) {
          StBoundaries = new global::Xviewer.STObjectBoundary();
        }
        StBoundaries.MergeFrom(other.StBoundaries);
      }
      if (other.predictDynoInfo_ != null) {
        if (predictDynoInfo_ == null) {
          PredictDynoInfo = new global::Xviewer.ObstaclePredictiveDynoInfo();
        }
        PredictDynoInfo.MergeFrom(other.PredictDynoInfo);
      }
      if (other.HasSProjectedOnPlannedPath) {
        SProjectedOnPlannedPath = other.SProjectedOnPlannedPath;
      }
      if (other.HasPolicyType) {
        PolicyType = other.PolicyType;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasW) {
        W = other.W;
      }
      if (other.HasL) {
        L = other.L;
      }
      if (other.HasIsStatic) {
        IsStatic = other.IsStatic;
      }
      boxCorners_.Add(other.boxCorners_);
      if (other.HasV) {
        V = other.V;
      }
      if (other.HasLaneId) {
        LaneId = other.LaneId;
      }
      if (other.HasIsVirtualEdge) {
        IsVirtualEdge = other.IsVirtualEdge;
      }
      if (other.HasIsVirtualEdgeForLaneChange) {
        IsVirtualEdgeForLaneChange = other.IsVirtualEdgeForLaneChange;
      }
      if (other.HasIsVirtualEdgeForCrossing) {
        IsVirtualEdgeForCrossing = other.IsVirtualEdgeForCrossing;
      }
      if (other.HasIsLaneChangingWall) {
        IsLaneChangingWall = other.IsLaneChangingWall;
      }
      if (other.HasLaneChangingWallExpectDis) {
        LaneChangingWallExpectDis = other.LaneChangingWallExpectDis;
      }
      if (other.HasVirtualCoeff) {
        VirtualCoeff = other.VirtualCoeff;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Timestamp = input.ReadDouble();
            break;
          }
          case 18: {
            if (stBoundaries_ == null) {
              StBoundaries = new global::Xviewer.STObjectBoundary();
            }
            input.ReadMessage(StBoundaries);
            break;
          }
          case 26: {
            if (predictDynoInfo_ == null) {
              PredictDynoInfo = new global::Xviewer.ObstaclePredictiveDynoInfo();
            }
            input.ReadMessage(PredictDynoInfo);
            break;
          }
          case 37: {
            SProjectedOnPlannedPath = input.ReadFloat();
            break;
          }
          case 40: {
            PolicyType = input.ReadInt32();
            break;
          }
          case 48: {
            Id = input.ReadInt32();
            break;
          }
          case 56: {
            Type = input.ReadInt32();
            break;
          }
          case 69: {
            W = input.ReadFloat();
            break;
          }
          case 77: {
            L = input.ReadFloat();
            break;
          }
          case 80: {
            IsStatic = input.ReadBool();
            break;
          }
          case 90: {
            boxCorners_.AddEntriesFrom(input, _repeated_boxCorners_codec);
            break;
          }
          case 101: {
            V = input.ReadFloat();
            break;
          }
          case 104: {
            LaneId = input.ReadInt32();
            break;
          }
          case 112: {
            IsVirtualEdge = input.ReadBool();
            break;
          }
          case 120: {
            IsVirtualEdgeForLaneChange = input.ReadBool();
            break;
          }
          case 128: {
            IsVirtualEdgeForCrossing = input.ReadBool();
            break;
          }
          case 136: {
            IsLaneChangingWall = input.ReadBool();
            break;
          }
          case 145: {
            LaneChangingWallExpectDis = input.ReadDouble();
            break;
          }
          case 153: {
            VirtualCoeff = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class STRefinedVehicleStatusStamped : pb::IMessage<STRefinedVehicleStatusStamped> {
    private static readonly pb::MessageParser<STRefinedVehicleStatusStamped> _parser = new pb::MessageParser<STRefinedVehicleStatusStamped>(() => new STRefinedVehicleStatusStamped());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<STRefinedVehicleStatusStamped> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PlannerDebugReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STRefinedVehicleStatusStamped() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STRefinedVehicleStatusStamped(STRefinedVehicleStatusStamped other) : this() {
      _hasBits0 = other._hasBits0;
      timestamp_ = other.timestamp_;
      location_ = other.location_ != null ? other.location_.Clone() : null;
      headingAngle_ = other.headingAngle_;
      linearVelocity_ = other.linearVelocity_;
      linearAcceleration_ = other.linearAcceleration_;
      wheelAngle_ = other.wheelAngle_;
      lateralDistanceToEgoReferenceLine_ = other.lateralDistanceToEgoReferenceLine_;
      yawAtOrigin_ = other.yawAtOrigin_;
      realLinearVelocity_ = other.realLinearVelocity_;
      realLinearAcceleration_ = other.realLinearAcceleration_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STRefinedVehicleStatusStamped Clone() {
      return new STRefinedVehicleStatusStamped(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private readonly static double TimestampDefaultValue = 0D;

    private double timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Timestamp {
      get { if ((_hasBits0 & 1) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 1;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimestamp {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestamp() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 2;
    private global::Xviewer.STPoint3D location_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.STPoint3D Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "heading_angle" field.</summary>
    public const int HeadingAngleFieldNumber = 3;
    private readonly static float HeadingAngleDefaultValue = 0F;

    private float headingAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeadingAngle {
      get { if ((_hasBits0 & 2) != 0) { return headingAngle_; } else { return HeadingAngleDefaultValue; } }
      set {
        _hasBits0 |= 2;
        headingAngle_ = value;
      }
    }
    /// <summary>Gets whether the "heading_angle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeadingAngle {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "heading_angle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeadingAngle() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "linear_velocity" field.</summary>
    public const int LinearVelocityFieldNumber = 4;
    private readonly static float LinearVelocityDefaultValue = 0F;

    private float linearVelocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LinearVelocity {
      get { if ((_hasBits0 & 4) != 0) { return linearVelocity_; } else { return LinearVelocityDefaultValue; } }
      set {
        _hasBits0 |= 4;
        linearVelocity_ = value;
      }
    }
    /// <summary>Gets whether the "linear_velocity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLinearVelocity {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "linear_velocity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLinearVelocity() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "linear_acceleration" field.</summary>
    public const int LinearAccelerationFieldNumber = 5;
    private readonly static float LinearAccelerationDefaultValue = 0F;

    private float linearAcceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LinearAcceleration {
      get { if ((_hasBits0 & 8) != 0) { return linearAcceleration_; } else { return LinearAccelerationDefaultValue; } }
      set {
        _hasBits0 |= 8;
        linearAcceleration_ = value;
      }
    }
    /// <summary>Gets whether the "linear_acceleration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLinearAcceleration {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "linear_acceleration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLinearAcceleration() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "wheel_angle" field.</summary>
    public const int WheelAngleFieldNumber = 6;
    private readonly static float WheelAngleDefaultValue = 0F;

    private float wheelAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WheelAngle {
      get { if ((_hasBits0 & 16) != 0) { return wheelAngle_; } else { return WheelAngleDefaultValue; } }
      set {
        _hasBits0 |= 16;
        wheelAngle_ = value;
      }
    }
    /// <summary>Gets whether the "wheel_angle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWheelAngle {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "wheel_angle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWheelAngle() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "lateral_distance_to_ego_reference_line" field.</summary>
    public const int LateralDistanceToEgoReferenceLineFieldNumber = 7;
    private readonly static float LateralDistanceToEgoReferenceLineDefaultValue = 0F;

    private float lateralDistanceToEgoReferenceLine_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LateralDistanceToEgoReferenceLine {
      get { if ((_hasBits0 & 32) != 0) { return lateralDistanceToEgoReferenceLine_; } else { return LateralDistanceToEgoReferenceLineDefaultValue; } }
      set {
        _hasBits0 |= 32;
        lateralDistanceToEgoReferenceLine_ = value;
      }
    }
    /// <summary>Gets whether the "lateral_distance_to_ego_reference_line" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLateralDistanceToEgoReferenceLine {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "lateral_distance_to_ego_reference_line" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLateralDistanceToEgoReferenceLine() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "yaw_at_origin" field.</summary>
    public const int YawAtOriginFieldNumber = 8;
    private readonly static float YawAtOriginDefaultValue = 0F;

    private float yawAtOrigin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float YawAtOrigin {
      get { if ((_hasBits0 & 64) != 0) { return yawAtOrigin_; } else { return YawAtOriginDefaultValue; } }
      set {
        _hasBits0 |= 64;
        yawAtOrigin_ = value;
      }
    }
    /// <summary>Gets whether the "yaw_at_origin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasYawAtOrigin {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "yaw_at_origin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearYawAtOrigin() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "real_linear_velocity" field.</summary>
    public const int RealLinearVelocityFieldNumber = 9;
    private readonly static float RealLinearVelocityDefaultValue = 0F;

    private float realLinearVelocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RealLinearVelocity {
      get { if ((_hasBits0 & 128) != 0) { return realLinearVelocity_; } else { return RealLinearVelocityDefaultValue; } }
      set {
        _hasBits0 |= 128;
        realLinearVelocity_ = value;
      }
    }
    /// <summary>Gets whether the "real_linear_velocity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRealLinearVelocity {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "real_linear_velocity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRealLinearVelocity() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "real_linear_acceleration" field.</summary>
    public const int RealLinearAccelerationFieldNumber = 10;
    private readonly static float RealLinearAccelerationDefaultValue = 0F;

    private float realLinearAcceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RealLinearAcceleration {
      get { if ((_hasBits0 & 256) != 0) { return realLinearAcceleration_; } else { return RealLinearAccelerationDefaultValue; } }
      set {
        _hasBits0 |= 256;
        realLinearAcceleration_ = value;
      }
    }
    /// <summary>Gets whether the "real_linear_acceleration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRealLinearAcceleration {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "real_linear_acceleration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRealLinearAcceleration() {
      _hasBits0 &= ~256;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as STRefinedVehicleStatusStamped);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(STRefinedVehicleStatusStamped other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Timestamp, other.Timestamp)) return false;
      if (!object.Equals(Location, other.Location)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HeadingAngle, other.HeadingAngle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LinearVelocity, other.LinearVelocity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LinearAcceleration, other.LinearAcceleration)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WheelAngle, other.WheelAngle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LateralDistanceToEgoReferenceLine, other.LateralDistanceToEgoReferenceLine)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(YawAtOrigin, other.YawAtOrigin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RealLinearVelocity, other.RealLinearVelocity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RealLinearAcceleration, other.RealLinearAcceleration)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTimestamp) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Timestamp);
      if (location_ != null) hash ^= Location.GetHashCode();
      if (HasHeadingAngle) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HeadingAngle);
      if (HasLinearVelocity) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LinearVelocity);
      if (HasLinearAcceleration) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LinearAcceleration);
      if (HasWheelAngle) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WheelAngle);
      if (HasLateralDistanceToEgoReferenceLine) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LateralDistanceToEgoReferenceLine);
      if (HasYawAtOrigin) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(YawAtOrigin);
      if (HasRealLinearVelocity) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RealLinearVelocity);
      if (HasRealLinearAcceleration) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RealLinearAcceleration);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTimestamp) {
        output.WriteRawTag(9);
        output.WriteDouble(Timestamp);
      }
      if (location_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Location);
      }
      if (HasHeadingAngle) {
        output.WriteRawTag(29);
        output.WriteFloat(HeadingAngle);
      }
      if (HasLinearVelocity) {
        output.WriteRawTag(37);
        output.WriteFloat(LinearVelocity);
      }
      if (HasLinearAcceleration) {
        output.WriteRawTag(45);
        output.WriteFloat(LinearAcceleration);
      }
      if (HasWheelAngle) {
        output.WriteRawTag(53);
        output.WriteFloat(WheelAngle);
      }
      if (HasLateralDistanceToEgoReferenceLine) {
        output.WriteRawTag(61);
        output.WriteFloat(LateralDistanceToEgoReferenceLine);
      }
      if (HasYawAtOrigin) {
        output.WriteRawTag(69);
        output.WriteFloat(YawAtOrigin);
      }
      if (HasRealLinearVelocity) {
        output.WriteRawTag(77);
        output.WriteFloat(RealLinearVelocity);
      }
      if (HasRealLinearAcceleration) {
        output.WriteRawTag(85);
        output.WriteFloat(RealLinearAcceleration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTimestamp) {
        size += 1 + 8;
      }
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (HasHeadingAngle) {
        size += 1 + 4;
      }
      if (HasLinearVelocity) {
        size += 1 + 4;
      }
      if (HasLinearAcceleration) {
        size += 1 + 4;
      }
      if (HasWheelAngle) {
        size += 1 + 4;
      }
      if (HasLateralDistanceToEgoReferenceLine) {
        size += 1 + 4;
      }
      if (HasYawAtOrigin) {
        size += 1 + 4;
      }
      if (HasRealLinearVelocity) {
        size += 1 + 4;
      }
      if (HasRealLinearAcceleration) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(STRefinedVehicleStatusStamped other) {
      if (other == null) {
        return;
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          Location = new global::Xviewer.STPoint3D();
        }
        Location.MergeFrom(other.Location);
      }
      if (other.HasHeadingAngle) {
        HeadingAngle = other.HeadingAngle;
      }
      if (other.HasLinearVelocity) {
        LinearVelocity = other.LinearVelocity;
      }
      if (other.HasLinearAcceleration) {
        LinearAcceleration = other.LinearAcceleration;
      }
      if (other.HasWheelAngle) {
        WheelAngle = other.WheelAngle;
      }
      if (other.HasLateralDistanceToEgoReferenceLine) {
        LateralDistanceToEgoReferenceLine = other.LateralDistanceToEgoReferenceLine;
      }
      if (other.HasYawAtOrigin) {
        YawAtOrigin = other.YawAtOrigin;
      }
      if (other.HasRealLinearVelocity) {
        RealLinearVelocity = other.RealLinearVelocity;
      }
      if (other.HasRealLinearAcceleration) {
        RealLinearAcceleration = other.RealLinearAcceleration;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Timestamp = input.ReadDouble();
            break;
          }
          case 18: {
            if (location_ == null) {
              Location = new global::Xviewer.STPoint3D();
            }
            input.ReadMessage(Location);
            break;
          }
          case 29: {
            HeadingAngle = input.ReadFloat();
            break;
          }
          case 37: {
            LinearVelocity = input.ReadFloat();
            break;
          }
          case 45: {
            LinearAcceleration = input.ReadFloat();
            break;
          }
          case 53: {
            WheelAngle = input.ReadFloat();
            break;
          }
          case 61: {
            LateralDistanceToEgoReferenceLine = input.ReadFloat();
            break;
          }
          case 69: {
            YawAtOrigin = input.ReadFloat();
            break;
          }
          case 77: {
            RealLinearVelocity = input.ReadFloat();
            break;
          }
          case 85: {
            RealLinearAcceleration = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChassisDynoLimits : pb::IMessage<ChassisDynoLimits> {
    private static readonly pb::MessageParser<ChassisDynoLimits> _parser = new pb::MessageParser<ChassisDynoLimits>(() => new ChassisDynoLimits());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChassisDynoLimits> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PlannerDebugReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChassisDynoLimits() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChassisDynoLimits(ChassisDynoLimits other) : this() {
      _hasBits0 = other._hasBits0;
      maxNormalAcceleration_ = other.maxNormalAcceleration_;
      maxNormalDeceleration_ = other.maxNormalDeceleration_;
      aebDeceleration_ = other.aebDeceleration_;
      maxRadialAcceleration_ = other.maxRadialAcceleration_;
      maxChangeLaneAcceleration_ = other.maxChangeLaneAcceleration_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChassisDynoLimits Clone() {
      return new ChassisDynoLimits(this);
    }

    /// <summary>Field number for the "max_normal_acceleration" field.</summary>
    public const int MaxNormalAccelerationFieldNumber = 1;
    private readonly static float MaxNormalAccelerationDefaultValue = 0F;

    private float maxNormalAcceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxNormalAcceleration {
      get { if ((_hasBits0 & 1) != 0) { return maxNormalAcceleration_; } else { return MaxNormalAccelerationDefaultValue; } }
      set {
        _hasBits0 |= 1;
        maxNormalAcceleration_ = value;
      }
    }
    /// <summary>Gets whether the "max_normal_acceleration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaxNormalAcceleration {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "max_normal_acceleration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMaxNormalAcceleration() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "max_normal_deceleration" field.</summary>
    public const int MaxNormalDecelerationFieldNumber = 2;
    private readonly static float MaxNormalDecelerationDefaultValue = 0F;

    private float maxNormalDeceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxNormalDeceleration {
      get { if ((_hasBits0 & 2) != 0) { return maxNormalDeceleration_; } else { return MaxNormalDecelerationDefaultValue; } }
      set {
        _hasBits0 |= 2;
        maxNormalDeceleration_ = value;
      }
    }
    /// <summary>Gets whether the "max_normal_deceleration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaxNormalDeceleration {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "max_normal_deceleration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMaxNormalDeceleration() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "aeb_deceleration" field.</summary>
    public const int AebDecelerationFieldNumber = 3;
    private readonly static float AebDecelerationDefaultValue = 0F;

    private float aebDeceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AebDeceleration {
      get { if ((_hasBits0 & 4) != 0) { return aebDeceleration_; } else { return AebDecelerationDefaultValue; } }
      set {
        _hasBits0 |= 4;
        aebDeceleration_ = value;
      }
    }
    /// <summary>Gets whether the "aeb_deceleration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAebDeceleration {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "aeb_deceleration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAebDeceleration() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "max_radial_acceleration" field.</summary>
    public const int MaxRadialAccelerationFieldNumber = 4;
    private readonly static float MaxRadialAccelerationDefaultValue = 0F;

    private float maxRadialAcceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxRadialAcceleration {
      get { if ((_hasBits0 & 8) != 0) { return maxRadialAcceleration_; } else { return MaxRadialAccelerationDefaultValue; } }
      set {
        _hasBits0 |= 8;
        maxRadialAcceleration_ = value;
      }
    }
    /// <summary>Gets whether the "max_radial_acceleration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaxRadialAcceleration {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "max_radial_acceleration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMaxRadialAcceleration() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "max_change_lane_acceleration" field.</summary>
    public const int MaxChangeLaneAccelerationFieldNumber = 5;
    private readonly static float MaxChangeLaneAccelerationDefaultValue = 0F;

    private float maxChangeLaneAcceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxChangeLaneAcceleration {
      get { if ((_hasBits0 & 16) != 0) { return maxChangeLaneAcceleration_; } else { return MaxChangeLaneAccelerationDefaultValue; } }
      set {
        _hasBits0 |= 16;
        maxChangeLaneAcceleration_ = value;
      }
    }
    /// <summary>Gets whether the "max_change_lane_acceleration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaxChangeLaneAcceleration {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "max_change_lane_acceleration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMaxChangeLaneAcceleration() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChassisDynoLimits);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChassisDynoLimits other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxNormalAcceleration, other.MaxNormalAcceleration)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxNormalDeceleration, other.MaxNormalDeceleration)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AebDeceleration, other.AebDeceleration)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxRadialAcceleration, other.MaxRadialAcceleration)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxChangeLaneAcceleration, other.MaxChangeLaneAcceleration)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMaxNormalAcceleration) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxNormalAcceleration);
      if (HasMaxNormalDeceleration) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxNormalDeceleration);
      if (HasAebDeceleration) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AebDeceleration);
      if (HasMaxRadialAcceleration) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxRadialAcceleration);
      if (HasMaxChangeLaneAcceleration) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxChangeLaneAcceleration);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasMaxNormalAcceleration) {
        output.WriteRawTag(13);
        output.WriteFloat(MaxNormalAcceleration);
      }
      if (HasMaxNormalDeceleration) {
        output.WriteRawTag(21);
        output.WriteFloat(MaxNormalDeceleration);
      }
      if (HasAebDeceleration) {
        output.WriteRawTag(29);
        output.WriteFloat(AebDeceleration);
      }
      if (HasMaxRadialAcceleration) {
        output.WriteRawTag(37);
        output.WriteFloat(MaxRadialAcceleration);
      }
      if (HasMaxChangeLaneAcceleration) {
        output.WriteRawTag(45);
        output.WriteFloat(MaxChangeLaneAcceleration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMaxNormalAcceleration) {
        size += 1 + 4;
      }
      if (HasMaxNormalDeceleration) {
        size += 1 + 4;
      }
      if (HasAebDeceleration) {
        size += 1 + 4;
      }
      if (HasMaxRadialAcceleration) {
        size += 1 + 4;
      }
      if (HasMaxChangeLaneAcceleration) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChassisDynoLimits other) {
      if (other == null) {
        return;
      }
      if (other.HasMaxNormalAcceleration) {
        MaxNormalAcceleration = other.MaxNormalAcceleration;
      }
      if (other.HasMaxNormalDeceleration) {
        MaxNormalDeceleration = other.MaxNormalDeceleration;
      }
      if (other.HasAebDeceleration) {
        AebDeceleration = other.AebDeceleration;
      }
      if (other.HasMaxRadialAcceleration) {
        MaxRadialAcceleration = other.MaxRadialAcceleration;
      }
      if (other.HasMaxChangeLaneAcceleration) {
        MaxChangeLaneAcceleration = other.MaxChangeLaneAcceleration;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            MaxNormalAcceleration = input.ReadFloat();
            break;
          }
          case 21: {
            MaxNormalDeceleration = input.ReadFloat();
            break;
          }
          case 29: {
            AebDeceleration = input.ReadFloat();
            break;
          }
          case 37: {
            MaxRadialAcceleration = input.ReadFloat();
            break;
          }
          case 45: {
            MaxChangeLaneAcceleration = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChassisInfo : pb::IMessage<ChassisInfo> {
    private static readonly pb::MessageParser<ChassisInfo> _parser = new pb::MessageParser<ChassisInfo>(() => new ChassisInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChassisInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PlannerDebugReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChassisInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChassisInfo(ChassisInfo other) : this() {
      _hasBits0 = other._hasBits0;
      length_ = other.length_;
      width_ = other.width_;
      wheelBase_ = other.wheelBase_;
      gpsToHead_ = other.gpsToHead_;
      dynoLimits_ = other.dynoLimits_ != null ? other.dynoLimits_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChassisInfo Clone() {
      return new ChassisInfo(this);
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 1;
    private readonly static float LengthDefaultValue = 0F;

    private float length_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Length {
      get { if ((_hasBits0 & 1) != 0) { return length_; } else { return LengthDefaultValue; } }
      set {
        _hasBits0 |= 1;
        length_ = value;
      }
    }
    /// <summary>Gets whether the "length" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLength {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "length" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLength() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 2;
    private readonly static float WidthDefaultValue = 0F;

    private float width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Width {
      get { if ((_hasBits0 & 2) != 0) { return width_; } else { return WidthDefaultValue; } }
      set {
        _hasBits0 |= 2;
        width_ = value;
      }
    }
    /// <summary>Gets whether the "width" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWidth {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "width" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWidth() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "wheel_base" field.</summary>
    public const int WheelBaseFieldNumber = 3;
    private readonly static float WheelBaseDefaultValue = 0F;

    private float wheelBase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WheelBase {
      get { if ((_hasBits0 & 4) != 0) { return wheelBase_; } else { return WheelBaseDefaultValue; } }
      set {
        _hasBits0 |= 4;
        wheelBase_ = value;
      }
    }
    /// <summary>Gets whether the "wheel_base" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWheelBase {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "wheel_base" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWheelBase() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "gps_to_head" field.</summary>
    public const int GpsToHeadFieldNumber = 4;
    private readonly static float GpsToHeadDefaultValue = 0F;

    private float gpsToHead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GpsToHead {
      get { if ((_hasBits0 & 8) != 0) { return gpsToHead_; } else { return GpsToHeadDefaultValue; } }
      set {
        _hasBits0 |= 8;
        gpsToHead_ = value;
      }
    }
    /// <summary>Gets whether the "gps_to_head" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGpsToHead {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "gps_to_head" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGpsToHead() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "dyno_limits" field.</summary>
    public const int DynoLimitsFieldNumber = 5;
    private global::Xviewer.ChassisDynoLimits dynoLimits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.ChassisDynoLimits DynoLimits {
      get { return dynoLimits_; }
      set {
        dynoLimits_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChassisInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChassisInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Length, other.Length)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Width, other.Width)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WheelBase, other.WheelBase)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GpsToHead, other.GpsToHead)) return false;
      if (!object.Equals(DynoLimits, other.DynoLimits)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLength) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Length);
      if (HasWidth) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Width);
      if (HasWheelBase) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WheelBase);
      if (HasGpsToHead) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GpsToHead);
      if (dynoLimits_ != null) hash ^= DynoLimits.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasLength) {
        output.WriteRawTag(13);
        output.WriteFloat(Length);
      }
      if (HasWidth) {
        output.WriteRawTag(21);
        output.WriteFloat(Width);
      }
      if (HasWheelBase) {
        output.WriteRawTag(29);
        output.WriteFloat(WheelBase);
      }
      if (HasGpsToHead) {
        output.WriteRawTag(37);
        output.WriteFloat(GpsToHead);
      }
      if (dynoLimits_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DynoLimits);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasLength) {
        size += 1 + 4;
      }
      if (HasWidth) {
        size += 1 + 4;
      }
      if (HasWheelBase) {
        size += 1 + 4;
      }
      if (HasGpsToHead) {
        size += 1 + 4;
      }
      if (dynoLimits_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DynoLimits);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChassisInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasLength) {
        Length = other.Length;
      }
      if (other.HasWidth) {
        Width = other.Width;
      }
      if (other.HasWheelBase) {
        WheelBase = other.WheelBase;
      }
      if (other.HasGpsToHead) {
        GpsToHead = other.GpsToHead;
      }
      if (other.dynoLimits_ != null) {
        if (dynoLimits_ == null) {
          DynoLimits = new global::Xviewer.ChassisDynoLimits();
        }
        DynoLimits.MergeFrom(other.DynoLimits);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Length = input.ReadFloat();
            break;
          }
          case 21: {
            Width = input.ReadFloat();
            break;
          }
          case 29: {
            WheelBase = input.ReadFloat();
            break;
          }
          case 37: {
            GpsToHead = input.ReadFloat();
            break;
          }
          case 42: {
            if (dynoLimits_ == null) {
              DynoLimits = new global::Xviewer.ChassisDynoLimits();
            }
            input.ReadMessage(DynoLimits);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SpeedPlanningDetail : pb::IMessage<SpeedPlanningDetail> {
    private static readonly pb::MessageParser<SpeedPlanningDetail> _parser = new pb::MessageParser<SpeedPlanningDetail>(() => new SpeedPlanningDetail());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpeedPlanningDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PlannerDebugReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedPlanningDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedPlanningDetail(SpeedPlanningDetail other) : this() {
      _hasBits0 = other._hasBits0;
      brakeStatus_ = other.brakeStatus_;
      lastIsInFollow_ = other.lastIsInFollow_;
      inLowerDec_ = other.inLowerDec_;
      longCarFollowNearMode_ = other.longCarFollowNearMode_;
      carFollowNearMode_ = other.carFollowNearMode_;
      addVirtualObMode_ = other.addVirtualObMode_;
      isInDynamicEmergencyZone_ = other.isInDynamicEmergencyZone_;
      obMap_ = other.obMap_ != null ? other.obMap_.Clone() : null;
      virtualEdgeMap_ = other.virtualEdgeMap_ != null ? other.virtualEdgeMap_.Clone() : null;
      virtualEmergencyZoneFlag_ = other.virtualEmergencyZoneFlag_;
      lastIsInSlowCutIn_ = other.lastIsInSlowCutIn_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedPlanningDetail Clone() {
      return new SpeedPlanningDetail(this);
    }

    /// <summary>Field number for the "brake_status" field.</summary>
    public const int BrakeStatusFieldNumber = 1;
    private readonly static bool BrakeStatusDefaultValue = false;

    private bool brakeStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BrakeStatus {
      get { if ((_hasBits0 & 1) != 0) { return brakeStatus_; } else { return BrakeStatusDefaultValue; } }
      set {
        _hasBits0 |= 1;
        brakeStatus_ = value;
      }
    }
    /// <summary>Gets whether the "brake_status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBrakeStatus {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "brake_status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBrakeStatus() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "last_is_in_follow" field.</summary>
    public const int LastIsInFollowFieldNumber = 2;
    private readonly static bool LastIsInFollowDefaultValue = false;

    private bool lastIsInFollow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LastIsInFollow {
      get { if ((_hasBits0 & 2) != 0) { return lastIsInFollow_; } else { return LastIsInFollowDefaultValue; } }
      set {
        _hasBits0 |= 2;
        lastIsInFollow_ = value;
      }
    }
    /// <summary>Gets whether the "last_is_in_follow" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLastIsInFollow {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "last_is_in_follow" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLastIsInFollow() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "in_lower_dec" field.</summary>
    public const int InLowerDecFieldNumber = 3;
    private readonly static bool InLowerDecDefaultValue = false;

    private bool inLowerDec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InLowerDec {
      get { if ((_hasBits0 & 4) != 0) { return inLowerDec_; } else { return InLowerDecDefaultValue; } }
      set {
        _hasBits0 |= 4;
        inLowerDec_ = value;
      }
    }
    /// <summary>Gets whether the "in_lower_dec" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInLowerDec {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "in_lower_dec" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInLowerDec() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "long_car_follow_near_mode" field.</summary>
    public const int LongCarFollowNearModeFieldNumber = 4;
    private readonly static bool LongCarFollowNearModeDefaultValue = false;

    private bool longCarFollowNearMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LongCarFollowNearMode {
      get { if ((_hasBits0 & 8) != 0) { return longCarFollowNearMode_; } else { return LongCarFollowNearModeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        longCarFollowNearMode_ = value;
      }
    }
    /// <summary>Gets whether the "long_car_follow_near_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLongCarFollowNearMode {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "long_car_follow_near_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLongCarFollowNearMode() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "car_follow_near_mode" field.</summary>
    public const int CarFollowNearModeFieldNumber = 5;
    private readonly static bool CarFollowNearModeDefaultValue = false;

    private bool carFollowNearMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CarFollowNearMode {
      get { if ((_hasBits0 & 16) != 0) { return carFollowNearMode_; } else { return CarFollowNearModeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        carFollowNearMode_ = value;
      }
    }
    /// <summary>Gets whether the "car_follow_near_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCarFollowNearMode {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "car_follow_near_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCarFollowNearMode() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "add_virtual_ob_mode" field.</summary>
    public const int AddVirtualObModeFieldNumber = 6;
    private readonly static bool AddVirtualObModeDefaultValue = false;

    private bool addVirtualObMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AddVirtualObMode {
      get { if ((_hasBits0 & 32) != 0) { return addVirtualObMode_; } else { return AddVirtualObModeDefaultValue; } }
      set {
        _hasBits0 |= 32;
        addVirtualObMode_ = value;
      }
    }
    /// <summary>Gets whether the "add_virtual_ob_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAddVirtualObMode {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "add_virtual_ob_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAddVirtualObMode() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "is_in_dynamic_emergency_zone" field.</summary>
    public const int IsInDynamicEmergencyZoneFieldNumber = 7;
    private readonly static bool IsInDynamicEmergencyZoneDefaultValue = false;

    private bool isInDynamicEmergencyZone_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInDynamicEmergencyZone {
      get { if ((_hasBits0 & 64) != 0) { return isInDynamicEmergencyZone_; } else { return IsInDynamicEmergencyZoneDefaultValue; } }
      set {
        _hasBits0 |= 64;
        isInDynamicEmergencyZone_ = value;
      }
    }
    /// <summary>Gets whether the "is_in_dynamic_emergency_zone" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsInDynamicEmergencyZone {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "is_in_dynamic_emergency_zone" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsInDynamicEmergencyZone() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "ob_map" field.</summary>
    public const int ObMapFieldNumber = 8;
    private global::Xviewer.ObMap obMap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.ObMap ObMap {
      get { return obMap_; }
      set {
        obMap_ = value;
      }
    }

    /// <summary>Field number for the "virtual_edge_map" field.</summary>
    public const int VirtualEdgeMapFieldNumber = 9;
    private global::Xviewer.ObMap virtualEdgeMap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.ObMap VirtualEdgeMap {
      get { return virtualEdgeMap_; }
      set {
        virtualEdgeMap_ = value;
      }
    }

    /// <summary>Field number for the "virtual_emergency_zone_flag" field.</summary>
    public const int VirtualEmergencyZoneFlagFieldNumber = 10;
    private readonly static bool VirtualEmergencyZoneFlagDefaultValue = false;

    private bool virtualEmergencyZoneFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VirtualEmergencyZoneFlag {
      get { if ((_hasBits0 & 128) != 0) { return virtualEmergencyZoneFlag_; } else { return VirtualEmergencyZoneFlagDefaultValue; } }
      set {
        _hasBits0 |= 128;
        virtualEmergencyZoneFlag_ = value;
      }
    }
    /// <summary>Gets whether the "virtual_emergency_zone_flag" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVirtualEmergencyZoneFlag {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "virtual_emergency_zone_flag" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVirtualEmergencyZoneFlag() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "last_is_in_slow_cut_in" field.</summary>
    public const int LastIsInSlowCutInFieldNumber = 11;
    private readonly static bool LastIsInSlowCutInDefaultValue = false;

    private bool lastIsInSlowCutIn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LastIsInSlowCutIn {
      get { if ((_hasBits0 & 256) != 0) { return lastIsInSlowCutIn_; } else { return LastIsInSlowCutInDefaultValue; } }
      set {
        _hasBits0 |= 256;
        lastIsInSlowCutIn_ = value;
      }
    }
    /// <summary>Gets whether the "last_is_in_slow_cut_in" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLastIsInSlowCutIn {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "last_is_in_slow_cut_in" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLastIsInSlowCutIn() {
      _hasBits0 &= ~256;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpeedPlanningDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpeedPlanningDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BrakeStatus != other.BrakeStatus) return false;
      if (LastIsInFollow != other.LastIsInFollow) return false;
      if (InLowerDec != other.InLowerDec) return false;
      if (LongCarFollowNearMode != other.LongCarFollowNearMode) return false;
      if (CarFollowNearMode != other.CarFollowNearMode) return false;
      if (AddVirtualObMode != other.AddVirtualObMode) return false;
      if (IsInDynamicEmergencyZone != other.IsInDynamicEmergencyZone) return false;
      if (!object.Equals(ObMap, other.ObMap)) return false;
      if (!object.Equals(VirtualEdgeMap, other.VirtualEdgeMap)) return false;
      if (VirtualEmergencyZoneFlag != other.VirtualEmergencyZoneFlag) return false;
      if (LastIsInSlowCutIn != other.LastIsInSlowCutIn) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBrakeStatus) hash ^= BrakeStatus.GetHashCode();
      if (HasLastIsInFollow) hash ^= LastIsInFollow.GetHashCode();
      if (HasInLowerDec) hash ^= InLowerDec.GetHashCode();
      if (HasLongCarFollowNearMode) hash ^= LongCarFollowNearMode.GetHashCode();
      if (HasCarFollowNearMode) hash ^= CarFollowNearMode.GetHashCode();
      if (HasAddVirtualObMode) hash ^= AddVirtualObMode.GetHashCode();
      if (HasIsInDynamicEmergencyZone) hash ^= IsInDynamicEmergencyZone.GetHashCode();
      if (obMap_ != null) hash ^= ObMap.GetHashCode();
      if (virtualEdgeMap_ != null) hash ^= VirtualEdgeMap.GetHashCode();
      if (HasVirtualEmergencyZoneFlag) hash ^= VirtualEmergencyZoneFlag.GetHashCode();
      if (HasLastIsInSlowCutIn) hash ^= LastIsInSlowCutIn.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasBrakeStatus) {
        output.WriteRawTag(8);
        output.WriteBool(BrakeStatus);
      }
      if (HasLastIsInFollow) {
        output.WriteRawTag(16);
        output.WriteBool(LastIsInFollow);
      }
      if (HasInLowerDec) {
        output.WriteRawTag(24);
        output.WriteBool(InLowerDec);
      }
      if (HasLongCarFollowNearMode) {
        output.WriteRawTag(32);
        output.WriteBool(LongCarFollowNearMode);
      }
      if (HasCarFollowNearMode) {
        output.WriteRawTag(40);
        output.WriteBool(CarFollowNearMode);
      }
      if (HasAddVirtualObMode) {
        output.WriteRawTag(48);
        output.WriteBool(AddVirtualObMode);
      }
      if (HasIsInDynamicEmergencyZone) {
        output.WriteRawTag(56);
        output.WriteBool(IsInDynamicEmergencyZone);
      }
      if (obMap_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ObMap);
      }
      if (virtualEdgeMap_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(VirtualEdgeMap);
      }
      if (HasVirtualEmergencyZoneFlag) {
        output.WriteRawTag(80);
        output.WriteBool(VirtualEmergencyZoneFlag);
      }
      if (HasLastIsInSlowCutIn) {
        output.WriteRawTag(88);
        output.WriteBool(LastIsInSlowCutIn);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasBrakeStatus) {
        size += 1 + 1;
      }
      if (HasLastIsInFollow) {
        size += 1 + 1;
      }
      if (HasInLowerDec) {
        size += 1 + 1;
      }
      if (HasLongCarFollowNearMode) {
        size += 1 + 1;
      }
      if (HasCarFollowNearMode) {
        size += 1 + 1;
      }
      if (HasAddVirtualObMode) {
        size += 1 + 1;
      }
      if (HasIsInDynamicEmergencyZone) {
        size += 1 + 1;
      }
      if (obMap_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObMap);
      }
      if (virtualEdgeMap_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VirtualEdgeMap);
      }
      if (HasVirtualEmergencyZoneFlag) {
        size += 1 + 1;
      }
      if (HasLastIsInSlowCutIn) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpeedPlanningDetail other) {
      if (other == null) {
        return;
      }
      if (other.HasBrakeStatus) {
        BrakeStatus = other.BrakeStatus;
      }
      if (other.HasLastIsInFollow) {
        LastIsInFollow = other.LastIsInFollow;
      }
      if (other.HasInLowerDec) {
        InLowerDec = other.InLowerDec;
      }
      if (other.HasLongCarFollowNearMode) {
        LongCarFollowNearMode = other.LongCarFollowNearMode;
      }
      if (other.HasCarFollowNearMode) {
        CarFollowNearMode = other.CarFollowNearMode;
      }
      if (other.HasAddVirtualObMode) {
        AddVirtualObMode = other.AddVirtualObMode;
      }
      if (other.HasIsInDynamicEmergencyZone) {
        IsInDynamicEmergencyZone = other.IsInDynamicEmergencyZone;
      }
      if (other.obMap_ != null) {
        if (obMap_ == null) {
          ObMap = new global::Xviewer.ObMap();
        }
        ObMap.MergeFrom(other.ObMap);
      }
      if (other.virtualEdgeMap_ != null) {
        if (virtualEdgeMap_ == null) {
          VirtualEdgeMap = new global::Xviewer.ObMap();
        }
        VirtualEdgeMap.MergeFrom(other.VirtualEdgeMap);
      }
      if (other.HasVirtualEmergencyZoneFlag) {
        VirtualEmergencyZoneFlag = other.VirtualEmergencyZoneFlag;
      }
      if (other.HasLastIsInSlowCutIn) {
        LastIsInSlowCutIn = other.LastIsInSlowCutIn;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BrakeStatus = input.ReadBool();
            break;
          }
          case 16: {
            LastIsInFollow = input.ReadBool();
            break;
          }
          case 24: {
            InLowerDec = input.ReadBool();
            break;
          }
          case 32: {
            LongCarFollowNearMode = input.ReadBool();
            break;
          }
          case 40: {
            CarFollowNearMode = input.ReadBool();
            break;
          }
          case 48: {
            AddVirtualObMode = input.ReadBool();
            break;
          }
          case 56: {
            IsInDynamicEmergencyZone = input.ReadBool();
            break;
          }
          case 66: {
            if (obMap_ == null) {
              ObMap = new global::Xviewer.ObMap();
            }
            input.ReadMessage(ObMap);
            break;
          }
          case 74: {
            if (virtualEdgeMap_ == null) {
              VirtualEdgeMap = new global::Xviewer.ObMap();
            }
            input.ReadMessage(VirtualEdgeMap);
            break;
          }
          case 80: {
            VirtualEmergencyZoneFlag = input.ReadBool();
            break;
          }
          case 88: {
            LastIsInSlowCutIn = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class STDebug : pb::IMessage<STDebug> {
    private static readonly pb::MessageParser<STDebug> _parser = new pb::MessageParser<STDebug>(() => new STDebug());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<STDebug> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PlannerDebugReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STDebug() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STDebug(STDebug other) : this() {
      _hasBits0 = other._hasBits0;
      stPath_ = other.stPath_ != null ? other.stPath_.Clone() : null;
      stInfoList_ = other.stInfoList_.Clone();
      vehicleStatus_ = other.vehicleStatus_ != null ? other.vehicleStatus_.Clone() : null;
      chassisInfo_ = other.chassisInfo_ != null ? other.chassisInfo_.Clone() : null;
      localRecommendSpeed_ = other.localRecommendSpeed_;
      inChangeLane_ = other.inChangeLane_;
      cruiseSpeed_ = other.cruiseSpeed_;
      roadSpeedLimit_ = other.roadSpeedLimit_ != null ? other.roadSpeedLimit_.Clone() : null;
      speedPlanningDetail_ = other.speedPlanningDetail_ != null ? other.speedPlanningDetail_.Clone() : null;
      timestamp_ = other.timestamp_;
      cruiseSpeedList_ = other.cruiseSpeedList_ != null ? other.cruiseSpeedList_.Clone() : null;
      lateralPolicyType_ = other.lateralPolicyType_;
      laneChangeStatus_ = other.laneChangeStatus_;
      minStaticObsDis_ = other.minStaticObsDis_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STDebug Clone() {
      return new STDebug(this);
    }

    /// <summary>Field number for the "st_path" field.</summary>
    public const int StPathFieldNumber = 1;
    private global::Xviewer.STPath stPath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.STPath StPath {
      get { return stPath_; }
      set {
        stPath_ = value;
      }
    }

    /// <summary>Field number for the "st_info_list" field.</summary>
    public const int StInfoListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xviewer.STObjectInfo> _repeated_stInfoList_codec
        = pb::FieldCodec.ForMessage(18, global::Xviewer.STObjectInfo.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.STObjectInfo> stInfoList_ = new pbc::RepeatedField<global::Xviewer.STObjectInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.STObjectInfo> StInfoList {
      get { return stInfoList_; }
    }

    /// <summary>Field number for the "vehicle_status" field.</summary>
    public const int VehicleStatusFieldNumber = 3;
    private global::Xviewer.STRefinedVehicleStatusStamped vehicleStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.STRefinedVehicleStatusStamped VehicleStatus {
      get { return vehicleStatus_; }
      set {
        vehicleStatus_ = value;
      }
    }

    /// <summary>Field number for the "chassis_info" field.</summary>
    public const int ChassisInfoFieldNumber = 4;
    private global::Xviewer.ChassisInfo chassisInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.ChassisInfo ChassisInfo {
      get { return chassisInfo_; }
      set {
        chassisInfo_ = value;
      }
    }

    /// <summary>Field number for the "local_recommend_speed" field.</summary>
    public const int LocalRecommendSpeedFieldNumber = 5;
    private readonly static float LocalRecommendSpeedDefaultValue = 0F;

    private float localRecommendSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LocalRecommendSpeed {
      get { if ((_hasBits0 & 1) != 0) { return localRecommendSpeed_; } else { return LocalRecommendSpeedDefaultValue; } }
      set {
        _hasBits0 |= 1;
        localRecommendSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "local_recommend_speed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLocalRecommendSpeed {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "local_recommend_speed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLocalRecommendSpeed() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "in_change_lane" field.</summary>
    public const int InChangeLaneFieldNumber = 6;
    private readonly static bool InChangeLaneDefaultValue = false;

    private bool inChangeLane_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InChangeLane {
      get { if ((_hasBits0 & 2) != 0) { return inChangeLane_; } else { return InChangeLaneDefaultValue; } }
      set {
        _hasBits0 |= 2;
        inChangeLane_ = value;
      }
    }
    /// <summary>Gets whether the "in_change_lane" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInChangeLane {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "in_change_lane" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInChangeLane() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "cruise_speed" field.</summary>
    public const int CruiseSpeedFieldNumber = 7;
    private readonly static float CruiseSpeedDefaultValue = 0F;

    private float cruiseSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CruiseSpeed {
      get { if ((_hasBits0 & 4) != 0) { return cruiseSpeed_; } else { return CruiseSpeedDefaultValue; } }
      set {
        _hasBits0 |= 4;
        cruiseSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "cruise_speed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCruiseSpeed {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "cruise_speed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCruiseSpeed() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "road_speed_limit" field.</summary>
    public const int RoadSpeedLimitFieldNumber = 8;
    private global::Xviewer.SpeedLimit roadSpeedLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.SpeedLimit RoadSpeedLimit {
      get { return roadSpeedLimit_; }
      set {
        roadSpeedLimit_ = value;
      }
    }

    /// <summary>Field number for the "speed_planning_detail" field.</summary>
    public const int SpeedPlanningDetailFieldNumber = 9;
    private global::Xviewer.SpeedPlanningDetail speedPlanningDetail_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.SpeedPlanningDetail SpeedPlanningDetail {
      get { return speedPlanningDetail_; }
      set {
        speedPlanningDetail_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 10;
    private readonly static double TimestampDefaultValue = 0D;

    private double timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Timestamp {
      get { if ((_hasBits0 & 8) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 8;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimestamp {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestamp() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "cruise_speed_list" field.</summary>
    public const int CruiseSpeedListFieldNumber = 11;
    private global::Xviewer.SpeedData cruiseSpeedList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.SpeedData CruiseSpeedList {
      get { return cruiseSpeedList_; }
      set {
        cruiseSpeedList_ = value;
      }
    }

    /// <summary>Field number for the "lateral_policy_type" field.</summary>
    public const int LateralPolicyTypeFieldNumber = 12;
    private readonly static int LateralPolicyTypeDefaultValue = 0;

    private int lateralPolicyType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LateralPolicyType {
      get { if ((_hasBits0 & 16) != 0) { return lateralPolicyType_; } else { return LateralPolicyTypeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        lateralPolicyType_ = value;
      }
    }
    /// <summary>Gets whether the "lateral_policy_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLateralPolicyType {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "lateral_policy_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLateralPolicyType() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "lane_change_status" field.</summary>
    public const int LaneChangeStatusFieldNumber = 13;
    private readonly static int LaneChangeStatusDefaultValue = 0;

    private int laneChangeStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LaneChangeStatus {
      get { if ((_hasBits0 & 32) != 0) { return laneChangeStatus_; } else { return LaneChangeStatusDefaultValue; } }
      set {
        _hasBits0 |= 32;
        laneChangeStatus_ = value;
      }
    }
    /// <summary>Gets whether the "lane_change_status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLaneChangeStatus {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "lane_change_status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLaneChangeStatus() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "min_static_obs_dis" field.</summary>
    public const int MinStaticObsDisFieldNumber = 14;
    private readonly static double MinStaticObsDisDefaultValue = 0D;

    private double minStaticObsDis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinStaticObsDis {
      get { if ((_hasBits0 & 64) != 0) { return minStaticObsDis_; } else { return MinStaticObsDisDefaultValue; } }
      set {
        _hasBits0 |= 64;
        minStaticObsDis_ = value;
      }
    }
    /// <summary>Gets whether the "min_static_obs_dis" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMinStaticObsDis {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "min_static_obs_dis" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMinStaticObsDis() {
      _hasBits0 &= ~64;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as STDebug);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(STDebug other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StPath, other.StPath)) return false;
      if(!stInfoList_.Equals(other.stInfoList_)) return false;
      if (!object.Equals(VehicleStatus, other.VehicleStatus)) return false;
      if (!object.Equals(ChassisInfo, other.ChassisInfo)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LocalRecommendSpeed, other.LocalRecommendSpeed)) return false;
      if (InChangeLane != other.InChangeLane) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CruiseSpeed, other.CruiseSpeed)) return false;
      if (!object.Equals(RoadSpeedLimit, other.RoadSpeedLimit)) return false;
      if (!object.Equals(SpeedPlanningDetail, other.SpeedPlanningDetail)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Timestamp, other.Timestamp)) return false;
      if (!object.Equals(CruiseSpeedList, other.CruiseSpeedList)) return false;
      if (LateralPolicyType != other.LateralPolicyType) return false;
      if (LaneChangeStatus != other.LaneChangeStatus) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinStaticObsDis, other.MinStaticObsDis)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (stPath_ != null) hash ^= StPath.GetHashCode();
      hash ^= stInfoList_.GetHashCode();
      if (vehicleStatus_ != null) hash ^= VehicleStatus.GetHashCode();
      if (chassisInfo_ != null) hash ^= ChassisInfo.GetHashCode();
      if (HasLocalRecommendSpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LocalRecommendSpeed);
      if (HasInChangeLane) hash ^= InChangeLane.GetHashCode();
      if (HasCruiseSpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CruiseSpeed);
      if (roadSpeedLimit_ != null) hash ^= RoadSpeedLimit.GetHashCode();
      if (speedPlanningDetail_ != null) hash ^= SpeedPlanningDetail.GetHashCode();
      if (HasTimestamp) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Timestamp);
      if (cruiseSpeedList_ != null) hash ^= CruiseSpeedList.GetHashCode();
      if (HasLateralPolicyType) hash ^= LateralPolicyType.GetHashCode();
      if (HasLaneChangeStatus) hash ^= LaneChangeStatus.GetHashCode();
      if (HasMinStaticObsDis) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinStaticObsDis);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (stPath_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StPath);
      }
      stInfoList_.WriteTo(output, _repeated_stInfoList_codec);
      if (vehicleStatus_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(VehicleStatus);
      }
      if (chassisInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ChassisInfo);
      }
      if (HasLocalRecommendSpeed) {
        output.WriteRawTag(45);
        output.WriteFloat(LocalRecommendSpeed);
      }
      if (HasInChangeLane) {
        output.WriteRawTag(48);
        output.WriteBool(InChangeLane);
      }
      if (HasCruiseSpeed) {
        output.WriteRawTag(61);
        output.WriteFloat(CruiseSpeed);
      }
      if (roadSpeedLimit_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(RoadSpeedLimit);
      }
      if (speedPlanningDetail_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(SpeedPlanningDetail);
      }
      if (HasTimestamp) {
        output.WriteRawTag(81);
        output.WriteDouble(Timestamp);
      }
      if (cruiseSpeedList_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(CruiseSpeedList);
      }
      if (HasLateralPolicyType) {
        output.WriteRawTag(96);
        output.WriteInt32(LateralPolicyType);
      }
      if (HasLaneChangeStatus) {
        output.WriteRawTag(104);
        output.WriteInt32(LaneChangeStatus);
      }
      if (HasMinStaticObsDis) {
        output.WriteRawTag(113);
        output.WriteDouble(MinStaticObsDis);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (stPath_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StPath);
      }
      size += stInfoList_.CalculateSize(_repeated_stInfoList_codec);
      if (vehicleStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VehicleStatus);
      }
      if (chassisInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChassisInfo);
      }
      if (HasLocalRecommendSpeed) {
        size += 1 + 4;
      }
      if (HasInChangeLane) {
        size += 1 + 1;
      }
      if (HasCruiseSpeed) {
        size += 1 + 4;
      }
      if (roadSpeedLimit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoadSpeedLimit);
      }
      if (speedPlanningDetail_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpeedPlanningDetail);
      }
      if (HasTimestamp) {
        size += 1 + 8;
      }
      if (cruiseSpeedList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CruiseSpeedList);
      }
      if (HasLateralPolicyType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LateralPolicyType);
      }
      if (HasLaneChangeStatus) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LaneChangeStatus);
      }
      if (HasMinStaticObsDis) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(STDebug other) {
      if (other == null) {
        return;
      }
      if (other.stPath_ != null) {
        if (stPath_ == null) {
          StPath = new global::Xviewer.STPath();
        }
        StPath.MergeFrom(other.StPath);
      }
      stInfoList_.Add(other.stInfoList_);
      if (other.vehicleStatus_ != null) {
        if (vehicleStatus_ == null) {
          VehicleStatus = new global::Xviewer.STRefinedVehicleStatusStamped();
        }
        VehicleStatus.MergeFrom(other.VehicleStatus);
      }
      if (other.chassisInfo_ != null) {
        if (chassisInfo_ == null) {
          ChassisInfo = new global::Xviewer.ChassisInfo();
        }
        ChassisInfo.MergeFrom(other.ChassisInfo);
      }
      if (other.HasLocalRecommendSpeed) {
        LocalRecommendSpeed = other.LocalRecommendSpeed;
      }
      if (other.HasInChangeLane) {
        InChangeLane = other.InChangeLane;
      }
      if (other.HasCruiseSpeed) {
        CruiseSpeed = other.CruiseSpeed;
      }
      if (other.roadSpeedLimit_ != null) {
        if (roadSpeedLimit_ == null) {
          RoadSpeedLimit = new global::Xviewer.SpeedLimit();
        }
        RoadSpeedLimit.MergeFrom(other.RoadSpeedLimit);
      }
      if (other.speedPlanningDetail_ != null) {
        if (speedPlanningDetail_ == null) {
          SpeedPlanningDetail = new global::Xviewer.SpeedPlanningDetail();
        }
        SpeedPlanningDetail.MergeFrom(other.SpeedPlanningDetail);
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      if (other.cruiseSpeedList_ != null) {
        if (cruiseSpeedList_ == null) {
          CruiseSpeedList = new global::Xviewer.SpeedData();
        }
        CruiseSpeedList.MergeFrom(other.CruiseSpeedList);
      }
      if (other.HasLateralPolicyType) {
        LateralPolicyType = other.LateralPolicyType;
      }
      if (other.HasLaneChangeStatus) {
        LaneChangeStatus = other.LaneChangeStatus;
      }
      if (other.HasMinStaticObsDis) {
        MinStaticObsDis = other.MinStaticObsDis;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (stPath_ == null) {
              StPath = new global::Xviewer.STPath();
            }
            input.ReadMessage(StPath);
            break;
          }
          case 18: {
            stInfoList_.AddEntriesFrom(input, _repeated_stInfoList_codec);
            break;
          }
          case 26: {
            if (vehicleStatus_ == null) {
              VehicleStatus = new global::Xviewer.STRefinedVehicleStatusStamped();
            }
            input.ReadMessage(VehicleStatus);
            break;
          }
          case 34: {
            if (chassisInfo_ == null) {
              ChassisInfo = new global::Xviewer.ChassisInfo();
            }
            input.ReadMessage(ChassisInfo);
            break;
          }
          case 45: {
            LocalRecommendSpeed = input.ReadFloat();
            break;
          }
          case 48: {
            InChangeLane = input.ReadBool();
            break;
          }
          case 61: {
            CruiseSpeed = input.ReadFloat();
            break;
          }
          case 66: {
            if (roadSpeedLimit_ == null) {
              RoadSpeedLimit = new global::Xviewer.SpeedLimit();
            }
            input.ReadMessage(RoadSpeedLimit);
            break;
          }
          case 74: {
            if (speedPlanningDetail_ == null) {
              SpeedPlanningDetail = new global::Xviewer.SpeedPlanningDetail();
            }
            input.ReadMessage(SpeedPlanningDetail);
            break;
          }
          case 81: {
            Timestamp = input.ReadDouble();
            break;
          }
          case 90: {
            if (cruiseSpeedList_ == null) {
              CruiseSpeedList = new global::Xviewer.SpeedData();
            }
            input.ReadMessage(CruiseSpeedList);
            break;
          }
          case 96: {
            LateralPolicyType = input.ReadInt32();
            break;
          }
          case 104: {
            LaneChangeStatus = input.ReadInt32();
            break;
          }
          case 113: {
            MinStaticObsDis = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SpeedPoint : pb::IMessage<SpeedPoint> {
    private static readonly pb::MessageParser<SpeedPoint> _parser = new pb::MessageParser<SpeedPoint>(() => new SpeedPoint());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpeedPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PlannerDebugReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedPoint(SpeedPoint other) : this() {
      _hasBits0 = other._hasBits0;
      s_ = other.s_;
      v_ = other.v_;
      a_ = other.a_;
      da_ = other.da_;
      t_ = other.t_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedPoint Clone() {
      return new SpeedPoint(this);
    }

    /// <summary>Field number for the "s" field.</summary>
    public const int SFieldNumber = 1;
    private readonly static float SDefaultValue = 0F;

    private float s_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float S {
      get { if ((_hasBits0 & 1) != 0) { return s_; } else { return SDefaultValue; } }
      set {
        _hasBits0 |= 1;
        s_ = value;
      }
    }
    /// <summary>Gets whether the "s" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasS {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "s" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearS() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "v" field.</summary>
    public const int VFieldNumber = 2;
    private readonly static float VDefaultValue = 0F;

    private float v_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float V {
      get { if ((_hasBits0 & 2) != 0) { return v_; } else { return VDefaultValue; } }
      set {
        _hasBits0 |= 2;
        v_ = value;
      }
    }
    /// <summary>Gets whether the "v" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasV {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "v" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearV() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 3;
    private readonly static float ADefaultValue = 0F;

    private float a_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float A {
      get { if ((_hasBits0 & 4) != 0) { return a_; } else { return ADefaultValue; } }
      set {
        _hasBits0 |= 4;
        a_ = value;
      }
    }
    /// <summary>Gets whether the "a" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasA {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "a" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearA() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "da" field.</summary>
    public const int DaFieldNumber = 4;
    private readonly static float DaDefaultValue = 0F;

    private float da_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Da {
      get { if ((_hasBits0 & 8) != 0) { return da_; } else { return DaDefaultValue; } }
      set {
        _hasBits0 |= 8;
        da_ = value;
      }
    }
    /// <summary>Gets whether the "da" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDa {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "da" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDa() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "t" field.</summary>
    public const int TFieldNumber = 5;
    private readonly static float TDefaultValue = 0F;

    private float t_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float T {
      get { if ((_hasBits0 & 16) != 0) { return t_; } else { return TDefaultValue; } }
      set {
        _hasBits0 |= 16;
        t_ = value;
      }
    }
    /// <summary>Gets whether the "t" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasT {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "t" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearT() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpeedPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpeedPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(S, other.S)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(V, other.V)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(A, other.A)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Da, other.Da)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(T, other.T)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasS) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(S);
      if (HasV) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(V);
      if (HasA) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(A);
      if (HasDa) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Da);
      if (HasT) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(T);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasS) {
        output.WriteRawTag(13);
        output.WriteFloat(S);
      }
      if (HasV) {
        output.WriteRawTag(21);
        output.WriteFloat(V);
      }
      if (HasA) {
        output.WriteRawTag(29);
        output.WriteFloat(A);
      }
      if (HasDa) {
        output.WriteRawTag(37);
        output.WriteFloat(Da);
      }
      if (HasT) {
        output.WriteRawTag(45);
        output.WriteFloat(T);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasS) {
        size += 1 + 4;
      }
      if (HasV) {
        size += 1 + 4;
      }
      if (HasA) {
        size += 1 + 4;
      }
      if (HasDa) {
        size += 1 + 4;
      }
      if (HasT) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpeedPoint other) {
      if (other == null) {
        return;
      }
      if (other.HasS) {
        S = other.S;
      }
      if (other.HasV) {
        V = other.V;
      }
      if (other.HasA) {
        A = other.A;
      }
      if (other.HasDa) {
        Da = other.Da;
      }
      if (other.HasT) {
        T = other.T;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            S = input.ReadFloat();
            break;
          }
          case 21: {
            V = input.ReadFloat();
            break;
          }
          case 29: {
            A = input.ReadFloat();
            break;
          }
          case 37: {
            Da = input.ReadFloat();
            break;
          }
          case 45: {
            T = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SpeedData : pb::IMessage<SpeedData> {
    private static readonly pb::MessageParser<SpeedData> _parser = new pb::MessageParser<SpeedData>(() => new SpeedData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpeedData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PlannerDebugReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedData(SpeedData other) : this() {
      speedPoints_ = other.speedPoints_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedData Clone() {
      return new SpeedData(this);
    }

    /// <summary>Field number for the "speed_points" field.</summary>
    public const int SpeedPointsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Xviewer.SpeedPoint> _repeated_speedPoints_codec
        = pb::FieldCodec.ForMessage(10, global::Xviewer.SpeedPoint.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.SpeedPoint> speedPoints_ = new pbc::RepeatedField<global::Xviewer.SpeedPoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.SpeedPoint> SpeedPoints {
      get { return speedPoints_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpeedData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpeedData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!speedPoints_.Equals(other.speedPoints_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= speedPoints_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      speedPoints_.WriteTo(output, _repeated_speedPoints_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += speedPoints_.CalculateSize(_repeated_speedPoints_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpeedData other) {
      if (other == null) {
        return;
      }
      speedPoints_.Add(other.speedPoints_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            speedPoints_.AddEntriesFrom(input, _repeated_speedPoints_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SVPoint : pb::IMessage<SVPoint> {
    private static readonly pb::MessageParser<SVPoint> _parser = new pb::MessageParser<SVPoint>(() => new SVPoint());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SVPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PlannerDebugReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SVPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SVPoint(SVPoint other) : this() {
      _hasBits0 = other._hasBits0;
      s_ = other.s_;
      v_ = other.v_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SVPoint Clone() {
      return new SVPoint(this);
    }

    /// <summary>Field number for the "s" field.</summary>
    public const int SFieldNumber = 1;
    private readonly static float SDefaultValue = 0F;

    private float s_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float S {
      get { if ((_hasBits0 & 1) != 0) { return s_; } else { return SDefaultValue; } }
      set {
        _hasBits0 |= 1;
        s_ = value;
      }
    }
    /// <summary>Gets whether the "s" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasS {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "s" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearS() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "v" field.</summary>
    public const int VFieldNumber = 2;
    private readonly static float VDefaultValue = 0F;

    private float v_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float V {
      get { if ((_hasBits0 & 2) != 0) { return v_; } else { return VDefaultValue; } }
      set {
        _hasBits0 |= 2;
        v_ = value;
      }
    }
    /// <summary>Gets whether the "v" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasV {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "v" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearV() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SVPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SVPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(S, other.S)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(V, other.V)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasS) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(S);
      if (HasV) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(V);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasS) {
        output.WriteRawTag(13);
        output.WriteFloat(S);
      }
      if (HasV) {
        output.WriteRawTag(21);
        output.WriteFloat(V);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasS) {
        size += 1 + 4;
      }
      if (HasV) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SVPoint other) {
      if (other == null) {
        return;
      }
      if (other.HasS) {
        S = other.S;
      }
      if (other.HasV) {
        V = other.V;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            S = input.ReadFloat();
            break;
          }
          case 21: {
            V = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SpeedLimit : pb::IMessage<SpeedLimit> {
    private static readonly pb::MessageParser<SpeedLimit> _parser = new pb::MessageParser<SpeedLimit>(() => new SpeedLimit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpeedLimit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PlannerDebugReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedLimit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedLimit(SpeedLimit other) : this() {
      speedLimitPoints_ = other.speedLimitPoints_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedLimit Clone() {
      return new SpeedLimit(this);
    }

    /// <summary>Field number for the "speed_limit_points" field.</summary>
    public const int SpeedLimitPointsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Xviewer.SVPoint> _repeated_speedLimitPoints_codec
        = pb::FieldCodec.ForMessage(10, global::Xviewer.SVPoint.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.SVPoint> speedLimitPoints_ = new pbc::RepeatedField<global::Xviewer.SVPoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.SVPoint> SpeedLimitPoints {
      get { return speedLimitPoints_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpeedLimit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpeedLimit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!speedLimitPoints_.Equals(other.speedLimitPoints_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= speedLimitPoints_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      speedLimitPoints_.WriteTo(output, _repeated_speedLimitPoints_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += speedLimitPoints_.CalculateSize(_repeated_speedLimitPoints_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpeedLimit other) {
      if (other == null) {
        return;
      }
      speedLimitPoints_.Add(other.speedLimitPoints_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            speedLimitPoints_.AddEntriesFrom(input, _repeated_speedLimitPoints_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FeasiblePoint : pb::IMessage<FeasiblePoint> {
    private static readonly pb::MessageParser<FeasiblePoint> _parser = new pb::MessageParser<FeasiblePoint>(() => new FeasiblePoint());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FeasiblePoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PlannerDebugReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeasiblePoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeasiblePoint(FeasiblePoint other) : this() {
      _hasBits0 = other._hasBits0;
      sMin_ = other.sMin_;
      sMax_ = other.sMax_;
      vMin_ = other.vMin_;
      vMax_ = other.vMax_;
      aMin_ = other.aMin_;
      aMax_ = other.aMax_;
      tS_ = other.tS_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeasiblePoint Clone() {
      return new FeasiblePoint(this);
    }

    /// <summary>Field number for the "s_min" field.</summary>
    public const int SMinFieldNumber = 1;
    private readonly static float SMinDefaultValue = 0F;

    private float sMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SMin {
      get { if ((_hasBits0 & 1) != 0) { return sMin_; } else { return SMinDefaultValue; } }
      set {
        _hasBits0 |= 1;
        sMin_ = value;
      }
    }
    /// <summary>Gets whether the "s_min" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSMin {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "s_min" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSMin() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "s_max" field.</summary>
    public const int SMaxFieldNumber = 2;
    private readonly static float SMaxDefaultValue = 0F;

    private float sMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SMax {
      get { if ((_hasBits0 & 2) != 0) { return sMax_; } else { return SMaxDefaultValue; } }
      set {
        _hasBits0 |= 2;
        sMax_ = value;
      }
    }
    /// <summary>Gets whether the "s_max" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSMax {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "s_max" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSMax() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "v_min" field.</summary>
    public const int VMinFieldNumber = 3;
    private readonly static float VMinDefaultValue = 0F;

    private float vMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VMin {
      get { if ((_hasBits0 & 4) != 0) { return vMin_; } else { return VMinDefaultValue; } }
      set {
        _hasBits0 |= 4;
        vMin_ = value;
      }
    }
    /// <summary>Gets whether the "v_min" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVMin {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "v_min" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVMin() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "v_max" field.</summary>
    public const int VMaxFieldNumber = 4;
    private readonly static float VMaxDefaultValue = 0F;

    private float vMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VMax {
      get { if ((_hasBits0 & 8) != 0) { return vMax_; } else { return VMaxDefaultValue; } }
      set {
        _hasBits0 |= 8;
        vMax_ = value;
      }
    }
    /// <summary>Gets whether the "v_max" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVMax {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "v_max" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVMax() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "a_min" field.</summary>
    public const int AMinFieldNumber = 5;
    private readonly static float AMinDefaultValue = 0F;

    private float aMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AMin {
      get { if ((_hasBits0 & 16) != 0) { return aMin_; } else { return AMinDefaultValue; } }
      set {
        _hasBits0 |= 16;
        aMin_ = value;
      }
    }
    /// <summary>Gets whether the "a_min" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAMin {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "a_min" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAMin() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "a_max" field.</summary>
    public const int AMaxFieldNumber = 6;
    private readonly static float AMaxDefaultValue = 0F;

    private float aMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AMax {
      get { if ((_hasBits0 & 32) != 0) { return aMax_; } else { return AMaxDefaultValue; } }
      set {
        _hasBits0 |= 32;
        aMax_ = value;
      }
    }
    /// <summary>Gets whether the "a_max" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAMax {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "a_max" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAMax() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "t_s" field.</summary>
    public const int TSFieldNumber = 7;
    private readonly static float TSDefaultValue = 0F;

    private float tS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TS {
      get { if ((_hasBits0 & 64) != 0) { return tS_; } else { return TSDefaultValue; } }
      set {
        _hasBits0 |= 64;
        tS_ = value;
      }
    }
    /// <summary>Gets whether the "t_s" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTS {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "t_s" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTS() {
      _hasBits0 &= ~64;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FeasiblePoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FeasiblePoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SMin, other.SMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SMax, other.SMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VMin, other.VMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VMax, other.VMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AMin, other.AMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AMax, other.AMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TS, other.TS)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSMin) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SMin);
      if (HasSMax) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SMax);
      if (HasVMin) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VMin);
      if (HasVMax) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VMax);
      if (HasAMin) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AMin);
      if (HasAMax) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AMax);
      if (HasTS) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TS);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasSMin) {
        output.WriteRawTag(13);
        output.WriteFloat(SMin);
      }
      if (HasSMax) {
        output.WriteRawTag(21);
        output.WriteFloat(SMax);
      }
      if (HasVMin) {
        output.WriteRawTag(29);
        output.WriteFloat(VMin);
      }
      if (HasVMax) {
        output.WriteRawTag(37);
        output.WriteFloat(VMax);
      }
      if (HasAMin) {
        output.WriteRawTag(45);
        output.WriteFloat(AMin);
      }
      if (HasAMax) {
        output.WriteRawTag(53);
        output.WriteFloat(AMax);
      }
      if (HasTS) {
        output.WriteRawTag(61);
        output.WriteFloat(TS);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSMin) {
        size += 1 + 4;
      }
      if (HasSMax) {
        size += 1 + 4;
      }
      if (HasVMin) {
        size += 1 + 4;
      }
      if (HasVMax) {
        size += 1 + 4;
      }
      if (HasAMin) {
        size += 1 + 4;
      }
      if (HasAMax) {
        size += 1 + 4;
      }
      if (HasTS) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FeasiblePoint other) {
      if (other == null) {
        return;
      }
      if (other.HasSMin) {
        SMin = other.SMin;
      }
      if (other.HasSMax) {
        SMax = other.SMax;
      }
      if (other.HasVMin) {
        VMin = other.VMin;
      }
      if (other.HasVMax) {
        VMax = other.VMax;
      }
      if (other.HasAMin) {
        AMin = other.AMin;
      }
      if (other.HasAMax) {
        AMax = other.AMax;
      }
      if (other.HasTS) {
        TS = other.TS;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            SMin = input.ReadFloat();
            break;
          }
          case 21: {
            SMax = input.ReadFloat();
            break;
          }
          case 29: {
            VMin = input.ReadFloat();
            break;
          }
          case 37: {
            VMax = input.ReadFloat();
            break;
          }
          case 45: {
            AMin = input.ReadFloat();
            break;
          }
          case 53: {
            AMax = input.ReadFloat();
            break;
          }
          case 61: {
            TS = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FeasibleData : pb::IMessage<FeasibleData> {
    private static readonly pb::MessageParser<FeasibleData> _parser = new pb::MessageParser<FeasibleData>(() => new FeasibleData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FeasibleData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PlannerDebugReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeasibleData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeasibleData(FeasibleData other) : this() {
      feasiblePoints_ = other.feasiblePoints_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeasibleData Clone() {
      return new FeasibleData(this);
    }

    /// <summary>Field number for the "feasible_points" field.</summary>
    public const int FeasiblePointsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Xviewer.FeasiblePoint> _repeated_feasiblePoints_codec
        = pb::FieldCodec.ForMessage(10, global::Xviewer.FeasiblePoint.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.FeasiblePoint> feasiblePoints_ = new pbc::RepeatedField<global::Xviewer.FeasiblePoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.FeasiblePoint> FeasiblePoints {
      get { return feasiblePoints_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FeasibleData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FeasibleData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!feasiblePoints_.Equals(other.feasiblePoints_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= feasiblePoints_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      feasiblePoints_.WriteTo(output, _repeated_feasiblePoints_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += feasiblePoints_.CalculateSize(_repeated_feasiblePoints_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FeasibleData other) {
      if (other == null) {
        return;
      }
      feasiblePoints_.Add(other.feasiblePoints_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            feasiblePoints_.AddEntriesFrom(input, _repeated_feasiblePoints_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class VirtualObsData : pb::IMessage<VirtualObsData> {
    private static readonly pb::MessageParser<VirtualObsData> _parser = new pb::MessageParser<VirtualObsData>(() => new VirtualObsData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VirtualObsData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PlannerDebugReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VirtualObsData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VirtualObsData(VirtualObsData other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      boxCorners_ = other.boxCorners_.Clone();
      w_ = other.w_;
      l_ = other.l_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VirtualObsData Clone() {
      return new VirtualObsData(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static int IdDefaultValue = 0;

    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "box_corners" field.</summary>
    public const int BoxCornersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xviewer.STPoint3D> _repeated_boxCorners_codec
        = pb::FieldCodec.ForMessage(18, global::Xviewer.STPoint3D.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.STPoint3D> boxCorners_ = new pbc::RepeatedField<global::Xviewer.STPoint3D>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.STPoint3D> BoxCorners {
      get { return boxCorners_; }
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 3;
    private readonly static float WDefaultValue = 0F;

    private float w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float W {
      get { if ((_hasBits0 & 2) != 0) { return w_; } else { return WDefaultValue; } }
      set {
        _hasBits0 |= 2;
        w_ = value;
      }
    }
    /// <summary>Gets whether the "w" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasW {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "w" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearW() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "l" field.</summary>
    public const int LFieldNumber = 4;
    private readonly static float LDefaultValue = 0F;

    private float l_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float L {
      get { if ((_hasBits0 & 4) != 0) { return l_; } else { return LDefaultValue; } }
      set {
        _hasBits0 |= 4;
        l_ = value;
      }
    }
    /// <summary>Gets whether the "l" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasL {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "l" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearL() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VirtualObsData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VirtualObsData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!boxCorners_.Equals(other.boxCorners_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(W, other.W)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(L, other.L)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      hash ^= boxCorners_.GetHashCode();
      if (HasW) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(W);
      if (HasL) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(L);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      boxCorners_.WriteTo(output, _repeated_boxCorners_codec);
      if (HasW) {
        output.WriteRawTag(29);
        output.WriteFloat(W);
      }
      if (HasL) {
        output.WriteRawTag(37);
        output.WriteFloat(L);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += boxCorners_.CalculateSize(_repeated_boxCorners_codec);
      if (HasW) {
        size += 1 + 4;
      }
      if (HasL) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VirtualObsData other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      boxCorners_.Add(other.boxCorners_);
      if (other.HasW) {
        W = other.W;
      }
      if (other.HasL) {
        L = other.L;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            boxCorners_.AddEntriesFrom(input, _repeated_boxCorners_codec);
            break;
          }
          case 29: {
            W = input.ReadFloat();
            break;
          }
          case 37: {
            L = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DesiredAccPoint : pb::IMessage<DesiredAccPoint> {
    private static readonly pb::MessageParser<DesiredAccPoint> _parser = new pb::MessageParser<DesiredAccPoint>(() => new DesiredAccPoint());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DesiredAccPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PlannerDebugReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DesiredAccPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DesiredAccPoint(DesiredAccPoint other) : this() {
      _hasBits0 = other._hasBits0;
      accelMaxDesired_ = other.accelMaxDesired_;
      accelMinDesired_ = other.accelMinDesired_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DesiredAccPoint Clone() {
      return new DesiredAccPoint(this);
    }

    /// <summary>Field number for the "accel_max_desired" field.</summary>
    public const int AccelMaxDesiredFieldNumber = 1;
    private readonly static float AccelMaxDesiredDefaultValue = 0F;

    private float accelMaxDesired_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AccelMaxDesired {
      get { if ((_hasBits0 & 1) != 0) { return accelMaxDesired_; } else { return AccelMaxDesiredDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accelMaxDesired_ = value;
      }
    }
    /// <summary>Gets whether the "accel_max_desired" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccelMaxDesired {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "accel_max_desired" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccelMaxDesired() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "accel_min_desired" field.</summary>
    public const int AccelMinDesiredFieldNumber = 2;
    private readonly static float AccelMinDesiredDefaultValue = 0F;

    private float accelMinDesired_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AccelMinDesired {
      get { if ((_hasBits0 & 2) != 0) { return accelMinDesired_; } else { return AccelMinDesiredDefaultValue; } }
      set {
        _hasBits0 |= 2;
        accelMinDesired_ = value;
      }
    }
    /// <summary>Gets whether the "accel_min_desired" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccelMinDesired {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "accel_min_desired" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccelMinDesired() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DesiredAccPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DesiredAccPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AccelMaxDesired, other.AccelMaxDesired)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AccelMinDesired, other.AccelMinDesired)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAccelMaxDesired) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AccelMaxDesired);
      if (HasAccelMinDesired) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AccelMinDesired);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasAccelMaxDesired) {
        output.WriteRawTag(13);
        output.WriteFloat(AccelMaxDesired);
      }
      if (HasAccelMinDesired) {
        output.WriteRawTag(21);
        output.WriteFloat(AccelMinDesired);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAccelMaxDesired) {
        size += 1 + 4;
      }
      if (HasAccelMinDesired) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DesiredAccPoint other) {
      if (other == null) {
        return;
      }
      if (other.HasAccelMaxDesired) {
        AccelMaxDesired = other.AccelMaxDesired;
      }
      if (other.HasAccelMinDesired) {
        AccelMinDesired = other.AccelMinDesired;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            AccelMaxDesired = input.ReadFloat();
            break;
          }
          case 21: {
            AccelMinDesired = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DesiredAcceleration : pb::IMessage<DesiredAcceleration> {
    private static readonly pb::MessageParser<DesiredAcceleration> _parser = new pb::MessageParser<DesiredAcceleration>(() => new DesiredAcceleration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DesiredAcceleration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PlannerDebugReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DesiredAcceleration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DesiredAcceleration(DesiredAcceleration other) : this() {
      desiredAccPoints_ = other.desiredAccPoints_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DesiredAcceleration Clone() {
      return new DesiredAcceleration(this);
    }

    /// <summary>Field number for the "desired_acc_points" field.</summary>
    public const int DesiredAccPointsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Xviewer.DesiredAccPoint> _repeated_desiredAccPoints_codec
        = pb::FieldCodec.ForMessage(10, global::Xviewer.DesiredAccPoint.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.DesiredAccPoint> desiredAccPoints_ = new pbc::RepeatedField<global::Xviewer.DesiredAccPoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.DesiredAccPoint> DesiredAccPoints {
      get { return desiredAccPoints_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DesiredAcceleration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DesiredAcceleration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!desiredAccPoints_.Equals(other.desiredAccPoints_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= desiredAccPoints_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      desiredAccPoints_.WriteTo(output, _repeated_desiredAccPoints_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += desiredAccPoints_.CalculateSize(_repeated_desiredAccPoints_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DesiredAcceleration other) {
      if (other == null) {
        return;
      }
      desiredAccPoints_.Add(other.desiredAccPoints_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            desiredAccPoints_.AddEntriesFrom(input, _repeated_desiredAccPoints_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObsIntentionPer : pb::IMessage<ObsIntentionPer> {
    private static readonly pb::MessageParser<ObsIntentionPer> _parser = new pb::MessageParser<ObsIntentionPer>(() => new ObsIntentionPer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObsIntentionPer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PlannerDebugReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObsIntentionPer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObsIntentionPer(ObsIntentionPer other) : this() {
      id_ = other.id_.Clone();
      per_ = other.per_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObsIntentionPer Clone() {
      return new ObsIntentionPer(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_id_codec
        = pb::FieldCodec.ForUInt64(8);
    private readonly pbc::RepeatedField<ulong> id_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Id {
      get { return id_; }
    }

    /// <summary>Field number for the "per" field.</summary>
    public const int PerFieldNumber = 2;
    private static readonly pb::FieldCodec<double> _repeated_per_codec
        = pb::FieldCodec.ForDouble(17);
    private readonly pbc::RepeatedField<double> per_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Per {
      get { return per_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObsIntentionPer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObsIntentionPer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!id_.Equals(other.id_)) return false;
      if(!per_.Equals(other.per_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= id_.GetHashCode();
      hash ^= per_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      id_.WriteTo(output, _repeated_id_codec);
      per_.WriteTo(output, _repeated_per_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += id_.CalculateSize(_repeated_id_codec);
      size += per_.CalculateSize(_repeated_per_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObsIntentionPer other) {
      if (other == null) {
        return;
      }
      id_.Add(other.id_);
      per_.Add(other.per_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            id_.AddEntriesFrom(input, _repeated_id_codec);
            break;
          }
          case 18:
          case 17: {
            per_.AddEntriesFrom(input, _repeated_per_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class STPubInfo : pb::IMessage<STPubInfo> {
    private static readonly pb::MessageParser<STPubInfo> _parser = new pb::MessageParser<STPubInfo>(() => new STPubInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<STPubInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xviewer.PlannerDebugReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STPubInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STPubInfo(STPubInfo other) : this() {
      _hasBits0 = other._hasBits0;
      stDebug_ = other.stDebug_ != null ? other.stDebug_.Clone() : null;
      stPlanningErrCode_ = other.stPlanningErrCode_;
      stBoundaries_ = other.stBoundaries_ != null ? other.stBoundaries_.Clone() : null;
      speedDataFallback_ = other.speedDataFallback_ != null ? other.speedDataFallback_.Clone() : null;
      speedDataDp_ = other.speedDataDp_ != null ? other.speedDataDp_.Clone() : null;
      speedDataQp_ = other.speedDataQp_ != null ? other.speedDataQp_.Clone() : null;
      stTrajType_ = other.stTrajType_;
      stPlanningErrCodeStr_ = other.stPlanningErrCodeStr_;
      speedLimit_ = other.speedLimit_ != null ? other.speedLimit_.Clone() : null;
      feasibleData_ = other.feasibleData_ != null ? other.feasibleData_.Clone() : null;
      timestamp_ = other.timestamp_;
      stInfoListVirtual_ = other.stInfoListVirtual_.Clone();
      intentionObId_ = other.intentionObId_.Clone();
      crossableObId_ = other.crossableObId_.Clone();
      virtualObsData_ = other.virtualObsData_.Clone();
      desiredAcc_ = other.desiredAcc_ != null ? other.desiredAcc_.Clone() : null;
      sMaxDesired_ = other.sMaxDesired_.Clone();
      referenceSpeed_ = other.referenceSpeed_.Clone();
      obsPer_ = other.obsPer_ != null ? other.obsPer_.Clone() : null;
      sMinDesired_ = other.sMinDesired_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STPubInfo Clone() {
      return new STPubInfo(this);
    }

    /// <summary>Field number for the "st_debug" field.</summary>
    public const int StDebugFieldNumber = 1;
    private global::Xviewer.STDebug stDebug_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.STDebug StDebug {
      get { return stDebug_; }
      set {
        stDebug_ = value;
      }
    }

    /// <summary>Field number for the "st_planning_err_code" field.</summary>
    public const int StPlanningErrCodeFieldNumber = 2;
    private readonly static int StPlanningErrCodeDefaultValue = 0;

    private int stPlanningErrCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StPlanningErrCode {
      get { if ((_hasBits0 & 1) != 0) { return stPlanningErrCode_; } else { return StPlanningErrCodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        stPlanningErrCode_ = value;
      }
    }
    /// <summary>Gets whether the "st_planning_err_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStPlanningErrCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "st_planning_err_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStPlanningErrCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "st_boundaries" field.</summary>
    public const int StBoundariesFieldNumber = 3;
    private global::Xviewer.STObjectBoundary stBoundaries_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.STObjectBoundary StBoundaries {
      get { return stBoundaries_; }
      set {
        stBoundaries_ = value;
      }
    }

    /// <summary>Field number for the "speed_data_fallback" field.</summary>
    public const int SpeedDataFallbackFieldNumber = 4;
    private global::Xviewer.SpeedData speedDataFallback_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.SpeedData SpeedDataFallback {
      get { return speedDataFallback_; }
      set {
        speedDataFallback_ = value;
      }
    }

    /// <summary>Field number for the "speed_data_dp" field.</summary>
    public const int SpeedDataDpFieldNumber = 5;
    private global::Xviewer.SpeedData speedDataDp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.SpeedData SpeedDataDp {
      get { return speedDataDp_; }
      set {
        speedDataDp_ = value;
      }
    }

    /// <summary>Field number for the "speed_data_qp" field.</summary>
    public const int SpeedDataQpFieldNumber = 6;
    private global::Xviewer.SpeedData speedDataQp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.SpeedData SpeedDataQp {
      get { return speedDataQp_; }
      set {
        speedDataQp_ = value;
      }
    }

    /// <summary>Field number for the "st_traj_type" field.</summary>
    public const int StTrajTypeFieldNumber = 7;
    private readonly static int StTrajTypeDefaultValue = 0;

    private int stTrajType_;
    /// <summary>
    /// # 0 failed,1 qp traj,2 fallback
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StTrajType {
      get { if ((_hasBits0 & 2) != 0) { return stTrajType_; } else { return StTrajTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        stTrajType_ = value;
      }
    }
    /// <summary>Gets whether the "st_traj_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStTrajType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "st_traj_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStTrajType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "st_planning_err_code_str" field.</summary>
    public const int StPlanningErrCodeStrFieldNumber = 8;
    private readonly static string StPlanningErrCodeStrDefaultValue = "";

    private string stPlanningErrCodeStr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StPlanningErrCodeStr {
      get { return stPlanningErrCodeStr_ ?? StPlanningErrCodeStrDefaultValue; }
      set {
        stPlanningErrCodeStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "st_planning_err_code_str" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStPlanningErrCodeStr {
      get { return stPlanningErrCodeStr_ != null; }
    }
    /// <summary>Clears the value of the "st_planning_err_code_str" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStPlanningErrCodeStr() {
      stPlanningErrCodeStr_ = null;
    }

    /// <summary>Field number for the "speed_limit" field.</summary>
    public const int SpeedLimitFieldNumber = 9;
    private global::Xviewer.SpeedLimit speedLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.SpeedLimit SpeedLimit {
      get { return speedLimit_; }
      set {
        speedLimit_ = value;
      }
    }

    /// <summary>Field number for the "feasible_data" field.</summary>
    public const int FeasibleDataFieldNumber = 10;
    private global::Xviewer.FeasibleData feasibleData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.FeasibleData FeasibleData {
      get { return feasibleData_; }
      set {
        feasibleData_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 11;
    private readonly static double TimestampDefaultValue = 0D;

    private double timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Timestamp {
      get { if ((_hasBits0 & 4) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 4;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimestamp {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestamp() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "st_info_list_virtual" field.</summary>
    public const int StInfoListVirtualFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Xviewer.STObjectInfo> _repeated_stInfoListVirtual_codec
        = pb::FieldCodec.ForMessage(98, global::Xviewer.STObjectInfo.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.STObjectInfo> stInfoListVirtual_ = new pbc::RepeatedField<global::Xviewer.STObjectInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.STObjectInfo> StInfoListVirtual {
      get { return stInfoListVirtual_; }
    }

    /// <summary>Field number for the "intention_ob_id" field.</summary>
    public const int IntentionObIdFieldNumber = 13;
    private static readonly pb::FieldCodec<ulong> _repeated_intentionObId_codec
        = pb::FieldCodec.ForUInt64(104);
    private readonly pbc::RepeatedField<ulong> intentionObId_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> IntentionObId {
      get { return intentionObId_; }
    }

    /// <summary>Field number for the "crossable_ob_id" field.</summary>
    public const int CrossableObIdFieldNumber = 14;
    private static readonly pb::FieldCodec<ulong> _repeated_crossableObId_codec
        = pb::FieldCodec.ForUInt64(112);
    private readonly pbc::RepeatedField<ulong> crossableObId_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> CrossableObId {
      get { return crossableObId_; }
    }

    /// <summary>Field number for the "virtual_obs_data" field.</summary>
    public const int VirtualObsDataFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Xviewer.VirtualObsData> _repeated_virtualObsData_codec
        = pb::FieldCodec.ForMessage(122, global::Xviewer.VirtualObsData.Parser);
    private readonly pbc::RepeatedField<global::Xviewer.VirtualObsData> virtualObsData_ = new pbc::RepeatedField<global::Xviewer.VirtualObsData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xviewer.VirtualObsData> VirtualObsData {
      get { return virtualObsData_; }
    }

    /// <summary>Field number for the "desired_acc" field.</summary>
    public const int DesiredAccFieldNumber = 16;
    private global::Xviewer.DesiredAcceleration desiredAcc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.DesiredAcceleration DesiredAcc {
      get { return desiredAcc_; }
      set {
        desiredAcc_ = value;
      }
    }

    /// <summary>Field number for the "s_max_desired" field.</summary>
    public const int SMaxDesiredFieldNumber = 17;
    private static readonly pb::FieldCodec<float> _repeated_sMaxDesired_codec
        = pb::FieldCodec.ForFloat(141);
    private readonly pbc::RepeatedField<float> sMaxDesired_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> SMaxDesired {
      get { return sMaxDesired_; }
    }

    /// <summary>Field number for the "reference_speed" field.</summary>
    public const int ReferenceSpeedFieldNumber = 18;
    private static readonly pb::FieldCodec<float> _repeated_referenceSpeed_codec
        = pb::FieldCodec.ForFloat(149);
    private readonly pbc::RepeatedField<float> referenceSpeed_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> ReferenceSpeed {
      get { return referenceSpeed_; }
    }

    /// <summary>Field number for the "obs_per" field.</summary>
    public const int ObsPerFieldNumber = 19;
    private global::Xviewer.ObsIntentionPer obsPer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xviewer.ObsIntentionPer ObsPer {
      get { return obsPer_; }
      set {
        obsPer_ = value;
      }
    }

    /// <summary>Field number for the "s_min_desired" field.</summary>
    public const int SMinDesiredFieldNumber = 20;
    private static readonly pb::FieldCodec<float> _repeated_sMinDesired_codec
        = pb::FieldCodec.ForFloat(165);
    private readonly pbc::RepeatedField<float> sMinDesired_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> SMinDesired {
      get { return sMinDesired_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as STPubInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(STPubInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StDebug, other.StDebug)) return false;
      if (StPlanningErrCode != other.StPlanningErrCode) return false;
      if (!object.Equals(StBoundaries, other.StBoundaries)) return false;
      if (!object.Equals(SpeedDataFallback, other.SpeedDataFallback)) return false;
      if (!object.Equals(SpeedDataDp, other.SpeedDataDp)) return false;
      if (!object.Equals(SpeedDataQp, other.SpeedDataQp)) return false;
      if (StTrajType != other.StTrajType) return false;
      if (StPlanningErrCodeStr != other.StPlanningErrCodeStr) return false;
      if (!object.Equals(SpeedLimit, other.SpeedLimit)) return false;
      if (!object.Equals(FeasibleData, other.FeasibleData)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Timestamp, other.Timestamp)) return false;
      if(!stInfoListVirtual_.Equals(other.stInfoListVirtual_)) return false;
      if(!intentionObId_.Equals(other.intentionObId_)) return false;
      if(!crossableObId_.Equals(other.crossableObId_)) return false;
      if(!virtualObsData_.Equals(other.virtualObsData_)) return false;
      if (!object.Equals(DesiredAcc, other.DesiredAcc)) return false;
      if(!sMaxDesired_.Equals(other.sMaxDesired_)) return false;
      if(!referenceSpeed_.Equals(other.referenceSpeed_)) return false;
      if (!object.Equals(ObsPer, other.ObsPer)) return false;
      if(!sMinDesired_.Equals(other.sMinDesired_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (stDebug_ != null) hash ^= StDebug.GetHashCode();
      if (HasStPlanningErrCode) hash ^= StPlanningErrCode.GetHashCode();
      if (stBoundaries_ != null) hash ^= StBoundaries.GetHashCode();
      if (speedDataFallback_ != null) hash ^= SpeedDataFallback.GetHashCode();
      if (speedDataDp_ != null) hash ^= SpeedDataDp.GetHashCode();
      if (speedDataQp_ != null) hash ^= SpeedDataQp.GetHashCode();
      if (HasStTrajType) hash ^= StTrajType.GetHashCode();
      if (HasStPlanningErrCodeStr) hash ^= StPlanningErrCodeStr.GetHashCode();
      if (speedLimit_ != null) hash ^= SpeedLimit.GetHashCode();
      if (feasibleData_ != null) hash ^= FeasibleData.GetHashCode();
      if (HasTimestamp) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Timestamp);
      hash ^= stInfoListVirtual_.GetHashCode();
      hash ^= intentionObId_.GetHashCode();
      hash ^= crossableObId_.GetHashCode();
      hash ^= virtualObsData_.GetHashCode();
      if (desiredAcc_ != null) hash ^= DesiredAcc.GetHashCode();
      hash ^= sMaxDesired_.GetHashCode();
      hash ^= referenceSpeed_.GetHashCode();
      if (obsPer_ != null) hash ^= ObsPer.GetHashCode();
      hash ^= sMinDesired_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (stDebug_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StDebug);
      }
      if (HasStPlanningErrCode) {
        output.WriteRawTag(16);
        output.WriteInt32(StPlanningErrCode);
      }
      if (stBoundaries_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(StBoundaries);
      }
      if (speedDataFallback_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SpeedDataFallback);
      }
      if (speedDataDp_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SpeedDataDp);
      }
      if (speedDataQp_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(SpeedDataQp);
      }
      if (HasStTrajType) {
        output.WriteRawTag(56);
        output.WriteInt32(StTrajType);
      }
      if (HasStPlanningErrCodeStr) {
        output.WriteRawTag(66);
        output.WriteString(StPlanningErrCodeStr);
      }
      if (speedLimit_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(SpeedLimit);
      }
      if (feasibleData_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(FeasibleData);
      }
      if (HasTimestamp) {
        output.WriteRawTag(89);
        output.WriteDouble(Timestamp);
      }
      stInfoListVirtual_.WriteTo(output, _repeated_stInfoListVirtual_codec);
      intentionObId_.WriteTo(output, _repeated_intentionObId_codec);
      crossableObId_.WriteTo(output, _repeated_crossableObId_codec);
      virtualObsData_.WriteTo(output, _repeated_virtualObsData_codec);
      if (desiredAcc_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(DesiredAcc);
      }
      sMaxDesired_.WriteTo(output, _repeated_sMaxDesired_codec);
      referenceSpeed_.WriteTo(output, _repeated_referenceSpeed_codec);
      if (obsPer_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(ObsPer);
      }
      sMinDesired_.WriteTo(output, _repeated_sMinDesired_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (stDebug_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StDebug);
      }
      if (HasStPlanningErrCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StPlanningErrCode);
      }
      if (stBoundaries_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StBoundaries);
      }
      if (speedDataFallback_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpeedDataFallback);
      }
      if (speedDataDp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpeedDataDp);
      }
      if (speedDataQp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpeedDataQp);
      }
      if (HasStTrajType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StTrajType);
      }
      if (HasStPlanningErrCodeStr) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StPlanningErrCodeStr);
      }
      if (speedLimit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpeedLimit);
      }
      if (feasibleData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FeasibleData);
      }
      if (HasTimestamp) {
        size += 1 + 8;
      }
      size += stInfoListVirtual_.CalculateSize(_repeated_stInfoListVirtual_codec);
      size += intentionObId_.CalculateSize(_repeated_intentionObId_codec);
      size += crossableObId_.CalculateSize(_repeated_crossableObId_codec);
      size += virtualObsData_.CalculateSize(_repeated_virtualObsData_codec);
      if (desiredAcc_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DesiredAcc);
      }
      size += sMaxDesired_.CalculateSize(_repeated_sMaxDesired_codec);
      size += referenceSpeed_.CalculateSize(_repeated_referenceSpeed_codec);
      if (obsPer_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ObsPer);
      }
      size += sMinDesired_.CalculateSize(_repeated_sMinDesired_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(STPubInfo other) {
      if (other == null) {
        return;
      }
      if (other.stDebug_ != null) {
        if (stDebug_ == null) {
          StDebug = new global::Xviewer.STDebug();
        }
        StDebug.MergeFrom(other.StDebug);
      }
      if (other.HasStPlanningErrCode) {
        StPlanningErrCode = other.StPlanningErrCode;
      }
      if (other.stBoundaries_ != null) {
        if (stBoundaries_ == null) {
          StBoundaries = new global::Xviewer.STObjectBoundary();
        }
        StBoundaries.MergeFrom(other.StBoundaries);
      }
      if (other.speedDataFallback_ != null) {
        if (speedDataFallback_ == null) {
          SpeedDataFallback = new global::Xviewer.SpeedData();
        }
        SpeedDataFallback.MergeFrom(other.SpeedDataFallback);
      }
      if (other.speedDataDp_ != null) {
        if (speedDataDp_ == null) {
          SpeedDataDp = new global::Xviewer.SpeedData();
        }
        SpeedDataDp.MergeFrom(other.SpeedDataDp);
      }
      if (other.speedDataQp_ != null) {
        if (speedDataQp_ == null) {
          SpeedDataQp = new global::Xviewer.SpeedData();
        }
        SpeedDataQp.MergeFrom(other.SpeedDataQp);
      }
      if (other.HasStTrajType) {
        StTrajType = other.StTrajType;
      }
      if (other.HasStPlanningErrCodeStr) {
        StPlanningErrCodeStr = other.StPlanningErrCodeStr;
      }
      if (other.speedLimit_ != null) {
        if (speedLimit_ == null) {
          SpeedLimit = new global::Xviewer.SpeedLimit();
        }
        SpeedLimit.MergeFrom(other.SpeedLimit);
      }
      if (other.feasibleData_ != null) {
        if (feasibleData_ == null) {
          FeasibleData = new global::Xviewer.FeasibleData();
        }
        FeasibleData.MergeFrom(other.FeasibleData);
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      stInfoListVirtual_.Add(other.stInfoListVirtual_);
      intentionObId_.Add(other.intentionObId_);
      crossableObId_.Add(other.crossableObId_);
      virtualObsData_.Add(other.virtualObsData_);
      if (other.desiredAcc_ != null) {
        if (desiredAcc_ == null) {
          DesiredAcc = new global::Xviewer.DesiredAcceleration();
        }
        DesiredAcc.MergeFrom(other.DesiredAcc);
      }
      sMaxDesired_.Add(other.sMaxDesired_);
      referenceSpeed_.Add(other.referenceSpeed_);
      if (other.obsPer_ != null) {
        if (obsPer_ == null) {
          ObsPer = new global::Xviewer.ObsIntentionPer();
        }
        ObsPer.MergeFrom(other.ObsPer);
      }
      sMinDesired_.Add(other.sMinDesired_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (stDebug_ == null) {
              StDebug = new global::Xviewer.STDebug();
            }
            input.ReadMessage(StDebug);
            break;
          }
          case 16: {
            StPlanningErrCode = input.ReadInt32();
            break;
          }
          case 26: {
            if (stBoundaries_ == null) {
              StBoundaries = new global::Xviewer.STObjectBoundary();
            }
            input.ReadMessage(StBoundaries);
            break;
          }
          case 34: {
            if (speedDataFallback_ == null) {
              SpeedDataFallback = new global::Xviewer.SpeedData();
            }
            input.ReadMessage(SpeedDataFallback);
            break;
          }
          case 42: {
            if (speedDataDp_ == null) {
              SpeedDataDp = new global::Xviewer.SpeedData();
            }
            input.ReadMessage(SpeedDataDp);
            break;
          }
          case 50: {
            if (speedDataQp_ == null) {
              SpeedDataQp = new global::Xviewer.SpeedData();
            }
            input.ReadMessage(SpeedDataQp);
            break;
          }
          case 56: {
            StTrajType = input.ReadInt32();
            break;
          }
          case 66: {
            StPlanningErrCodeStr = input.ReadString();
            break;
          }
          case 74: {
            if (speedLimit_ == null) {
              SpeedLimit = new global::Xviewer.SpeedLimit();
            }
            input.ReadMessage(SpeedLimit);
            break;
          }
          case 82: {
            if (feasibleData_ == null) {
              FeasibleData = new global::Xviewer.FeasibleData();
            }
            input.ReadMessage(FeasibleData);
            break;
          }
          case 89: {
            Timestamp = input.ReadDouble();
            break;
          }
          case 98: {
            stInfoListVirtual_.AddEntriesFrom(input, _repeated_stInfoListVirtual_codec);
            break;
          }
          case 106:
          case 104: {
            intentionObId_.AddEntriesFrom(input, _repeated_intentionObId_codec);
            break;
          }
          case 114:
          case 112: {
            crossableObId_.AddEntriesFrom(input, _repeated_crossableObId_codec);
            break;
          }
          case 122: {
            virtualObsData_.AddEntriesFrom(input, _repeated_virtualObsData_codec);
            break;
          }
          case 130: {
            if (desiredAcc_ == null) {
              DesiredAcc = new global::Xviewer.DesiredAcceleration();
            }
            input.ReadMessage(DesiredAcc);
            break;
          }
          case 138:
          case 141: {
            sMaxDesired_.AddEntriesFrom(input, _repeated_sMaxDesired_codec);
            break;
          }
          case 146:
          case 149: {
            referenceSpeed_.AddEntriesFrom(input, _repeated_referenceSpeed_codec);
            break;
          }
          case 154: {
            if (obsPer_ == null) {
              ObsPer = new global::Xviewer.ObsIntentionPer();
            }
            input.ReadMessage(ObsPer);
            break;
          }
          case 162:
          case 165: {
            sMinDesired_.AddEntriesFrom(input, _repeated_sMinDesired_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
